{"conflicts":[
  {
    "devdecision": "Manual",
    "id": 48079,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2012 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2014 Ent. Services Development Corporation LP",
    "conflict": "* Copyright 2009-2014 Eucalyptus Systems, Inc."
  },
  {
    "devdecision": "Manual",
    "id": 48080,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2012 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2016 Ent. Services Development Corporation LP",
    "conflict": "* Copyright 2009-2016 Eucalyptus Systems, Inc."
  },
  {
    "devdecision": "Manual",
    "id": 48082,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2015 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2016 Ent. Services Development Corporation LP",
    "conflict": "* Copyright 2009-2016 Eucalyptus Systems, Inc."
  },
  {
    "devdecision": "Manual",
    "id": 48083,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2015 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2016 Ent. Services Development Corporation LP",
    "conflict": "* Copyright 2009-2016 Eucalyptus Systems, Inc."
  },
  {
    "devdecision": "Manual",
    "id": 48084,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2015 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2016 Ent. Services Development Corporation LP",
    "conflict": "* Copyright 2009-2016 Eucalyptus Systems, Inc."
  },
  {
    "devdecision": "Manual",
    "id": 48085,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2012 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2017 Ent. Services Development Corporation LP",
    "conflict": "* (c) Copyright 2017 Hewlett Packard Enterprise Development Company LP"
  },
  {
    "devdecision": "Manual",
    "id": 48087,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2016 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2017 Ent. Services Development Corporation LP",
    "conflict": "* (c) Copyright 2017 Hewlett Packard Enterprise Development Company LP"
  },
  {
    "devdecision": "Manual",
    "id": 48093,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2012 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2014 Ent. Services Development Corporation LP",
    "conflict": "* Copyright 2009-2014 Eucalyptus Systems, Inc."
  },
  {
    "devdecision": "Manual",
    "id": 48094,
    "v2": "* Copyright 2008 Regents of the University of California * Copyright 2009-2014 Ent. Services Development Corporation LP",
    "resolution": "* Copyright 2008 Regents of the University of California * Copyright 2009-2017 Ent. Services Development Corporation LP",
    "conflict": "* (c) Copyright 2017 Hewlett Packard Enterprise Development Company LP"
  },
  {
    "devdecision": "Combination",
    "id": 48108,
    "v2": "public ObjectStorageWrappedCredentials(String correlationId, String stringToSign, SignatureCredential credential, String signedHeaders, String signature, String securityToken, String payloadHash) {",
    "resolution": "public ObjectStorageWrappedCredentials(String correlationId, Long date, String stringToSign, SignatureCredential credential, String signedHeaders, String signature, String securityToken, String payloadHash) {",
    "conflict": "public ObjectStorageWrappedCredentials(String correlationId, Long date, String stringToSign, SignatureCredential credential, String signedHeaders, String signature, String securityToken) {"
  },
  {
    "devdecision": "Manual",
    "id": 48109,
    "v2": "ObjectStorageWrappedCredentials creds = new ObjectStorageWrappedCredentials(request.getCorrelationId(), stringToSign, credential, signedHeaders, signature, securityToken, payloadHash);",
    "resolution": "ObjectStorageWrappedCredentials creds = new ObjectStorageWrappedCredentials(request.getCorrelationId(), date==null?null:date.getTime( ), stringToSign, credential, signedHeaders, signature, securityToken, payloadHash);",
    "conflict": "ObjectStorageWrappedCredentials creds = new ObjectStorageWrappedCredentials(request.getCorrelationId(), date==null?null:date.getTime( ), stringToSign, credential, signedHeaders, signature, securityToken);"
  },
  {
    "devdecision": "Manual",
    "id": 48110,
    "v2": "ObjectStorageWrappedCredentials creds = new ObjectStorageWrappedCredentials(request.getCorrelationId(), stringToSign, credential, signedHeaders, signature, securityToken, null);",
    "resolution": "ObjectStorageWrappedCredentials creds = new ObjectStorageWrappedCredentials(request.getCorrelationId(), date==null?null:date.getTime( ), stringToSign, credential, signedHeaders, signature, securityToken, null);",
    "conflict": "ObjectStorageWrappedCredentials creds = new ObjectStorageWrappedCredentials(request.getCorrelationId(), date==null?null:date.getTime( ), stringToSign, credential, signedHeaders, signature, securityToken);"
  },
  {
    "devdecision": "Combination",
    "id": 48111,
    "v2": "import com.eucalyptus.objectstorage.exceptions.s3.SignatureDoesNotMatchException;",
    "resolution": "import com.eucalyptus.objectstorage.exceptions.s3.InvalidAccessKeyIdException; import com.eucalyptus.objectstorage.exceptions.s3.SignatureDoesNotMatchException;",
    "conflict": "import com.eucalyptus.objectstorage.exceptions.s3.InvalidAccessKeyIdException; import com.eucalyptus.objectstorage.msgs.ObjectStorageErrorMessageType;"
  },
  {
    "devdecision": "Version 1",
    "id": 48114,
    "v2": "static void login(MappingHttpRequest request, String date, String canonicalizedAmzHeaders, String accessKeyId, String signature, String securityToken) throws S3Exception {",
    "resolution": "static void login(MappingHttpRequest request, Date signatureDate, String date, String canonicalizedAmzHeaders, String accessKeyId, String signature, String securityToken) throws S3Exception {",
    "conflict": "static void login(MappingHttpRequest request, Date signatureDate, String date, String canonicalizedAmzHeaders, String accessKeyId, String signature, String securityToken) throws S3Exception {"
  },
  {
    "devdecision": "Combination",
    "id": 48118,
    "v2": "",
    "resolution": "import com.google.common.base.Enums; import com.google.common.base.MoreObjects;",
    "conflict": "import com.google.common.base.Enums; import com.google.common.base.Function; import com.google.common.base.MoreObjects;"
  },
  {
    "devdecision": "Combination",
    "id": 48166,
    "v2": "private final static String                            PREFIX            = \"eucalyptus-\"; private final static Integer                           NUM_QUEUE_WORKERS = 32;                                          //TODO:GRZE: discover on per-service basis.;",
    "resolution": "private final static String                            PREFIX            = \"eucalyptus-\"; private final static Integer                           NUM_QUEUE_WORKERS = 64;                                          //TODO:GRZE: discover on per-service basis.;",
    "conflict": "private final static String                            PREFIX            = \"Eucalyptus.\"; private final static Integer                           NUM_QUEUE_WORKERS = 64;                                          //TODO:GRZE: discover on per-service basis.;"
  },
  {
    "devdecision": "Combination",
    "id": 48170,
    "v2": "@SuppressWarnings( { \"UnnecessaryLocalVariable\", \"UnusedDeclaration\", \"Guava\", \"Convert2Lambda\", \"RedundantTypeArguments\", \"StaticPseudoFunctionalStyleMethod\" } ) @ComponentNamed",
    "resolution": "@SuppressWarnings( { \"UnnecessaryLocalVariable\", \"UnusedDeclaration\", \"Guava\", \"Convert2Lambda\", \"RedundantTypeArguments\", \"StaticPseudoFunctionalStyleMethod\" } ) @ComponentNamed(\"computeVpcManager\")",
    "conflict": "@SuppressWarnings( { \"UnnecessaryLocalVariable\", \"UnusedDeclaration\" } ) @ComponentNamed(\"computeVpcManager\")"
  },
  {
    "devdecision": "Combination",
    "id": 48204,
    "v2": "import org.hibernate.annotations.Cache; import org.hibernate.annotations.CacheConcurrencyStrategy;  import com.eucalyptus.blockstorage.ceph.exceptions.EucalyptusCephException;",
    "resolution": "import com.eucalyptus.blockstorage.ceph.exceptions.EucalyptusCephException;",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 48218,
    "v2": "import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAppCookieStickinessPolicy; import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingLBCookieStickinessPolicyType;",
    "resolution": "import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAppCookieStickinessPolicy; import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingLBCookieStickinessPolicyType;import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAccessLoggingPolicy;",
    "conflict": "import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAccessLoggingPolicy;"
  },
  {
    "devdecision": "Concatenation",
    "id": 48219,
    "v2": "import com.amazonaws.services.simpleworkflow.flow.core.Promise; import com.eucalyptus.cloudformation.ValidationErrorException;",
    "resolution": "import com.amazonaws.services.simpleworkflow.flow.core.Promise; import com.eucalyptus.cloudformation.ValidationErrorException;import com.eucalyptus.auth.Accounts;",
    "conflict": "import com.eucalyptus.auth.Accounts;"
  },
  {
    "devdecision": "Concatenation",
    "id": 48220,
    "v2": "import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAppCookieStickinessPolicy; import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingLBCookieStickinessPolicyType;",
    "resolution": "import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAppCookieStickinessPolicy; import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingLBCookieStickinessPolicyType;import com.eucalyptus.cloudformation.resources.standard.propertytypes.CloudFormationResourceTag; import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAccessLoggingPolicy;",
    "conflict": "import com.eucalyptus.cloudformation.resources.standard.propertytypes.CloudFormationResourceTag; import com.eucalyptus.cloudformation.resources.standard.propertytypes.ElasticLoadBalancingAccessLoggingPolicy;"
  },
  {
    "devdecision": "Version 2",
    "id": 48221,
    "v2": "import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.netflix.glisten.WorkflowOperations;",
    "resolution": "import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.netflix.glisten.WorkflowOperations;",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 48222,
    "v2": "import java.util.Set; import javax.annotation.Nullable;",
    "resolution": "import java.util.Set; import javax.annotation.Nullable;import java.util.Objects;",
    "conflict": "import java.util.Objects;"
  },
  {
    "devdecision": "Version 2",
    "id": 48224,
    "v2": "ModifyNetworkInterfaceAttributeResponseType modifyNetworkInterfaceAttributeResponseType = AsyncRequests.sendSync(configuration, modifyNetworkInterfaceAttributeType);",
    "resolution": "ModifyNetworkInterfaceAttributeResponseType modifyNetworkInterfaceAttributeResponseType = AsyncRequests.sendSync(configuration, modifyNetworkInterfaceAttributeType);",
    "conflict": "//        modifyNetworkInterfaceAttributeType.setGroupSet(newAction....); // find a default group (blah)"
  },
  {
    "devdecision": "Combination",
    "id": 48229,
    "v2": "Criteria criteria = Entities.createCriteria(StackResourceEntity.class) .add(accountId!=null ? Restrictions.eq(\"accountId\", accountId) : Restrictions.conjunction( ))",
    "resolution": "Criteria criteria = Entities.createCriteria(StackResourceEntityInUse.class) .add(accountId!=null ? Restrictions.eq(\"accountId\", accountId) : Restrictions.conjunction( ))",
    "conflict": "Criteria criteria = Entities.createCriteria(StackResourceEntityInUse.class) .add(Restrictions.eq(\"accountId\", accountId))"
  },
  {
    "devdecision": "Version 1",
    "id": 48247,
    "v2": "private static final AtomicReference<Pair<Integer,String>> lastEncodedNetworkInformation = new AtomicReference<>( );",
    "resolution": "private static final AtomicReference<LastBroadcastInfo> lastBroadcastInformation = new AtomicReference<>( ); private static final AtomicReference<Pair<Long,String>> lastAppliedNetworkInformation = new AtomicReference<>( );",
    "conflict": "private static final AtomicReference<LastBroadcastInfo> lastBroadcastInformation = new AtomicReference<>( ); private static final AtomicReference<Pair<Long,String>> lastAppliedNetworkInformation = new AtomicReference<>( );"
  },
  {
    "devdecision": "Version 1",
    "id": 48249,
    "v2": "final Pair<Integer,String> lastBroadcast = lastEncodedNetworkInformation.get( );",
    "resolution": "final LastBroadcastInfo lastBroadcast = lastBroadcastInformation.get( ); final Pair<Long,String> appliedVersion = lastAppliedNetworkInformation.get( );",
    "conflict": "final LastBroadcastInfo lastBroadcast = lastBroadcastInformation.get( ); final Pair<Long,String> appliedVersion = lastAppliedNetworkInformation.get( );"
  },
  {
    "devdecision": "Concatenation",
    "id": 48254,
    "v2": "import com.eucalyptus.compute.ClientComputeException;",
    "resolution": "import com.eucalyptus.compute.ClientComputeException;import com.eucalyptus.auth.Regions; import com.eucalyptus.component.ComponentIds; import com.eucalyptus.component.Components;",
    "conflict": "import com.eucalyptus.auth.Regions; import com.eucalyptus.component.ComponentIds; import com.eucalyptus.component.Components;"
  },
  {
    "devdecision": "Concatenation",
    "id": 48261,
    "v2": "import com.google.common.base.Supplier;",
    "resolution": "import com.google.common.base.Splitter;import com.google.common.base.Supplier;",
    "conflict": "import com.google.common.base.Splitter;"
  },
  {
    "devdecision": "Version 1",
    "id": 48263,
    "v2": "",
    "resolution": "import com.eucalyptus.compute.common.internal.vm.VmInstance; import com.eucalyptus.vm.VmInstances; import com.eucalyptus.compute.common.internal.vm.VmInstance.Reason; import com.eucalyptus.compute.common.internal.vm.VmInstance.VmState;",
    "conflict": "import com.eucalyptus.compute.common.internal.vm.VmInstance; import com.eucalyptus.vm.VmInstances; import com.eucalyptus.compute.common.internal.vm.VmInstance.Reason; import com.eucalyptus.compute.common.internal.vm.VmInstance.VmState;"
  },
  {
    "devdecision": "Combination",
    "id": 48312,
    "v2": "String.format(\".%s.%s\", LOADBALANCER_DNS_SUBDOMAIN, DomainNames.externalSubdomain( ).relativize( Name.root )).length();",
    "resolution": "String.format(\".%s.%s\", DNS_SUBDOMAIN, DomainNames.externalSubdomain( ).relativize( Name.root )).length();",
    "conflict": "String.format(\".%s.%s\", DNS_SUBDOMAIN, SystemConfiguration.getSystemConfiguration().getDnsDomain()).length();"
  },
  {
    "devdecision": "Manual",
    "id": 48313,
    "v2": "throw handleException( ex );",
    "resolution": "LOG.error( ex, ex ); lastEx = ex;",
    "conflict": "LOG.error( ex, ex ); throw ex;"
  },
  {
    "devdecision": "Combination",
    "id": 48314,
    "v2": "if (CloudMetadatas.isMachineImageIdentifier(IMAGING_WORKER_EMI)) { if ( CheckCounter >= 3 && Topology.isEnabled( Eucalyptus.class ) ) {",
    "resolution": "if (CloudMetadatas.isMachineImageIdentifier(IMAGE)) { if ( CheckCounter >= 3 && Topology.isEnabled( Eucalyptus.class ) ) {",
    "conflict": "if (CloudMetadatas.isMachineImageIdentifier(IMAGE)) { if (CheckCounter == 3) {"
  },
  {
    "devdecision": "Combination",
    "id": 48315,
    "v2": "if ( CloudMetadatas.isMachineImageIdentifier( LoadBalancerASGroupCreator.LOADBALANCER_EMI ) ) { if( CheckCounter >= 3 && Topology.isEnabled( Eucalyptus.class ) ){",
    "resolution": "if ( CloudMetadatas.isMachineImageIdentifier( LoadBalancerASGroupCreator.IMAGE ) ) { if( CheckCounter >= 3 && Topology.isEnabled( Eucalyptus.class ) ){",
    "conflict": "if ( CloudMetadatas.isMachineImageIdentifier( LoadBalancerASGroupCreator.IMAGE ) ) { if( CheckCounter == 3 && Topology.isEnabled( Eucalyptus.class ) ){"
  },
  {
    "devdecision": "Combination",
    "id": 48444,
    "v2": "this.setupVolumeMessages(); this.updateResourceMessages( );",
    "resolution": "this.setupVolumeMessages( ); this.setupCredentialMessages();",
    "conflict": "this.setupVolumeMessages( ); this.setupCredentialMessages();"
  },
  {
    "devdecision": "Concatenation",
    "id": 48449,
    "v2": "import java.net.SocketAddress;",
    "resolution": "import com.eucalyptus.auth.AuthContextSupplier; import static com.eucalyptus.util.RestrictedTypes.findPolicyVendor; import static com.eucalyptus.util.RestrictedTypes.getIamActionByMessageType;import java.net.SocketAddress;",
    "conflict": "import com.eucalyptus.auth.AuthContextSupplier; import static com.eucalyptus.util.RestrictedTypes.findPolicyVendor; import static com.eucalyptus.util.RestrictedTypes.getIamActionByMessageType;"
  },
  {
    "devdecision": "Version 1",
    "id": 48474,
    "v2": "",
    "resolution": "import edu.ucsb.eucalyptus.msgs.RunningInstancesItemType; import edu.ucsb.eucalyptus.msgs.TerminateInstancesResponseType; import edu.ucsb.eucalyptus.msgs.TerminateInstancesType;",
    "conflict": "import edu.ucsb.eucalyptus.msgs.RunningInstancesItemType; import edu.ucsb.eucalyptus.msgs.TerminateInstancesResponseType; import edu.ucsb.eucalyptus.msgs.TerminateInstancesType;"
  },
  {
    "devdecision": "Manual",
    "id": 48478,
    "v2": "import javax.annotation.Nullable;",
    "resolution": "import javax.annotation.Nullable; import org.apache.log4j.Logger;",
    "conflict": "import javax.persistence.EntityTransaction;  import com.eucalyptus.vm.VmInstances;"
  },
  {
    "devdecision": "Version 2",
    "id": 48534,
    "v2": "} this.allocInfo.setUserDataAsString( payload );",
    "resolution": "} this.allocInfo.setUserDataAsString( payload );",
    "conflict": "} this.allocInfo.setUserData(payload);"
  },
  {
    "devdecision": "Version 1",
    "id": 48541,
    "v2": "v3_4_1;",
    "resolution": "v3_4_1, v4_0_0;",
    "conflict": "v3_4_1, v4_0_0;"
  },
  {
    "devdecision": "Concatenation",
    "id": 48550,
    "v2": "import com.eucalyptus.util.Callback; import com.eucalyptus.util.DispatchingClient;",
    "resolution": "import com.eucalyptus.util.Callback; import com.eucalyptus.util.DispatchingClient;import com.eucalyptus.util.CollectionUtils;",
    "conflict": "import com.eucalyptus.util.CollectionUtils;"
  },
  {
    "devdecision": "Version 1",
    "id": 48560,
    "v2": "v3_3_2;",
    "resolution": "v3_3_2, v3_4_0, ;",
    "conflict": "v3_3_2, v3_4_0, ;"
  },
  {
    "devdecision": "Concatenation",
    "id": 48573,
    "v2": "import com.eucalyptus.bootstrap.Hosts; import com.eucalyptus.component.ComponentId; import com.eucalyptus.component.Partition;",
    "resolution": "import com.eucalyptus.bootstrap.Hosts; import com.eucalyptus.component.ComponentId; import com.eucalyptus.component.Partition;import com.eucalyptus.blockstorage.Storage;",
    "conflict": "import com.eucalyptus.blockstorage.Storage;"
  },
  {
    "devdecision": "Version 1",
    "id": 48578,
    "v2": "private static final int PRIMARY_DATABASE_WEIGHT = 100; private static final int SECONDARY_DATABASE_WEIGHT = 1;",
    "resolution": "private static final int DATABASE_WEIGHT_PRIMARY = 100; private static final int DATABASE_WEIGHT_SECONDARY = 1;",
    "conflict": "private static final int DATABASE_WEIGHT_PRIMARY = 100; private static final int DATABASE_WEIGHT_SECONDARY = 1;"
  },
  {
    "devdecision": "Version 1",
    "id": 48579,
    "v2": "? PRIMARY_DATABASE_WEIGHT : SECONDARY_DATABASE_WEIGHT );",
    "resolution": "? DATABASE_WEIGHT_PRIMARY : DATABASE_WEIGHT_SECONDARY );",
    "conflict": "? DATABASE_WEIGHT_PRIMARY : DATABASE_WEIGHT_SECONDARY );"
  },
  {
    "devdecision": "Combination",
    "id": 48582,
    "v2": "import com.eucalyptus.blockstorage.WalrusUtil; import com.eucalyptus.bootstrap.Bootstrap; import com.eucalyptus.bootstrap.Databases;",
    "resolution": "import com.eucalyptus.blockstorage.WalrusUtil; import com.eucalyptus.bootstrap.Bootstrap; import com.eucalyptus.bootstrap.Databases;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 48591,
    "v2": "",
    "resolution": "import org.jboss.netty.channel.Channels; import org.jboss.netty.handler.codec.http.HttpHeaders;",
    "conflict": "import org.jboss.netty.channel.ChannelUpstreamHandler; import org.jboss.netty.channel.Channels; import org.jboss.netty.handler.codec.http.HttpHeaders;"
  },
  {
    "devdecision": "Combination",
    "id": 48592,
    "v2": "",
    "resolution": "import com.eucalyptus.component.annotation.AwsServiceName; import com.eucalyptus.component.annotation.ComponentPart; import com.eucalyptus.component.annotation.PublicService;",
    "conflict": "import com.eucalyptus.component.annotation.AwsServiceName; import com.eucalyptus.component.annotation.PublicService; import com.eucalyptus.context.Contexts;"
  },
  {
    "devdecision": "Version 2",
    "id": 48595,
    "v2": "",
    "resolution": "",
    "conflict": "import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeResponseType; import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeType;"
  },
  {
    "devdecision": "Concatenation",
    "id": 48600,
    "v2": "import javax.persistence.Entity;",
    "resolution": "import javax.persistence.EnumType; import javax.persistence.Enumerated;import javax.persistence.Entity;",
    "conflict": "import javax.persistence.EnumType; import javax.persistence.Enumerated;"
  },
  {
    "devdecision": "Version 1",
    "id": 48605,
    "v2": "",
    "resolution": "import static com.eucalyptus.util.Parameters.checkParam; import static org.hamcrest.Matchers.notNullValue;  import java.util.ArrayList;",
    "conflict": "import static com.eucalyptus.util.Parameters.checkParam; import static org.hamcrest.Matchers.notNullValue;  import java.util.ArrayList;"
  },
  {
    "devdecision": "Manual",
    "id": 48606,
    "v2": "",
    "resolution": "import com.eucalyptus.compute.ClientComputeException; import org.apache.commons.lang.StringUtils;",
    "conflict": "import com.eucalyptus.compute.ClientComputeException; import org.apache.commons.lang.StringUtils;"
  },
  {
    "devdecision": "Version 2",
    "id": 48618,
    "v2": "public static Record ptrRecord( Name name, Name inAddrArpa ) { return ptrRecord( name, inAddrArpaToInetAddress( inAddrArpa ) ); }",
    "resolution": "public static Record ptrRecord( Name name, Name inAddrArpa ) { return ptrRecord( name, inAddrArpaToInetAddress( inAddrArpa ) ); }",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 48628,
    "v2": "import java.util.HashMap; import java.util.Map; import java.util.concurrent.TimeUnit;",
    "resolution": "import java.util.Map; import java.util.HashMap; import java.util.concurrent.TimeUnit;",
    "conflict": "import java.util.Map;"
  },
  {
    "devdecision": "Version 1",
    "id": 48629,
    "v2": "import com.eucalyptus.cloudwatch.domain.alarms.AlarmHistory;",
    "resolution": "import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCache; import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCacheKey;",
    "conflict": "import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCache; import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCacheKey;"
  },
  {
    "devdecision": "Version 1",
    "id": 48631,
    "v2": "import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeResponseType; import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeType;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 48633,
    "v2": "import com.eucalyptus.component.id.Walrus; import com.google.common.base.Strings;",
    "resolution": "import com.eucalyptus.component.id.Walrus; import com.google.common.base.Strings;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 48635,
    "v2": "// fireUsageEvent For Get Object",
    "resolution": "//fireUsageEvent For Get Object",
    "conflict": "//fireUsageEvent For Get Object"
  },
  {
    "devdecision": "Version 1",
    "id": 48657,
    "v2": "if ( request.getHeader(HttpHeaders.Names.HOST).contains( \"amazonaws.com\" ) ) {",
    "resolution": "if ( request.getHeader(HttpHeaders.Names.HOST).contains( \"amazonaws.com\" ) || request.getHeader(HttpHeaders.Names.HOST).contains( subDomain.get( ) ) ) {",
    "conflict": "if ( request.getHeader(HttpHeaders.Names.HOST).contains( \"amazonaws.com\" ) || request.getHeader(HttpHeaders.Names.HOST).contains( subDomain.get( ) ) ) {"
  },
  {
    "devdecision": "Version 1",
    "id": 48663,
    "v2": "import com.eucalyptus.cloudwatch.domain.alarms.AlarmHistory;",
    "resolution": "import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCache; import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCacheKey;",
    "conflict": "import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCache; import com.eucalyptus.cloudwatch.domain.metricdata.MetricDataQueue.AbsoluteMetricCacheKey;"
  },
  {
    "devdecision": "Version 1",
    "id": 48665,
    "v2": "import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeResponseType; import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeType;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 48683,
    "v2": "import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeResponseType; import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeType;",
    "resolution": "import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeResponseType; import edu.ucsb.eucalyptus.msgs.DeleteStorageVolumeType;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 48698,
    "v2": "",
    "resolution": "import org.hibernate.type.StringClobType;  import com.eucalyptus.blockstorage.util.StorageProperties;",
    "conflict": "import org.hibernate.type.StringClobType;  import com.eucalyptus.blockstorage.util.StorageProperties;"
  },
  {
    "devdecision": "Combination",
    "id": 48699,
    "v2": "",
    "resolution": "import com.eucalyptus.blockstorage.util.StorageProperties;",
    "conflict": "import org.hibernate.annotations.Entity;  import com.eucalyptus.blockstorage.util.StorageProperties;"
  },
  {
    "devdecision": "Version 1",
    "id": 48700,
    "v2": "import com.eucalyptus.component.id.Storage;",
    "resolution": "import com.eucalyptus.blockstorage.Storage; import com.eucalyptus.blockstorage.util.StorageProperties;",
    "conflict": "import com.eucalyptus.blockstorage.Storage; import com.eucalyptus.blockstorage.util.StorageProperties;"
  },
  {
    "devdecision": "Combination",
    "id": 48704,
    "v2": "import org.hibernate.annotations.Type;",
    "resolution": "import com.eucalyptus.blockstorage.util.StorageProperties;",
    "conflict": "import org.hibernate.annotations.Entity;  import com.eucalyptus.blockstorage.util.StorageProperties;"
  },
  {
    "devdecision": "Combination",
    "id": 48707,
    "v2": "",
    "resolution": "import com.eucalyptus.blockstorage.util.StorageProperties; import com.eucalyptus.blockstorage.Storage;",
    "conflict": "import org.hibernate.annotations.Entity;  import com.eucalyptus.blockstorage.util.StorageProperties; import com.eucalyptus.blockstorage.Storage;"
  },
  {
    "devdecision": "Version 2",
    "id": 48715,
    "v2": "LOG.error( \"Failed to fire snapshot creation event for \" + snapshotId, e  ); }",
    "resolution": "LOG.error( \"Failed to fire snapshot creation event for \" + snapshotId, e  ); }",
    "conflict": "LOG.error( e, e  ); }*/"
  },
  {
    "devdecision": "Version 1",
    "id": 48717,
    "v2": "newUri = uri.replaceAll( \"/\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d[/]+\", remoteHost + \":\" ); }",
    "resolution": "newUri = uri.replaceAll( \"/\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d[/]+\", remoteHost + \":\" ); }",
    "conflict": "newUri = uri.replaceAll( \"/\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d[/]+\", remoteHost + \":\" ); }"
  },
  {
    "devdecision": "Combination",
    "id": 48718,
    "v2": "import com.eucalyptus.component.ComponentId.ComponentPart;",
    "resolution": "import com.eucalyptus.component.annotation.ComponentPart;",
    "conflict": "import com.eucalyptus.component.annotation.ComponentPart; import com.eucalyptus.context.Contexts;"
  },
  {
    "devdecision": "Combination",
    "id": 48726,
    "v2": "LOG.info( \"Hosts.viewChange(): \" + printMap( ) ); if ( !joinMembers.isEmpty( ) ) LOG.info( \"Hosts.viewChange(): joined   [\" + currentView.getViewId().getId() + \":\" + currentView.getViewId().getCreator() + \"]=> \"",
    "resolution": "LOG.info(  printMap( \"Hosts.viewChange(before):\" ) ); if ( !joinMembers.isEmpty( ) ) LOG.info( \"Hosts.viewChange(): joined   [\" + currentView.getViewId().getId() + \":\" + currentView.getViewId().getCreator() + \"]=> \"",
    "conflict": "LOG.info(  printMap( \"Hosts.viewChange(before):\" ) ); if ( !joinMembers.isEmpty( ) ) LOG.info( \"Hosts.viewChange(): joined   [\" + currentView.getViewId().getId() + \":\" + currentView.getViewId().getCoordAddress() + \"]=> \""
  },
  {
    "devdecision": "Version 1",
    "id": 48735,
    "v2": "",
    "resolution": "import java.util.BitSet; import java.util.Collections; import java.util.List; import java.util.Map;",
    "conflict": "import java.util.BitSet; import java.util.Collections; import java.util.List; import java.util.Map;"
  },
  {
    "devdecision": "Version 1",
    "id": 48739,
    "v2": "import org.apache.log4j.Logger;  import com.eucalyptus.dns.SetResponse;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 48741,
    "v2": "rcode = addAnswer(response, newname, type, dclass, iterations + 1, flags, internal);",
    "resolution": "rcode = addAnswer(response, newname, type, dclass, iterations + 1, flags);",
    "conflict": "rcode = addAnswer(response, newname, type, dclass, iterations + 1, flags);"
  },
  {
    "devdecision": "Version 1",
    "id": 48743,
    "v2": "boolean internal = false; while (true) {",
    "resolution": "while (Bootstrap.isOperational( )) {",
    "conflict": "while (Bootstrap.isOperational( )) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 48819,
    "v2": "import com.eucalyptus.ws.handlers.SoapMarshallingHandler; import com.google.common.base.Optional;",
    "resolution": "import com.eucalyptus.ws.handlers.SoapMarshallingHandler; import com.google.common.base.Optional;import com.eucalyptus.ws.server.FilteredPipeline.InternalPipeline;",
    "conflict": "import com.eucalyptus.ws.server.FilteredPipeline.InternalPipeline;"
  },
  {
    "devdecision": "Version 1",
    "id": 48835,
    "v2": "if (WalrusProperties.trackUsageStatistics) walrusStatistics.incrementBucketCount();",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 48845,
    "v2": "import java.util.concurrent.TimeUnit;",
    "resolution": "import java.util.concurrent.TimeUnit;",
    "conflict": "import edu.emory.mathcs.backport.java.util.concurrent.TimeUnit;"
  },
  {
    "devdecision": "Version 1",
    "id": 48913,
    "v2": "final long sequenceNumber = counterType.getSequenceNum() + (values.size() - 1); fireUsageEvent(new Supplier<InstanceUsageEvent>() {",
    "resolution": "final long sequenceNumber = dimensionType.getSequenceNum() + (values.size() - 1); fireUsageEvent( new Supplier<InstanceUsageEvent>(){",
    "conflict": "final long sequenceNumber = dimensionType.getSequenceNum() + (values.size() - 1); fireUsageEvent( new Supplier<InstanceUsageEvent>(){"
  },
  {
    "devdecision": "Concatenation",
    "id": 48914,
    "v2": "import com.eucalyptus.auth.principal.Principals;",
    "resolution": "import com.eucalyptus.auth.principal.Principals;import com.eucalyptus.auth.principal.AccountFullName; import com.eucalyptus.auth.principal.UserFullName;",
    "conflict": "import com.eucalyptus.auth.principal.AccountFullName; import com.eucalyptus.auth.principal.UserFullName;"
  },
  {
    "devdecision": "Combination",
    "id": 49125,
    "v2": "private final Map<String, String> parameters; //Parameters are URLDecoded when populated",
    "resolution": "private final Map<String, String> parameters; //Parameters are URLDecoded when populated private final Set<String>         nonQueryParameterKeys; private final Map<String, String> formFields;",
    "conflict": "private final Map<String, String> parameters; private final Set<String>         nonQueryParameterKeys; private final Map<String, String> formFields;"
  },
  {
    "devdecision": "Combination",
    "id": 49348,
    "v2": "private static final ChannelHandler                        bindingHandler           = new BindingHandler( BindingManager.getDefaultBinding( ) );",
    "resolution": "private static final ChannelHandler                        bindingHandler           = new BindingHandler( BindingManager.getDefaultBinding( ) ); private static final ChannelHandler                        internalImpersonationHandler = new InternalImpersonationHandler();",
    "conflict": "private static final ChannelHandler                        bindingHandler           = new BindingHandler( ); private static final ChannelHandler                        internalImpersonationHandler = new InternalImpersonationHandler();"
  },
  {
    "devdecision": "Combination",
    "id": 49350,
    "v2": "pipeline.addLast( \"binding\", Handlers.bindingHandler( ) );",
    "resolution": "pipeline.addLast( \"binding\", Handlers.bindingHandler( ) ); pipeline.addLast( \"impersonation\", Handlers.internalImpersonationHandler( ) );",
    "conflict": "pipeline.addLast( \"binding\", Handlers.bindingHandler( \"msgs_eucalyptus_com\" ) ); pipeline.addLast( \"impersonation\", Handlers.internalImpersonationHandler( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 49359,
    "v2": "import com.eucalyptus.auth.principal.Account; import com.eucalyptus.auth.principal.AccountFullName;",
    "resolution": "import com.eucalyptus.auth.principal.AccountFullName; import com.eucalyptus.auth.principal.Account;",
    "conflict": "import com.eucalyptus.auth.principal.AccountFullName; import com.eucalyptus.auth.principal.Account;"
  },
  {
    "devdecision": "Concatenation",
    "id": 49360,
    "v2": "import com.eucalyptus.auth.principal.AccountFullName; import com.eucalyptus.auth.principal.Account;",
    "resolution": "import com.eucalyptus.auth.principal.Account; import com.eucalyptus.auth.principal.AccountFullName;import com.eucalyptus.auth.principal.AccountFullName; import com.eucalyptus.auth.principal.Account;",
    "conflict": "import com.eucalyptus.auth.principal.Account; import com.eucalyptus.auth.principal.AccountFullName;"
  },
  {
    "devdecision": "Version 1",
    "id": 49377,
    "v2": "public DescribeAvailabilityZonesResponseType DescribeAvailabilityZones( DescribeAvailabilityZonesType request ) throws EucalyptusCloudException {",
    "resolution": "public DescribeAvailabilityZonesResponseType DescribeAvailabilityZones( DescribeAvailabilityZonesType request ) throws EucalyptusCloudException {",
    "conflict": "public DescribeAvailabilityZonesResponseType DescribeAvailabilityZones( DescribeAvailabilityZonesType request ) throws EucalyptusCloudException {"
  },
  {
    "devdecision": "Combination",
    "id": 49455,
    "v2": "import com.google.common.base.Strings; import com.google.common.collect.ArrayListMultimap; import com.google.common.collect.HashBasedTable;",
    "resolution": "import com.google.common.base.Strings;",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 49471,
    "v2": "import com.google.common.collect.Lists;",
    "resolution": "import com.google.common.collect.Lists;import com.google.common.base.Joiner; import com.google.common.base.Strings; import com.google.common.collect.Sets;",
    "conflict": "import com.google.common.base.Joiner; import com.google.common.base.Strings; import com.google.common.collect.Sets;"
  },
  {
    "devdecision": "Version 2",
    "id": 49805,
    "v2": "@ConfigurableField(initial = \"5\", description = \"How often the reporting system requests information from the cluster controller\") public static long DEFAULT_POLL_INTERVAL_MINS = 5;",
    "resolution": "@ConfigurableField(initial = \"5\", description = \"How often the reporting system requests information from the cluster controller\") public static long DEFAULT_POLL_INTERVAL_MINS = 5;",
    "conflict": "@ConfigurableField(initial = \"1399\", description = \"How often the reporting system requests information from the cluster controller\") public static long DEFAULT_POLL_INTERVAL_MINS = 1399;"
  },
  {
    "devdecision": "Version 1",
    "id": 49851,
    "v2": "} else { break; // end of relevant data",
    "resolution": "return true;",
    "conflict": "return true;"
  },
  {
    "devdecision": "Concatenation",
    "id": 49937,
    "v2": "import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables;",
    "resolution": "import com.google.common.collect.ImmutableSet; import com.google.common.collect.Iterables;import com.google.common.base.Strings;",
    "conflict": "import com.google.common.base.Strings;"
  },
  {
    "devdecision": "Version 2",
    "id": 49939,
    "v2": "SnapShotEvent.with(actionInfo, snap.getNaturalId(), snap.getDisplayName(), snap.getOwner(), snap.getVolumeSize().longValue()));",
    "resolution": "SnapShotEvent.with(actionInfo, snap.getNaturalId(), snap.getDisplayName(), snap.getOwner(), snap.getVolumeSize().longValue()));",
    "conflict": "SnapShotEvent.with(actionInfo, snap.getNaturalId(), snap .getVolumeSize().longValue(), snap.getOwner(), snap .getDisplayName()));"
  },
  {
    "devdecision": "Version 1",
    "id": 50208,
    "v2": "return super.apply( config );",
    "resolution": "ServiceConfiguration res = super.apply( config ); return res;",
    "conflict": "ServiceConfiguration res = super.apply( config ); return res;"
  },
  {
    "devdecision": "Version 1",
    "id": 50209,
    "v2": "if ( Bootstrap.isFinished( ) && !Component.State.ENABLED.equals( endResult.lookupState( ) ) ) {",
    "resolution": "boolean enabledEndState = Component.State.ENABLED.equals( endResult.lookupState( ) ); if ( Bootstrap.isFinished( ) && !enabledEndState && Topology.getInstance( ).services.containsValue( input ) ) {",
    "conflict": "boolean enabledEndState = Component.State.ENABLED.equals( endResult.lookupState( ) ); if ( Bootstrap.isFinished( ) && !enabledEndState && Topology.getInstance( ).services.containsValue( input ) ) {"
  },
  {
    "devdecision": "Version 2",
    "id": 50210,
    "v2": "LOG.debug( e ); Logs.extreme( ).debug( e, e );",
    "resolution": "LOG.debug( e ); Logs.extreme( ).debug( e, e );",
    "conflict": "LOG.debug( e, e );"
  },
  {
    "devdecision": "Combination",
    "id": 50237,
    "v2": "import com.eucalyptus.ws.StackConfiguration; import com.google.gwt.safehtml.shared.SafeHtmlBuilder; import com.google.gwt.safehtml.shared.SafeHtmlUtils;",
    "resolution": "import com.google.gwt.safehtml.shared.SafeHtmlBuilder; import com.google.gwt.safehtml.shared.SafeHtmlUtils;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 50247,
    "v2": "import edu.ucsb.eucalyptus.cloud.entities.SystemConfiguration;",
    "resolution": "import edu.ucsb.eucalyptus.cloud.entities.SystemConfiguration;",
    "conflict": "import com.google.common.io.Resources;"
  },
  {
    "devdecision": "Combination",
    "id": 50276,
    "v2": "vm = VmInstances.getInstance( ).lookupByInstanceIp( privateIp ); LOG.trace( \"Candidate vm which claims this address: \" + vm.getInstanceId( ) + \" \" + vm.getRuntimeState( ) + \" \" + publicIp );",
    "resolution": "vm = VmInstances.lookupByInstanceIp( privateIp ); LOG.trace( \"Candidate vm which claims this address: \" + vm.getInstanceId( ) + \" \" + vm.getRuntimeState( ) + \" \" + publicIp );",
    "conflict": "vm = VmInstances.lookupByInstanceIp( privateIp ); LOG.trace( \"Candidate vm which claims this address: \" + vm.getInstanceId( ) + \" \" + vm.getState( ) + \" \" + publicIp );"
  },
  {
    "devdecision": "Version 1",
    "id": 50288,
    "v2": "this.stopWatch.start( ); this.updateWatch.start( );",
    "resolution": "this.privateNetwork = Boolean.FALSE;",
    "conflict": "this.privateNetwork = Boolean.FALSE;"
  },
  {
    "devdecision": "Version 1",
    "id": 50289,
    "v2": "this.networkConfig.setNetworkIndex( Integer.parseInt( networkIndex ) );",
    "resolution": "this.networkConfig.setPrivateDnsName( DEFAULT_IP ); this.networkConfig.setPublicDnsName( DEFAULT_IP ); this.networkConfig.setNetworkIndex( networkIndex.getIndex( ) );",
    "conflict": "this.networkConfig.setPrivateDnsName( DEFAULT_IP ); this.networkConfig.setPublicDnsName( DEFAULT_IP ); this.networkConfig.setNetworkIndex( networkIndex.getIndex( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 50298,
    "v2": "if ( !this.getRuntimeState( ).equals( oldState ) ) {",
    "resolution": "super.setState( this.runtimeState.getReference( ) ); if ( !this.getState( ).equals( oldState ) ) {",
    "conflict": "super.setState( this.runtimeState.getReference( ) ); if ( !this.getState( ).equals( oldState ) ) {"
  },
  {
    "devdecision": "Combination",
    "id": 50305,
    "v2": "VmInstance vm = VmInstances.getInstance( ).lookup( super.getRequest( ).getInstanceId( ) ); VmState vmState = vm.getRuntimeState( );",
    "resolution": "VmInstance vm = VmInstances.lookup( super.getRequest( ).getInstanceId( ) ); VmState vmState = vm.getRuntimeState( );",
    "conflict": "VmInstance vm = VmInstances.lookup( super.getRequest( ).getInstanceId( ) ); VmState vmState = vm.getState( );"
  },
  {
    "devdecision": "Manual",
    "id": 50311,
    "v2": "vm = VmInstances.getInstance( ).lookupDisabled( runVm.getInstanceId( ) ); if ( !VmState.BURIED.equals( vm.getRuntimeState( ) ) && vm.getSplitTime( ) > BURY_TIME ) {",
    "resolution": "vm = VmInstances.lookupDisabled( runVm.getInstanceId( ) ); if ( !VmState.BURIED.equals( vm.getRuntimeState( ) ) && vm.getSplitTime( ) > VmInstances.BURY_TIME ) {",
    "conflict": "vm = VmInstances.lookupDisabled( runVm.getInstanceId( ) ); if ( !VmState.BURIED.equals( vm.getState( ) ) && vm.getSplitTime( ) > VmInstances.BURY_TIME ) {"
  },
  {
    "devdecision": "Version 1",
    "id": 50314,
    "v2": "for ( VmInstance v : VmInstances.getInstance( ).listDisabledValues( ) ) { if ( VmState.BURIED.equals( v.getRuntimeState( ) ) ) continue;",
    "resolution": "for ( VmInstance v : VmInstances.listDisabledValues( ) ) { if ( VmState.BURIED.equals( v.getState( ) ) ) continue;",
    "conflict": "for ( VmInstance v : VmInstances.listDisabledValues( ) ) { if ( VmState.BURIED.equals( v.getState( ) ) ) continue;"
  },
  {
    "devdecision": "Combination",
    "id": 50317,
    "v2": "final VmInstance v = VmInstances.getInstance( ).lookup( request.getInstanceId( ) ); if ( !VmState.RUNNING.equals( v.getRuntimeState( ) ) ) {",
    "resolution": "final VmInstance v = VmInstances.lookup( request.getInstanceId( ) ); if ( !VmState.RUNNING.equals( v.getRuntimeState( ) ) ) {",
    "conflict": "final VmInstance v = VmInstances.lookup( request.getInstanceId( ) ); if ( !VmState.RUNNING.equals( v.getState( ) ) ) {"
  },
  {
    "devdecision": "Version 1",
    "id": 50318,
    "v2": "private String getFieldCanonicalName( ) { return this.getField( ).getDeclaringClass( ).getCanonicalName( ) + \".\" + this.getFieldName( ); }",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 50321,
    "v2": "if ( changeListenerClass.isEnum( ) ) { changeListener = changeListenerClass.getEnumConstants( )[0]; }",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 50323,
    "v2": "result.addField( clusterConf.getMinVlan( ) == null ? \"0\" : clusterConf.getMinVlan( ).toString( ) ); result.addField( clusterConf.getMaxVlan( ) == null ? \"0\" : clusterConf.getMaxVlan( ).toString( ) );",
    "resolution": "result.addField( clusterConf.getMinNetworkTag( ) == null ? \"0\" : clusterConf.getMinNetworkTag( ).toString( ) ); result.addField( clusterConf.getMaxNetworkTag( ) == null ? \"0\" : clusterConf.getMaxNetworkTag( ).toString( ) );",
    "conflict": "result.addField( clusterConf.getMinNetworkTag( ) == null ? null : clusterConf.getMinNetworkTag( ).toString( ) ); result.addField( clusterConf.getMaxNetworkTag( ) == null ? null : clusterConf.getMaxNetworkTag( ).toString( ) );"
  },
  {
    "devdecision": "Manual",
    "id": 50329,
    "v2": "ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsVolume, true, t.getSize( ), t.getOwnerUserId( ), t.getOwnerUserName(), t.getOwnerAccountId( ), null, t.getScName( ), t.getPartition( ) ) );",
    "resolution": "ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsVolume, true, t.getSize( ), t.getOwnerUserId( ), t.getOwnerUserName( ), t.getOwnerAccountNumber( ), t.getOwnerAccountName( ), t.getScName( ), t.getPartition( ) ) );",
    "conflict": "ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsVolume, true, t.getSize( ), t.getOwnerUserId( ), t.getOwnerAccountNumber( ), t.getScName( ), t.getPartition( ) ) );"
  },
  {
    "devdecision": "Combination",
    "id": 50332,
    "v2": "BundleTask oldTask = this.bundleTask.getReference( );",
    "resolution": "final BundleTask oldTask = this.bundleTask.getReference( ); this.bundleTask.set( null, false );",
    "conflict": "final BundleTask oldTask = this.bundleTask.getReference( ); this.bundleTask.set( null, false );"
  },
  {
    "devdecision": "Version 1",
    "id": 50336,
    "v2": "public static <T extends ServiceConfiguration> List<T> list( T type ) {",
    "resolution": "public static <T extends ServiceConfiguration> List<T> list( final T type ) {",
    "conflict": "public static <T extends ServiceConfiguration> List<T> list( final T type ) {"
  },
  {
    "devdecision": "Version 1",
    "id": 50372,
    "v2": "clientFactory.getReportView( ).loadReport( reportUrl );",
    "resolution": "clientFactory.getReportView( ).loadReport( reportUrl );",
    "conflict": "clientFactory.getReportView( ).loadReport( reportUrl );"
  },
  {
    "devdecision": "Version 2",
    "id": 50431,
    "v2": "",
    "resolution": "",
    "conflict": "import com.eucalyptus.auth.Accounts; import com.eucalyptus.auth.AuthException; import com.eucalyptus.auth.principal.UserFullName;"
  },
  {
    "devdecision": "Version 2",
    "id": 50432,
    "v2": "",
    "resolution": "",
    "conflict": "import com.eucalyptus.config.Configuration; import com.eucalyptus.config.StorageControllerConfiguration; import com.eucalyptus.entities.EntityWrapper;"
  },
  {
    "devdecision": "Version 2",
    "id": 50446,
    "v2": "static void setupConfigurations( ) { ServiceJarDiscovery.doSingleDiscovery( new ComponentDiscovery( ) );",
    "resolution": "static void setupConfigurations( ) { ServiceJarDiscovery.doSingleDiscovery( new ComponentDiscovery( ) );",
    "conflict": "public static void setupConfigurations( ) { ServiceJarDiscovery.runDiscovery( new ComponentDiscovery( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 50449,
    "v2": "import com.eucalyptus.reporting.event.Event; import com.eucalyptus.reporting.event.StorageEvent;",
    "resolution": "import com.eucalyptus.reporting.event.*; import com.eucalyptus.event.EventListener;",
    "conflict": "import com.eucalyptus.reporting.event.*; import com.eucalyptus.event.EventListener;"
  },
  {
    "devdecision": "Combination",
    "id": 50455,
    "v2": "",
    "resolution": "import com.eucalyptus.auth.Permissions; import com.eucalyptus.auth.policy.PolicySpec;",
    "conflict": "import com.eucalyptus.auth.Permissions; import com.eucalyptus.auth.crypto.Crypto; import com.eucalyptus.auth.policy.PolicySpec;"
  },
  {
    "devdecision": "Version 1",
    "id": 50456,
    "v2": "",
    "resolution": "import com.eucalyptus.auth.Permissions; import com.eucalyptus.auth.crypto.Crypto; import com.eucalyptus.auth.policy.PolicySpec;",
    "conflict": "import com.eucalyptus.auth.Permissions; import com.eucalyptus.auth.crypto.Crypto; import com.eucalyptus.auth.policy.PolicySpec;"
  },
  {
    "devdecision": "Concatenation",
    "id": 50458,
    "v2": "import com.eucalyptus.crypto.Digest;",
    "resolution": "import com.eucalyptus.crypto.Digest;import com.eucalyptus.context.Context; import com.eucalyptus.context.Contexts;",
    "conflict": "import com.eucalyptus.context.Context; import com.eucalyptus.context.Contexts;"
  },
  {
    "devdecision": "Version 1",
    "id": 50459,
    "v2": "",
    "resolution": "import com.eucalyptus.auth.Permissions; import com.eucalyptus.auth.crypto.Digest; import com.eucalyptus.auth.policy.PolicySpec; import com.eucalyptus.auth.principal.Account;",
    "conflict": "import com.eucalyptus.auth.Permissions; import com.eucalyptus.auth.crypto.Digest; import com.eucalyptus.auth.policy.PolicySpec; import com.eucalyptus.auth.principal.Account;"
  },
  {
    "devdecision": "Version 1",
    "id": 50461,
    "v2": "User user = Contexts.lookup().getUser( ); String userId = Contexts.lookup().getUserFullName().getUserId();",
    "resolution": "Context ctx = Contexts.lookup(); Account account = ctx.getAccount();",
    "conflict": "Context ctx = Contexts.lookup(); Account account = ctx.getAccount();"
  },
  {
    "devdecision": "Version 2",
    "id": 50465,
    "v2": "System.out.println(\"Storing:\" + sus); entityWrapper.add(sus);",
    "resolution": "System.out.println(\"Storing:\" + sus); entityWrapper.add(sus);",
    "conflict": "LOG.info(\"Save event:\" + sus); sess.save(sus);"
  },
  {
    "devdecision": "Version 1",
    "id": 50500,
    "v2": "import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.auth.Accounts;",
    "conflict": "import com.eucalyptus.auth.Accounts;"
  },
  {
    "devdecision": "Version 1",
    "id": 50513,
    "v2": "import com.eucalyptus.entities.Counters;",
    "resolution": "import com.eucalyptus.component.id.Eucalyptus; import com.eucalyptus.empyrean.Empyrean;",
    "conflict": "import com.eucalyptus.component.id.Eucalyptus; import com.eucalyptus.empyrean.Empyrean;"
  },
  {
    "devdecision": "Manual",
    "id": 50515,
    "v2": "",
    "resolution": "import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus; import com.eucalyptus.empyrean.Empyrean;",
    "conflict": "import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus; import com.eucalyptus.empyrean.Empyrean;"
  },
  {
    "devdecision": "Version 1",
    "id": 50521,
    "v2": "//    EventRecord.here( VmInstance.class, EventClass.VM, EventType.VM_STATE ) //               .withDetails( this.getOwnerId( ), this.getInstanceId( ), \"type\", this.getVmTypeInfo( ).getName( ) ) //               .withDetails( \"state\", this.state.getReference( ).name( ) ).withDetails( \"cluster\", this.placement ) //               /** ASAP: FIXME: GRZE .withDetails( \"image\", this.imageInfo.getImageId( ) ) **/",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 50524,
    "v2": "import com.eucalyptus.images.Image; import com.eucalyptus.images.ImageInfo; import com.eucalyptus.images.ProductCode; import com.eucalyptus.ldap.LdapConfiguration;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 50527,
    "v2": "final int amount = vmInfo.getRequest( ).getMinCount( );",
    "resolution": "Integer minAmount = vmInfo.getRequest( ).getMinCount( ); Integer maxAmount = vmInfo.getRequest( ).getMaxCount( );",
    "conflict": "Integer minAmount = vmInfo.getRequest( ).getMinCount( ); Integer maxAmount = vmInfo.getRequest( ).getMaxCount( );"
  },
  {
    "devdecision": "Version 1",
    "id": 50539,
    "v2": "import com.eucalyptus.bootstrap.Component;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Storage;",
    "conflict": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Storage;"
  },
  {
    "devdecision": "Version 1",
    "id": 50541,
    "v2": "catch ( InterruptedException e ) {}",
    "resolution": "catch ( InterruptedException e ) { Thread.currentThread( ).interrupt( ); }",
    "conflict": "catch ( InterruptedException e ) { Thread.currentThread( ).interrupt( ); }"
  },
  {
    "devdecision": "Version 1",
    "id": 50552,
    "v2": "EventRecord.flush( ); ServiceContext.shutdown( );",
    "resolution": "ServiceContextManager.shutdown( );",
    "conflict": "ServiceContextManager.shutdown( );"
  },
  {
    "devdecision": "Version 1",
    "id": 50553,
    "v2": "import com.eucalyptus.component.id.Empyrean;",
    "resolution": "import com.eucalyptus.bootstrap.SystemBootstrapper; import com.eucalyptus.empyrean.Empyrean;",
    "conflict": "import com.eucalyptus.bootstrap.SystemBootstrapper; import com.eucalyptus.empyrean.Empyrean;"
  },
  {
    "devdecision": "Version 1",
    "id": 50554,
    "v2": "return String.format( \"Component %s name=%s enabled=%s local=%s state=%s builder=%s\\n\", this.component, this.name, this.enabled, this.local, this.getState( ), this.getBuilder( ) );",
    "resolution": "return String.format( \"Component %s name=%s enabled=%s local=%s goal=%s state=%s builder=%s\\n\", this.identity.name( ), this.name, this.enabled, this.local, this.stateMachine.getGoal( ), this.getState( ), this.getBuilder( ) );",
    "conflict": "return String.format( \"Component %s name=%s enabled=%s local=%s goal=%s state=%s builder=%s\\n\", this.identity.name( ), this.name, this.enabled, this.local, this.stateMachine.getGoal( ), this.getState( ), this.getBuilder( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 50559,
    "v2": "if( this.certificate != null ) { return String.format( \"Credentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );",
    "resolution": "if( this.getCertificate( ) != null ) { return String.format( \"ServiceCredentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );",
    "conflict": "if( this.getCertificate( ) != null ) { return String.format( \"ServiceCredentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 50564,
    "v2": "} catch ( final InterruptedException e ) {}",
    "resolution": "} catch ( final InterruptedException e ) { Thread.currentThread( ).interrupt( ); }",
    "conflict": "} catch ( final InterruptedException e ) { Thread.currentThread( ).interrupt( ); }"
  },
  {
    "devdecision": "Version 1",
    "id": 50594,
    "v2": "} catch ( InterruptedException e ) {}",
    "resolution": "} catch ( InterruptedException e ) { Thread.currentThread( ).interrupt( ); }",
    "conflict": "} catch ( InterruptedException e ) { Thread.currentThread( ).interrupt( ); }"
  },
  {
    "devdecision": "Version 1",
    "id": 50595,
    "v2": "import com.eucalyptus.bootstrap.Component;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;",
    "conflict": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;"
  },
  {
    "devdecision": "Concatenation",
    "id": 50606,
    "v2": "",
    "resolution": "import com.eucalyptus.auth.crypto.Hmacs; import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.crypto.Hmacs; import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Version 1",
    "id": 50607,
    "v2": "import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus; import com.eucalyptus.empyrean.Empyrean;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 50612,
    "v2": "",
    "resolution": "//    EventRecord.here( VmInstance.class, EventClass.VM, EventType.VM_STATE ) //               .withDetails( this.getOwnerId( ), this.getInstanceId( ), \"type\", this.getVmTypeInfo( ).getName( ) ) //               .withDetails( \"state\", this.state.getReference( ).name( ) ).withDetails( \"cluster\", this.placement ) //               /** ASAP: FIXME: GRZE .withDetails( \"image\", this.imageInfo.getImageId( ) ) **/",
    "conflict": "//    EventRecord.here( VmInstance.class, EventClass.VM, EventType.VM_STATE ) //               .withDetails( this.getOwnerId( ), this.getInstanceId( ), \"type\", this.getVmTypeInfo( ).getName( ) ) //               .withDetails( \"state\", this.state.getReference( ).name( ) ).withDetails( \"cluster\", this.placement ) //               /** ASAP: FIXME: GRZE .withDetails( \"image\", this.imageInfo.getImageId( ) ) **/"
  },
  {
    "devdecision": "Version 1",
    "id": 50614,
    "v2": "",
    "resolution": "import com.eucalyptus.images.Image; import com.eucalyptus.images.ImageInfo; import com.eucalyptus.images.ProductCode; import com.eucalyptus.ldap.LdapConfiguration;",
    "conflict": "import com.eucalyptus.images.Image; import com.eucalyptus.images.ImageInfo; import com.eucalyptus.images.ProductCode; import com.eucalyptus.ldap.LdapConfiguration;"
  },
  {
    "devdecision": "Version 1",
    "id": 50617,
    "v2": "",
    "resolution": "import com.google.common.base.Function; import com.google.common.base.Predicate; import com.google.common.collect.Iterables; import com.google.common.collect.Lists;",
    "conflict": "import com.google.common.base.Function; import com.google.common.base.Predicate; import com.google.common.collect.Iterables; import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Version 1",
    "id": 50629,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Storage;",
    "resolution": "import com.eucalyptus.bootstrap.Component;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Version 1",
    "id": 50634,
    "v2": "",
    "resolution": "static { System.setProperty( \"euca.log.level\", \"TRACE\" ); }",
    "conflict": "static { System.setProperty( \"euca.log.level\", \"TRACE\" ); }"
  },
  {
    "devdecision": "Version 1",
    "id": 50635,
    "v2": "if( this.getCertificate( ) != null ) { return String.format( \"ServiceCredentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );",
    "resolution": "if( this.certificate != null ) { return String.format( \"Credentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );",
    "conflict": "if( this.certificate != null ) { return String.format( \"Credentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 50654,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Storage;",
    "resolution": "import com.eucalyptus.bootstrap.Component;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Version 1",
    "id": 50655,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;",
    "resolution": "import com.eucalyptus.bootstrap.Component;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Version 1",
    "id": 50661,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;",
    "resolution": "import com.eucalyptus.bootstrap.Component;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Version 2",
    "id": 50698,
    "v2": "import edu.ucsb.eucalyptus.msgs.RunInstancesType;",
    "resolution": "import edu.ucsb.eucalyptus.msgs.RunInstancesType;",
    "conflict": "import edu.ucsb.eucalyptus.msgs.ImportKeyPairResponseType; import edu.ucsb.eucalyptus.msgs.ImportKeyPairType;"
  },
  {
    "devdecision": "Version 1",
    "id": 50702,
    "v2": "import com.eucalyptus.auth.entities.ClusterCredentials; import com.eucalyptus.bootstrap.Component;",
    "resolution": "import com.eucalyptus.auth.ClusterCredentials;",
    "conflict": "import com.eucalyptus.auth.ClusterCredentials;"
  },
  {
    "devdecision": "Version 2",
    "id": 50703,
    "v2": "import com.eucalyptus.auth.policy.PolicyResourceType; import com.eucalyptus.auth.policy.PolicySpec; import com.eucalyptus.auth.principal.Group; import com.eucalyptus.bootstrap.Component;",
    "resolution": "import com.eucalyptus.auth.policy.PolicyResourceType; import com.eucalyptus.auth.policy.PolicySpec; import com.eucalyptus.auth.principal.Group; import com.eucalyptus.bootstrap.Component;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 50706,
    "v2": "import com.eucalyptus.images.Image; import com.eucalyptus.images.ImageInfo; import com.eucalyptus.images.ProductCode;",
    "resolution": "import com.eucalyptus.images.Image; import com.eucalyptus.images.ImageInfo; import com.eucalyptus.images.ProductCode;",
    "conflict": ""
  },
  {
    "devdecision": "None",
    "id": 50714,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "resolution": "import com.eucalyptus.auth.crypto.Hmacs;",
    "conflict": "import com.eucalyptus.auth.Groups; import com.eucalyptus.auth.UserInfoStore; import com.eucalyptus.auth.Users;"
  },
  {
    "devdecision": "Version 1",
    "id": 50719,
    "v2": "",
    "resolution": "@Override public X509Certificate getX509Certificate( ) { return SystemCredentialProvider.getCredentialProvider( this.getClass( ) ).getCertificate( ); }",
    "conflict": "@Override public X509Certificate getX509Certificate( ) { return SystemCredentialProvider.getCredentialProvider( this.getClass( ) ).getCertificate( ); }"
  },
  {
    "devdecision": "Version 1",
    "id": 50722,
    "v2": "import com.eucalyptus.bootstrap.Component; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;",
    "conflict": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;"
  },
  {
    "devdecision": "Version 2",
    "id": 50725,
    "v2": "msg.setUserId( user.getId( ) ); msg.setEffectiveUserId( user.isSystemAdmin( ) ? \"eucalyptus\" : user.getId( ) );",
    "resolution": "msg.setUserId( user.getId( ) ); msg.setEffectiveUserId( user.isSystemAdmin( ) ? \"eucalyptus\" : user.getId( ) );",
    "conflict": "msg.setUserId( user.getName( ) ); msg.setEffectiveUserId( user.isAdministrator( ) ? ComponentIds.lookup(Eucalyptus.class).name( ) : user.getName( ) );"
  },
  {
    "devdecision": "Combination",
    "id": 50743,
    "v2": "",
    "resolution": "import com.eucalyptus.auth.crypto.Hmacs;",
    "conflict": "import com.eucalyptus.auth.crypto.Hmacs; import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Version 2",
    "id": 50744,
    "v2": "import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus; import com.eucalyptus.empyrean.Empyrean;",
    "resolution": "import com.eucalyptus.component.auth.EucaKeyStore; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus; import com.eucalyptus.empyrean.Empyrean;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 50748,
    "v2": "",
    "resolution": "import com.google.common.base.Function; import com.google.common.base.Predicate; import com.google.common.collect.Iterables; import com.google.common.collect.Lists;",
    "conflict": "import com.google.common.base.Function; import com.google.common.base.Predicate; import com.google.common.collect.Iterables; import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Version 2",
    "id": 50756,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Storage;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Storage;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Manual",
    "id": 50759,
    "v2": "/** * @note is a sub-service of {@link Eucalyptus}",
    "resolution": "/** * @note is a sub-service of {@link Eucalyptus}",
    "conflict": "/** * @note is a sub-service of {@link Component.eucalyptus}"
  },
  {
    "devdecision": "Version 2",
    "id": 50761,
    "v2": "",
    "resolution": "",
    "conflict": "static { System.setProperty( \"euca.log.level\", \"TRACE\" ); }"
  },
  {
    "devdecision": "Version 2",
    "id": 50762,
    "v2": "if( this.getCertificate( ) != null ) { return String.format( \"ServiceCredentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );",
    "resolution": "if( this.getCertificate( ) != null ) { return String.format( \"ServiceCredentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );",
    "conflict": "if( this.certificate != null ) { return String.format( \"Credentials name=%s cert-sn=%s cert-dn=%s\", this.getName( ), this.getCertificate( ).getSerialNumber( ), this.getCertificate( ).getSubjectDN( ) );"
  },
  {
    "devdecision": "Combination",
    "id": 50786,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Storage;",
    "resolution": "import com.eucalyptus.component.id.Storage;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Combination",
    "id": 50787,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;",
    "resolution": "import com.eucalyptus.component.id.Eucalyptus;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Version 2",
    "id": 50791,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.component.id.Eucalyptus;",
    "conflict": "import com.eucalyptus.bootstrap.Component;"
  },
  {
    "devdecision": "Combination",
    "id": 50794,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.auth.principal.Certificate; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.principal.User;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider; import com.eucalyptus.auth.principal.Certificate;"
  },
  {
    "devdecision": "Combination",
    "id": 50796,
    "v2": "import com.eucalyptus.auth.Groups; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50799,
    "v2": "import com.eucalyptus.auth.Groups; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Manual",
    "id": 50800,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.auth.principal.Certificate; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider; import com.eucalyptus.auth.principal.Certificate;"
  },
  {
    "devdecision": "Manual",
    "id": 50801,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "resolution": "import edu.ucsb.eucalyptus.cloud.NotAuthorizedException;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Manual",
    "id": 50802,
    "v2": "msg.setUserId( user.getUserId( ) ); msg.setEffectiveUserId( user.isSystemAdmin( ) ? \"eucalyptus\" : user.getUserId( ) );",
    "resolution": "msg.setUserId( user.getId( ) ); msg.setEffectiveUserId( user.isSystemAdmin( ) ? \"eucalyptus\" : user.getId( ) );",
    "conflict": "msg.setUserId( user.getId( ) ); msg.setEffectiveUserId( user.isSystemAdmin( ) ? Component.eucalyptus.name( ) : user.getId( ) );"
  },
  {
    "devdecision": "Combination",
    "id": 50803,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50804,
    "v2": "import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.auth.Accounts;",
    "conflict": "import com.eucalyptus.auth.Accounts; import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50805,
    "v2": "import com.eucalyptus.auth.Groups; import com.eucalyptus.auth.Users; import com.eucalyptus.auth.crypto.Crypto;",
    "resolution": "import com.eucalyptus.auth.crypto.Crypto; import com.eucalyptus.auth.principal.User;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 50806,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "resolution": "import com.eucalyptus.auth.Accounts; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.Accounts; import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50809,
    "v2": "import com.eucalyptus.auth.NoSuchUserException; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "resolution": "import com.eucalyptus.auth.AuthException; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.AuthException; import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50813,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.UserInfoStore;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.Users;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50815,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import com.eucalyptus.auth.AuthException;",
    "conflict": "import java.util.List; import com.eucalyptus.auth.AuthException; import com.eucalyptus.auth.principal.domain.UserDomain;"
  },
  {
    "devdecision": "Combination",
    "id": 50819,
    "v2": "import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.X509Cert;",
    "resolution": "import com.eucalyptus.auth.entities.ClusterCredentials;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider; import com.eucalyptus.auth.entities.ClusterCredentials;"
  },
  {
    "devdecision": "Combination",
    "id": 50820,
    "v2": "import com.eucalyptus.auth.NoSuchUserException; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50821,
    "v2": "import com.eucalyptus.auth.NoSuchUserException; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50822,
    "v2": "import com.eucalyptus.auth.NoSuchUserException; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 50824,
    "v2": "import com.eucalyptus.auth.NoSuchUserException; import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "resolution": "import com.eucalyptus.component.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "None",
    "id": 50825,
    "v2": "import com.eucalyptus.auth.DatabaseWrappedUser; import com.eucalyptus.component.auth.SystemCredentialProvider; import com.eucalyptus.auth.UserEntity;",
    "resolution": "import com.eucalyptus.auth.Users;",
    "conflict": "import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Version 1",
    "id": 50831,
    "v2": "private final ConcurrentMap<String, AttachedVolume> volumes       = new ConcurrentSkipListMap<String, AttachedVolume>( );",
    "resolution": "private final AtomicMarkableReference<BundleTask>   bundleTask    = new AtomicMarkableReference<BundleTask>( null, false ); private final ConcurrentMap<String,AttachedVolume>  volumes       = new ConcurrentSkipListMap<String,AttachedVolume>( );",
    "conflict": "private final AtomicMarkableReference<BundleTask>   bundleTask    = new AtomicMarkableReference<BundleTask>( null, false ); private final ConcurrentMap<String,AttachedVolume>  volumes       = new ConcurrentSkipListMap<String,AttachedVolume>( );"
  },
  {
    "devdecision": "Version 2",
    "id": 50837,
    "v2": "private void fireStopComponent( RemoteConfiguration remoteConfiguration ) throws EventFailedException {",
    "resolution": "private void fireStopComponent( RemoteConfiguration remoteConfiguration ) throws EventFailedException {",
    "conflict": "private void fireStopComponent( RemoteConfiguration remoteConfiguration ) throws EventVetoedException {"
  },
  {
    "devdecision": "Combination",
    "id": 50878,
    "v2": "StorageControllerConfiguration scConfig = Configuration.getStorageControllerConfiguration( clusterName ); Dispatcher sc = ServiceDispatcher.lookup( Components.lookup(\"storage\"), scConfig.getHostName( ) );",
    "resolution": "StorageControllerConfiguration scConfig = Configuration.lookupSc( clusterName ); Dispatcher sc = ServiceDispatcher.lookup( Components.lookup(\"storage\"), scConfig.getHostName( ) );",
    "conflict": "StorageControllerConfiguration scConfig = Configuration.lookupSc( clusterName ); Dispatcher sc = ServiceDispatcher.lookup( Component.storage, scConfig.getHostName( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 50887,
    "v2": "/** * @note is a sub-service of {@link ComponentService.eucalyptus}",
    "resolution": "/** * @note is a sub-service of {@link Component.eucalyptus}",
    "conflict": "/** * @note is a sub-service of {@link Component.eucalyptus}"
  },
  {
    "devdecision": "Version 1",
    "id": 50897,
    "v2": "@Cache( usage = CacheConcurrencyStrategy.READ_WRITE ) //@ConfigurableClass(root=\"eucalyptus\",alias=\"vmtypes\",deferred=true,singleton=false,description=\"Virtual Machine type definitions\")",
    "resolution": "@Cache( usage = CacheConcurrencyStrategy.TRANSACTIONAL )",
    "conflict": "@Cache( usage = CacheConcurrencyStrategy.TRANSACTIONAL )"
  },
  {
    "devdecision": "Version 1",
    "id": 50938,
    "v2": "private final ConcurrentMap<String,AttachedVolume>  volumes       = new ConcurrentSkipListMap<String,AttachedVolume>( );",
    "resolution": "private final AtomicMarkableReference<BundleTask>   bundleTask    = new AtomicMarkableReference<BundleTask>( null, false ); private final ConcurrentSkipListSet<AttachedVolume> volumes       = new ConcurrentSkipListSet<AttachedVolume>( );",
    "conflict": "private final AtomicMarkableReference<BundleTask>   bundleTask    = new AtomicMarkableReference<BundleTask>( null, false ); private final ConcurrentSkipListSet<AttachedVolume> volumes       = new ConcurrentSkipListSet<AttachedVolume>( );"
  },
  {
    "devdecision": "Version 1",
    "id": 50940,
    "v2": "import com.eucalyptus.ws.client.ServiceDispatcher;",
    "resolution": "import com.eucalyptus.vm.SystemState.Reason; import com.eucalyptus.ws.client.ServiceDispatcher; import com.eucalyptus.records.EventRecord;",
    "conflict": "import com.eucalyptus.vm.SystemState.Reason; import com.eucalyptus.ws.client.ServiceDispatcher; import com.eucalyptus.records.EventRecord;"
  },
  {
    "devdecision": "Version 2",
    "id": 50980,
    "v2": "this.volumes.retainAll( volumes ); this.volumes.addAll( newVolumes );",
    "resolution": "this.volumes.retainAll( volumes ); this.volumes.addAll( newVolumes );",
    "conflict": "this.volumes.addAll( volumes ); this.volumes.retainAll( newVolumes );"
  },
  {
    "devdecision": "Version 2",
    "id": 50981,
    "v2": "this.volumes.retainAll( newVolumes );",
    "resolution": "this.volumes.retainAll( newVolumes );",
    "conflict": "this.volumes.retainAll( volumes ); this.volumes.addAll( volumes );"
  },
  {
    "devdecision": "Version 2",
    "id": 50992,
    "v2": "ComponentConfiguration( Component parent ) {",
    "resolution": "ComponentConfiguration( Component parent ) {",
    "conflict": "Configuration( Component parent ) {"
  },
  {
    "devdecision": "Version 1",
    "id": 50994,
    "v2": "Button cancel_button = new Button( \"Cancel\", DefaultPageButtonListener );",
    "resolution": "EucaButton cancel_button = new EucaButton( \"Cancel\", DefaultPageEucaButtonListener );",
    "conflict": "EucaButton cancel_button = new EucaButton( \"Cancel\", DefaultPageEucaButtonListener );"
  },
  {
    "devdecision": "Version 1",
    "id": 51011,
    "v2": "import edu.ucsb.eucalyptus.msgs.DescribeBundleTasksResponseType; import edu.ucsb.eucalyptus.msgs.DescribeBundleTasksType; import edu.ucsb.eucalyptus.msgs.GetConsoleOutputResponseType;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 51021,
    "v2": "String partition = request.getPartition( ); String hostName = request.getHost();",
    "resolution": "String partition = request.getPartition( ); String hostName = request.getHost();",
    "conflict": "String hostName = request.getHost( );"
  },
  {
    "devdecision": "Version 2",
    "id": 51068,
    "v2": ".withDetails( \"state\", this.state.getReference( ).name( ) ).withDetails( \"cluster\", this.placement ) /** ASAP: FIXME: GRZE .withDetails( \"image\", this.imageInfo.getImageId( ) )**/.withDetails( \"started\", this.launchTime.getTime( ) + \"\" ).info( );",
    "resolution": ".withDetails( \"state\", this.state.getReference( ).name( ) ).withDetails( \"cluster\", this.placement ) /** ASAP: FIXME: GRZE .withDetails( \"image\", this.imageInfo.getImageId( ) )**/.withDetails( \"started\", this.launchTime.getTime( ) + \"\" ).info( );",
    "conflict": ".withDetails( \"state\", this.state.getReference( ).name( ) ).withDetails( \"cluster\", this.placement ).withDetails( \"platform\", this.platform ) .withDetails( \"image\", this.imageInfo.getImageId( ) ).withDetails( \"started\", this.launchTime.getTime( ) + \"\" ).info( );"
  },
  {
    "devdecision": "Version 2",
    "id": 51069,
    "v2": "\"VmInstance [instanceId=%s, keyInfo=%s, launchIndex=%s, launchTime=%s, networkConfig=%s, networks=%s, ownerId=%s, placement=%s, privateNetwork=%s, reason=%s, reservationId=%s, state=%s, stopWatch=%s, userData=%s, vmTypeInfo=%s, volumes=%s]\", this.instanceId, this.keyInfo, this.launchIndex, this.launchTime, this.networkConfig, this.networks, this.ownerId,",
    "resolution": "\"VmInstance [instanceId=%s, keyInfo=%s, launchIndex=%s, launchTime=%s, networkConfig=%s, networks=%s, ownerId=%s, placement=%s, privateNetwork=%s, reason=%s, reservationId=%s, state=%s, stopWatch=%s, userData=%s, vmTypeInfo=%s, volumes=%s]\", this.instanceId, this.keyInfo, this.launchIndex, this.launchTime, this.networkConfig, this.networks, this.ownerId,",
    "conflict": "\"VmInstance [imageInfo=%s, instanceId=%s, keyInfo=%s, launchIndex=%s, launchTime=%s, networkConfig=%s, networks=%s, ownerId=%s, placement=%s, privateNetwork=%s, reason=%s, reservationId=%s, state=%s, stopWatch=%s, userData=%s, vmTypeInfo=%s, volumes=%s, bundleTask=%s]\", this.imageInfo, this.instanceId, this.keyInfo, this.launchIndex, this.launchTime, this.networkConfig, this.networks, this.ownerId,"
  },
  {
    "devdecision": "Version 2",
    "id": 51082,
    "v2": "for( ComponentConfiguration conf : ServiceBuilderRegistry.get( request.getClass( ) ).list( ) ) { listConfigs.add( new ComponentInfoType( conf.getPartition( ), conf.getName( ), /** LIES LIES LIES **/ \"everything is FINE!\", conf.getHostName( ) ) );",
    "resolution": "for( ComponentConfiguration conf : ServiceBuilderRegistry.get( request.getClass( ) ).list( ) ) { listConfigs.add( new ComponentInfoType( conf.getPartition( ), conf.getName( ), /** LIES LIES LIES **/ \"everything is FINE!\", conf.getHostName( ) ) );",
    "conflict": "for ( ComponentConfiguration conf : builders.get( request.getClass( ) ).list( ) ) { listConfigs.add( new ComponentInfoType( conf.getName( ), conf.getHostName( ) ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 51139,
    "v2": "if ( args.contains( \"verbose\" ) ) { reply.getAvailabilityZoneInfo( ).addAll( this.addSystemInfo( c ) ); } else if ( args.contains( \"certs\" ) ) {",
    "resolution": "if ( args.contains( \"certs\" ) ) {",
    "conflict": "if ( args.contains( \"certs\" ) ) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 51146,
    "v2": "import com.eucalyptus.vm.VmState;",
    "resolution": "import com.eucalyptus.ws.client.ServiceDispatcher; import com.eucalyptus.records.EventRecord;import com.eucalyptus.vm.VmState;",
    "conflict": "import com.eucalyptus.ws.client.ServiceDispatcher; import com.eucalyptus.records.EventRecord;"
  },
  {
    "devdecision": "Version 1",
    "id": 51159,
    "v2": "//import edu.ucsb.eucalyptus.msgs.AttachStorageVolumeResponseType; //import edu.ucsb.eucalyptus.msgs.AttachStorageVolumeType;",
    "resolution": "import edu.ucsb.eucalyptus.msgs.AttachStorageVolumeResponseType; import edu.ucsb.eucalyptus.msgs.AttachStorageVolumeType;",
    "conflict": "import edu.ucsb.eucalyptus.msgs.AttachStorageVolumeResponseType; import edu.ucsb.eucalyptus.msgs.AttachStorageVolumeType;"
  },
  {
    "devdecision": "Version 1",
    "id": 51170,
    "v2": "protected static final String NEXT   = \"\\n\";",
    "resolution": "protected static final String NEXT   = \"\\n\";",
    "conflict": "protected static final String NEXT   = \"\\n\";"
  },
  {
    "devdecision": "Version 1",
    "id": 51199,
    "v2": "if ( addrInfo.getAddress( ).equals( v.getPublicAddress( ) ) && ( VmState.PENDING.equals( v.getState( ) ) || VmState.RUNNING.equals( v.getState( ) ) ) ) { vmList += \" \" + v.getInstanceId( ) + \"(\" + v.getState( ) + \")\";",
    "resolution": "if ( addrInfo.getAddress( ).equals( v.getPublicAddress( ) ) ) { vmList += \" \" + v.getInstanceId( );",
    "conflict": "if ( addrInfo.getAddress( ).equals( v.getPublicAddress( ) ) ) { vmList += \" \" + v.getInstanceId( );"
  },
  {
    "devdecision": "Version 1",
    "id": 51200,
    "v2": "@Cache( usage = CacheConcurrencyStrategy.READ_WRITE ) public class Address implements HasName<Address> {",
    "resolution": "@Cache( usage = CacheConcurrencyStrategy.TRANSACTIONAL ) public class Address implements HasName {",
    "conflict": "@Cache( usage = CacheConcurrencyStrategy.TRANSACTIONAL ) public class Address implements HasName {"
  },
  {
    "devdecision": "Version 1",
    "id": 51203,
    "v2": "EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_ALLOCATE, \"user=\" + Address.this.userId, \"address=\" + Address.this.name, Address.this.isSystemOwned( ) ? \"SYSTEM\" : \"USER\" ).info( );",
    "resolution": "EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_ALLOCATE ).withDetails( Address.this.userId, Address.this.name, \"type\", Address.this.isSystemOwned( ) ? \"SYSTEM\" : \"USER\" );",
    "conflict": "EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_ALLOCATE ).withDetails( Address.this.userId, Address.this.name, \"type\", Address.this.isSystemOwned( ) ? \"SYSTEM\" : \"USER\" );"
  },
  {
    "devdecision": "Version 1",
    "id": 51204,
    "v2": "EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_RELEASE, \"user=\" + Address.this.userId, \"address=\" + Address.this.name, Address.this.isSystemOwned( ) ? \"SYSTEM\" : \"USER\" ).info( );",
    "resolution": "EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_RELEASE ).withDetails( Address.this.userId, Address.this.name, \"type\", Address.this.isSystemOwned( ) ? \"SYSTEM\" : \"USER\" );",
    "conflict": "EventRecord.here( Address.class, EventClass.ADDRESS, EventType.ADDRESS_RELEASE ).withDetails( Address.this.userId, Address.this.name, \"type\", Address.this.isSystemOwned( ) ? \"SYSTEM\" : \"USER\" );"
  },
  {
    "devdecision": "Version 1",
    "id": 51208,
    "v2": "EventRecord.caller( this.getClass( ), EventType.ADDRESS_STATE, this.state.getReference( ), \"BOTTOM\", this.transition.getName( ).name( ), this.toString( ) )",
    "resolution": "EventRecord .caller( this.getClass( ), EventType.ADDRESS_STATE, this.state.getReference( ), \"BOTTOM\", this.transition.getName( ).name( ), this.toString( ) )",
    "conflict": "EventRecord .caller( this.getClass( ), EventType.ADDRESS_STATE, this.state.getReference( ), \"BOTTOM\", this.transition.getName( ).name( ), this.toString( ) )"
  },
  {
    "devdecision": "Version 1",
    "id": 51219,
    "v2": "private final ClusterCredentials                       credentials;",
    "resolution": "private ClusterCredentials                       credentials; private NodeLogInfo lastLog = new NodeLogInfo( );",
    "conflict": "private ClusterCredentials                       credentials; private NodeLogInfo lastLog = new NodeLogInfo( );"
  },
  {
    "devdecision": "Version 1",
    "id": 51220,
    "v2": "private final int                        offerInterval = 500; private final int                        pollInterval  = 500;",
    "resolution": "private final int                        offerInterval = 5000; private final int                        pollInterval  = 30000;",
    "conflict": "private final int                        offerInterval = 5000; private final int                        pollInterval  = 30000;"
  },
  {
    "devdecision": "Version 2",
    "id": 51228,
    "v2": "",
    "resolution": "",
    "conflict": "throw new IllegalStateException( \"Ignoring assignment to a vm which is not running: \" + this.getRequest( ) ); } else { EventRecord.here( AssignAddressCallback.class, EventType.ADDRESS_ASSIGNING, Transition.assigning.toString( ), address.toString( ) ).debug( );"
  },
  {
    "devdecision": "Version 1",
    "id": 51229,
    "v2": "import com.eucalyptus.context.ServiceContext; import com.eucalyptus.util.LogUtil;",
    "resolution": "import com.eucalyptus.util.LogUtil; import com.eucalyptus.ws.util.Messaging;",
    "conflict": "import com.eucalyptus.util.LogUtil; import com.eucalyptus.ws.util.Messaging;"
  },
  {
    "devdecision": "Version 1",
    "id": 51238,
    "v2": "import com.eucalyptus.cluster.Clusters; import com.eucalyptus.cluster.VmTypes;",
    "resolution": "import com.eucalyptus.cluster.VmTypes; import com.eucalyptus.cluster.util.ClusterUtil;",
    "conflict": "import com.eucalyptus.cluster.VmTypes; import com.eucalyptus.cluster.util.ClusterUtil;"
  },
  {
    "devdecision": "Version 1",
    "id": 51254,
    "v2": "public static final String EUCA_ROOT_WRAPPER = \"/usr/lib/eucalyptus/euca_rootwrap\";  public static final String blockSize = \"1M\";",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 51261,
    "v2": "StorageProperties.MAX_VOLUME_SIZE);",
    "resolution": "StorageProperties.MAX_VOLUME_SIZE, true);",
    "conflict": "StorageProperties.MAX_VOLUME_SIZE, true);"
  },
  {
    "devdecision": "Version 1",
    "id": 51262,
    "v2": "StorageProperties.MAX_VOLUME_SIZE);",
    "resolution": "StorageProperties.MAX_VOLUME_SIZE, true);",
    "conflict": "StorageProperties.MAX_VOLUME_SIZE, true);"
  },
  {
    "devdecision": "Version 1",
    "id": 51265,
    "v2": "EventRecord.here( SnapshotManager.class, EventClass.SNAPSHOT, EventType.SNAPSHOT_CREATE, \"user=\" + snap.getUserName( ), \"snapshot=\" + snap.getDisplayName( ), \"volume=\" + snap.getParentVolume( ) ).info( );",
    "resolution": "EventRecord.here( SnapshotManager.class, EventClass.SNAPSHOT, EventType.SNAPSHOT_CREATE ).withDetails(snap.getUserName( ), snap.getDisplayName( ), \"volume\", vol.getDisplayName( ) ) .withDetails( \"volumeSize\", vol.getSize( ).toString( ) );",
    "conflict": "EventRecord.here( SnapshotManager.class, EventClass.SNAPSHOT, EventType.SNAPSHOT_CREATE ).withDetails(snap.getUserName( ), snap.getDisplayName( ), \"volume\", vol.getDisplayName( ) ) .withDetails( \"volumeSize\", vol.getSize( ).toString( ) );"
  },
  {
    "devdecision": "Version 1",
    "id": 51270,
    "v2": "",
    "resolution": "} else { db.commit( ); }",
    "conflict": "} else { db.commit( ); }"
  },
  {
    "devdecision": "Version 1",
    "id": 51271,
    "v2": "",
    "resolution": "if ( imagePathParts[1].startsWith( ImageManager.IMAGE_PLATFORM_WINDOWS ) && System.getProperty( \"euca.disable.windows\" ) == null ) { imageInfo.setPlatform( ImageManager.IMAGE_PLATFORM_WINDOWS ); } else { imageInfo.setPlatform( ImageManager.IMAGE_PLATFORM_DEFAULT );",
    "conflict": "if ( imagePathParts[1].startsWith( ImageManager.IMAGE_PLATFORM_WINDOWS ) && System.getProperty( \"euca.disable.windows\" ) == null ) { imageInfo.setPlatform( ImageManager.IMAGE_PLATFORM_WINDOWS ); } else { imageInfo.setPlatform( ImageManager.IMAGE_PLATFORM_DEFAULT );"
  },
  {
    "devdecision": "Version 1",
    "id": 51281,
    "v2": "if ( addProp != null ) { PropertyDirectory.addProperty(addProp); }",
    "resolution": "PropertyDirectory.addProperty(addProp);",
    "conflict": "PropertyDirectory.addProperty(addProp);"
  },
  {
    "devdecision": "Version 1",
    "id": 51291,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 51297,
    "v2": "CHANNEL_WRITE, CHANNEL_OPEN, CHANNEL_CLOSED, CHANNEL_OPENING,",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 51329,
    "v2": "",
    "resolution": "public String attachVolume(String volumeId, String nodeIqn) throws EucalyptusCloudException;  public void detachVolume(String volumeId, String nodeIqn) throws EucalyptusCloudException;",
    "conflict": "public String attachVolume(String volumeId, String nodeIqn) throws EucalyptusCloudException;  public void detachVolume(String volumeId, String nodeIqn) throws EucalyptusCloudException;"
  },
  {
    "devdecision": "Version 2",
    "id": 51331,
    "v2": "}  private String scanVolumeGroups() throws ExecutionException { return SystemUtil.run(new String[]{eucaHome + StorageProperties.EUCA_ROOT_WRAPPER, \"vgscan\"});",
    "resolution": "}  private String scanVolumeGroups() throws ExecutionException { return SystemUtil.run(new String[]{eucaHome + StorageProperties.EUCA_ROOT_WRAPPER, \"vgscan\"});",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 51342,
    "v2": "import com.eucalyptus.component.ServiceRegistrationException; import com.eucalyptus.records.EventRecord;",
    "resolution": "import com.eucalyptus.records.EventClass;",
    "conflict": "import com.eucalyptus.records.EventClass;"
  },
  {
    "devdecision": "Version 1",
    "id": 51344,
    "v2": "",
    "resolution": "private static List<com.eucalyptus.bootstrap.Component> ignored = Lists.newArrayList( com.eucalyptus.bootstrap.Component.any, com.eucalyptus.bootstrap.Component.component );",
    "conflict": "private static List<com.eucalyptus.bootstrap.Component> ignored = Lists.newArrayList( com.eucalyptus.bootstrap.Component.any, com.eucalyptus.bootstrap.Component.component );"
  },
  {
    "devdecision": "Version 1",
    "id": 51352,
    "v2": "",
    "resolution": "} public static Set<Map.Entry<String,Dispatcher>> getEntries() { return proxies.entrySet( );",
    "conflict": "} public static Set<Map.Entry<String,Dispatcher>> getEntries() { return proxies.entrySet( );"
  },
  {
    "devdecision": "Version 1",
    "id": 51356,
    "v2": "if(sigString.length < 2) { throw new AuthenticationException(\"Invalid authentication header\");",
    "resolution": "if(sigString.length < 2) { throw new AuthenticationException(\"Invalid authentication header\");",
    "conflict": "if(sigString.length < 2) { throw new AuthenticationException(\"Invalid authentication header\");"
  },
  {
    "devdecision": "Version 2",
    "id": 51457,
    "v2": "void getFileContentsByPath(String sessionId, String path, final AsyncCallback<String> async) ;",
    "resolution": "void getFileContentsByPath(String sessionId, String path, final AsyncCallback<String> async) ;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 51473,
    "v2": "if ( o != null ) { LOG.info( EventRecord.here( StatefulMessageSet.class, EventType.VM_STARTING, currentState.name( ), cluster.getName( ), o.getClass( ).getSimpleName( ) ) ); }",
    "resolution": "if ( o != null ) { EventRecord.here( StatefulMessageSet.class, EventType.VM_STARTING, currentState.name( ), cluster.getName( ), o.getClass( ).getSimpleName( ) ).info( ); }",
    "conflict": "EventRecord.here( StatefulMessageSet.class, EventType.VM_STARTING, currentState.name( ), cluster.getName( ), o.getClass( ).getSimpleName( ) ).info( );"
  },
  {
    "devdecision": "Version 2",
    "id": 51476,
    "v2": "import edu.ucsb.eucalyptus.msgs.BaseMessage; import com.eucalyptus.records.EventRecord;",
    "resolution": "import edu.ucsb.eucalyptus.msgs.BaseMessage; import com.eucalyptus.records.EventRecord;",
    "conflict": "import edu.ucsb.eucalyptus.msgs.EventRecord; import edu.ucsb.eucalyptus.msgs.BaseMessage;"
  },
  {
    "devdecision": "Version 2",
    "id": 51478,
    "v2": "import edu.ucsb.eucalyptus.msgs.BaseMessage; import com.eucalyptus.records.EventRecord;",
    "resolution": "import edu.ucsb.eucalyptus.msgs.BaseMessage; import com.eucalyptus.records.EventRecord;",
    "conflict": "import edu.ucsb.eucalyptus.msgs.EventRecord;"
  },
  {
    "devdecision": "Version 2",
    "id": 51491,
    "v2": "import com.eucalyptus.auth.login.WalrusWrappedComponentCredentials; import com.eucalyptus.auth.login.WalrusWrappedCredentials;",
    "resolution": "import com.eucalyptus.auth.login.WalrusWrappedComponentCredentials; import com.eucalyptus.auth.login.WalrusWrappedCredentials;",
    "conflict": "import com.eucalyptus.auth.login.WalrusInternalWrappedCredentials;"
  },
  {
    "devdecision": "Manual",
    "id": 51529,
    "v2": "if(addrInfo != null) Addresses.getAddressManager( ).update( this.getCluster( ), addrInfo );",
    "resolution": "if(addrInfo != null) { Addresses.getAddressManager( ).update( this.getCluster( ), addrInfo );",
    "conflict": "if(addrInfo != null) Addresses.getAddressManager( ).update( this.getCluster( ), addrInfo );"
  },
  {
    "devdecision": "Combination",
    "id": 51554,
    "v2": "",
    "resolution": "import com.eucalyptus.http.MappingHttpRequest; import com.eucalyptus.util.WalrusProperties; import com.eucalyptus.util.WalrusUtil;",
    "conflict": "import com.eucalyptus.util.WalrusUtil; import com.eucalyptus.ws.AuthenticationException; import com.eucalyptus.ws.MappingHttpRequest;"
  },
  {
    "devdecision": "Version 2",
    "id": 51567,
    "v2": "",
    "resolution": "",
    "conflict": "import edu.ucsb.eucalyptus.msgs.RegisterStorageControllerType; import edu.ucsb.eucalyptus.msgs.RegisterWalrusType; import edu.ucsb.eucalyptus.msgs.RegisterVMwareBrokerType;"
  },
  {
    "devdecision": "Version 2",
    "id": 51619,
    "v2": ";\t\t\t\tif(((totalVolumeSize + sizeAsInt) > StorageInfo.getStorageInfo().getMaxTotalVolumeSizeInGb()) || (sizeAsInt > StorageInfo.getStorageInfo().getMaxVolumeSizeInGB()))",
    "resolution": ";\t\t\t\tif(((totalVolumeSize + sizeAsInt) > StorageInfo.getStorageInfo().getMaxTotalVolumeSizeInGb()) || (sizeAsInt > StorageInfo.getStorageInfo().getMaxVolumeSizeInGB()))",
    "conflict": "if(((totalVolumeSize + sizeAsInt) > StorageProperties.MAX_TOTAL_VOLUME_SIZE) || (sizeAsInt > StorageProperties.MAX_VOLUME_SIZE))"
  },
  {
    "devdecision": "Combination",
    "id": 51621,
    "v2": "if(!DirectStorageInfo.getStorageInfo().getZeroFillVolumes()) return SystemUtil.run(new String[]{eucaHome + EUCA_ROOT_WRAPPER, \"dd\", \"if=/dev/zero\", \"of=\" + fileName, \"count=1\", \"bs=\" + blockSize, \"seek=\" + (size -1)});",
    "resolution": "if(!DirectStorageInfo.getStorageInfo().getZeroFillVolumes()) return SystemUtil.run(new String[]{eucaHome + StorageProperties.EUCA_ROOT_WRAPPER, \"dd\", \"if=/dev/zero\", \"of=\" + fileName, \"count=1\", \"bs=\" + StorageProperties.blockSize, \"seek=\" + (size -1)});",
    "conflict": "if(!zeroFillVolumes) return SystemUtil.run(new String[]{eucaHome + StorageProperties.EUCA_ROOT_WRAPPER, \"dd\", \"if=/dev/zero\", \"of=\" + fileName, \"count=1\", \"bs=\" + StorageProperties.blockSize, \"seek=\" + (size -1)});"
  },
  {
    "devdecision": "Version 1",
    "id": 51623,
    "v2": "File snapshotDir = new File(DirectStorageInfo.getStorageInfo().getVolumesDir()); snapshotDir.mkdirs();",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 51630,
    "v2": "import com.eucalyptus.auth.Credentials;",
    "resolution": "import com.eucalyptus.auth.Authentication; import com.eucalyptus.auth.SystemCredentialProvider;",
    "conflict": "import com.eucalyptus.auth.Authentication; import com.eucalyptus.auth.SystemCredentialProvider;"
  },
  {
    "devdecision": "Combination",
    "id": 51639,
    "v2": "@Column( name = \"zero_fill_volumes\" ) private Boolean zeroFillVolumes; @ConfigurableField( description = \"Domain name to use for DNS.\" )",
    "resolution": "@ConfigurableField( description = \"Domain name to use for DNS.\" ) @Column( name = \"dns_domain\" )",
    "conflict": "@Configurable( description = \"Domain name to use for DNS.\" )"
  },
  {
    "devdecision": "Version 2",
    "id": 51670,
    "v2": "final ArrayList<String> storageParams = storageInfo.getStorageParams(); numStorageParams = storageParams.size()/4; Grid g = new Grid (8 +  numStorageParams, 2);",
    "resolution": "final ArrayList<String> storageParams = storageInfo.getStorageParams(); numStorageParams = storageParams.size()/4; Grid g = new Grid (8 +  numStorageParams, 2);",
    "conflict": "Grid g = new Grid (11 + (storageInfo.getStorageParams().size() / 3), 2);"
  },
  {
    "devdecision": "Version 2",
    "id": 51685,
    "v2": "for(int i = 0 ; i < (params.size() / 4); ++i) { props.add(new ComponentProperty(params.get(4*i), params.get(4*i + 1), params.get(4*i + 2), params.get(4*i + 3)));",
    "resolution": "for(int i = 0 ; i < (params.size() / 4); ++i) { props.add(new ComponentProperty(params.get(4*i), params.get(4*i + 1), params.get(4*i + 2), params.get(4*i + 3)));",
    "conflict": "for(int i = 0 ; i < (params.size() / 3); ++i) { props.add(new ComponentProperty(params.get(3*i), params.get(3*i + 1), params.get(3*i + 2)));"
  },
  {
    "devdecision": "Combination",
    "id": 51711,
    "v2": "@Column( name = \"zero_fill_volumes\" ) private Boolean zeroFillVolumes; @Configurable( description = \"Domain name to use for DNS.\" )",
    "resolution": "@Configurable( description = \"Domain name to use for DNS.\" ) @Column( name = \"dns_domain\" )",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 51723,
    "v2": "String decryptedImageKey = encryptedImageKey.substring(0, encryptedImageKey.lastIndexOf(\"crypt.gz\")) + \"tgz\";",
    "resolution": "String decryptedImageKey = encryptedImageKey.substring(0, encryptedImageKey.lastIndexOf(\"crypt.gz\")) + \"tgz\";",
    "conflict": "String decryptedImageKey = encryptedImageKey.substring(0, encryptedImageKey.lastIndexOf(\"crypt.gz\")) + \"tgz\";"
  },
  {
    "devdecision": "Manual",
    "id": 51734,
    "v2": "final String DASPartition) {",
    "resolution": "final String sanHost, final String sanUser, final String sanPassword, final String DASDevice) {",
    "conflict": "final String sanHost, final String sanUser, final String sanPassword) {"
  },
  {
    "devdecision": "Manual",
    "id": 51735,
    "v2": "this.DASPartition = DASPartition;",
    "resolution": "this.sanHost = sanHost; this.sanUser = sanUser; this.sanPassword = sanPassword;",
    "conflict": "this.sanHost = sanHost; this.sanUser = sanUser; this.sanPassword = sanPassword;"
  },
  {
    "devdecision": "Manual",
    "id": 51744,
    "v2": "StorageProperties.DAS_PARTITION);",
    "resolution": "StorageProperties.SAN_HOST, StorageProperties.SAN_USERNAME, StorageProperties.SAN_PASSWORD,",
    "conflict": "StorageProperties.SAN_HOST, StorageProperties.SAN_USERNAME, StorageProperties.SAN_PASSWORD);"
  },
  {
    "devdecision": "Manual",
    "id": 51746,
    "v2": "StorageProperties.DAS_PARTITION);",
    "resolution": "StorageProperties.SAN_HOST, StorageProperties.SAN_USERNAME, StorageProperties.SAN_PASSWORD,",
    "conflict": "StorageProperties.SAN_HOST, StorageProperties.SAN_USERNAME, StorageProperties.SAN_PASSWORD);"
  },
  {
    "devdecision": "Manual",
    "id": 51748,
    "v2": "reply.setDASPartition(StorageProperties.DAS_PARTITION);",
    "resolution": "reply.setSanHost(StorageProperties.SAN_HOST); reply.setSanUser(StorageProperties.SAN_USERNAME); reply.setSanPassword(StorageProperties.SAN_PASSWORD); reply.setDASDevice(StorageProperties.DAS_DEVICE);",
    "conflict": "reply.setSanHost(StorageProperties.SAN_HOST); reply.setSanUser(StorageProperties.SAN_USERNAME); reply.setSanPassword(StorageProperties.SAN_PASSWORD);"
  },
  {
    "devdecision": "Manual",
    "id": 51749,
    "v2": "//TODO: make this configurable return new LVM2DASManager();",
    "resolution": "//return new LVM2Manager(); return new SANManager();",
    "conflict": "return new SANManager();"
  },
  {
    "devdecision": "Manual",
    "id": 51754,
    "v2": "String DASPartition) {",
    "resolution": "String sanHost, String sanUser, String sanPassword,",
    "conflict": "String sanHost, String sanUser, String sanPassword) {"
  },
  {
    "devdecision": "Manual",
    "id": 51755,
    "v2": "this.DASPartition = DASPartition;",
    "resolution": "this.sanHost = sanHost; this.sanUser = sanUser; this.sanPassword = sanPassword;",
    "conflict": "this.sanHost = sanHost; this.sanUser = sanUser; this.sanPassword = sanPassword;"
  },
  {
    "devdecision": "Manual",
    "id": 51758,
    "v2": "updateStorageConfiguration.setDASPartition(storageControllerWeb.getDASPartition());",
    "resolution": "updateStorageConfiguration.setSanHost(storageControllerWeb.getSanHost()); updateStorageConfiguration.setSanUser(storageControllerWeb.getSanUser()); updateStorageConfiguration.setSanPassword(storageControllerWeb.getSanPassword()); updateStorageConfiguration.setDASDevice(storageControllerWeb.getDASDevice());",
    "conflict": "updateStorageConfiguration.setSanHost(storageControllerWeb.getSanHost()); updateStorageConfiguration.setSanUser(storageControllerWeb.getSanUser()); updateStorageConfiguration.setSanPassword(storageControllerWeb.getSanPassword());"
  },
  {
    "devdecision": "Manual",
    "id": 51759,
    "v2": "scInfo.setDASPartition(getStorageConfigResponse.getDASPartition());",
    "resolution": "scInfo.setSanHost(getStorageConfigResponse.getSanHost()); scInfo.setSanUser(getStorageConfigResponse.getSanUser()); scInfo.setSanPassword(getStorageConfigResponse.getSanPassword()); scInfo.setDASDevice(getStorageConfigResponse.getDASDevice());",
    "conflict": "scInfo.setSanHost(getStorageConfigResponse.getSanHost()); scInfo.setSanUser(getStorageConfigResponse.getSanUser()); scInfo.setSanPassword(getStorageConfigResponse.getSanPassword());"
  },
  {
    "devdecision": "Concatenation",
    "id": 51784,
    "v2": "import edu.ucsb.eucalyptus.msgs.GetBucketLoggingStatusType;",
    "resolution": "import edu.ucsb.eucalyptus.msgs.GetBucketVersioningStatusResponseType; import edu.ucsb.eucalyptus.msgs.GetBucketVersioningStatusType;import edu.ucsb.eucalyptus.msgs.GetBucketLoggingStatusType;",
    "conflict": "import edu.ucsb.eucalyptus.msgs.GetBucketVersioningStatusResponseType; import edu.ucsb.eucalyptus.msgs.GetBucketVersioningStatusType;"
  },
  {
    "devdecision": "Version 1",
    "id": 51793,
    "v2": "if(putQueue.getInterrupted()) {",
    "resolution": "if(putQueue.getInterrupted()) {",
    "conflict": "if(putQueue.getInterrupted()) {"
  },
  {
    "devdecision": "Version 2",
    "id": 51851,
    "v2": "import edu.ucsb.eucalyptus.constants.EventType; import edu.ucsb.eucalyptus.msgs.EventRecord;",
    "resolution": "import edu.ucsb.eucalyptus.constants.EventType; import edu.ucsb.eucalyptus.msgs.EventRecord;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 51856,
    "v2": "cluster.getMessageQueue( ).enqueue( event );",
    "resolution": "cluster.getMessageQueue( ).enqueue( event );",
    "conflict": "if(cluster != null) cluster.getMessageQueue().enqueue( event );"
  },
  {
    "devdecision": "Version 1",
    "id": 51863,
    "v2": "public void trigger( ) {",
    "resolution": "public void trigger( Client cluster ) {",
    "conflict": "public void trigger( Client cluster ) {"
  },
  {
    "devdecision": "Version 1",
    "id": 51864,
    "v2": "this.callback.getResponseQueue( ).offer( t ); }",
    "resolution": "}",
    "conflict": "}"
  },
  {
    "devdecision": "Concatenation",
    "id": 51882,
    "v2": "import edu.ucsb.eucalyptus.cloud.ws.Storage;",
    "resolution": "import edu.ucsb.eucalyptus.cloud.ws.Storage;import edu.ucsb.eucalyptus.cloud.ws.Command; import edu.ucsb.eucalyptus.cloud.ws.StreamConsumer;",
    "conflict": "import edu.ucsb.eucalyptus.cloud.ws.Command; import edu.ucsb.eucalyptus.cloud.ws.StreamConsumer;"
  },
  {
    "devdecision": "Combination",
    "id": 51883,
    "v2": "public static final String EUCA_ROOT_WRAPPER = \"/usr/lib/eucalyptus/euca_rootwrap\";",
    "resolution": "private  static final String blockSize = \"1M\"; public static final String EUCA_ROOT_WRAPPER = \"/usr/lib/eucalyptus/euca_rootwrap\";",
    "conflict": "private  static final String blockSize = \"1M\"; public static final String EUCA_ROOT_WRAPPER = \"/usr/share/eucalyptus/euca_rootwrap\";"
  },
  {
    "devdecision": "Combination",
    "id": 51884,
    "v2": "",
    "resolution": "FileIO fileIO = null;",
    "conflict": "synchronized(putQueue) { putQueue.notifyAll(); } FileIO fileIO = null;"
  },
  {
    "devdecision": "Version 2",
    "id": 51885,
    "v2": "public static final String EUCA_ROOT_WRAPPER = \"/usr/lib/eucalyptus/euca_rootwrap\"; public static final int MAX_LOOP_DEVICES = 256;",
    "resolution": "public static final String EUCA_ROOT_WRAPPER = \"/usr/lib/eucalyptus/euca_rootwrap\"; public static final int MAX_LOOP_DEVICES = 256;",
    "conflict": "public static final String EUCA_ROOT_WRAPPER = \"/usr/share/eucalyptus/euca_rootwrap\"; public static final int MAX_LOOP_DEVICES = 256;"
  },
  {
    "devdecision": "Version 2",
    "id": 51894,
    "v2": "else if (tabIndex==confTabIndex) { displayConfTab(wrapper); } else if (tabIndex==downTabIndex) { displayDownloadsTab(wrapper); }",
    "resolution": "else if (tabIndex==confTabIndex) { displayConfTab(wrapper); } else if (tabIndex==downTabIndex) { displayDownloadsTab(wrapper); }",
    "conflict": "else if (tabIndex==confTabIndex) { displayConfTab(wrapper); }"
  },
  {
    "devdecision": "Concatenation",
    "id": 51932,
    "v2": "private final long CACHE_PROGRESS_TIMEOUT = 60000L; //a minute private ConcurrentHashMap<String, ImageCacher> imageCachers = new ConcurrentHashMap<String, ImageCacher>();",
    "resolution": "private final long CACHE_PROGRESS_TIMEOUT = 60000L; //a minute private ConcurrentHashMap<String, ImageCacher> imageCachers = new ConcurrentHashMap<String, ImageCacher>();private static Tracker tracker;",
    "conflict": "private static Tracker tracker;"
  },
  {
    "devdecision": "Version 2",
    "id": 51958,
    "v2": "initializeForEBS(); startupChecks();",
    "resolution": "initializeForEBS(); startupChecks();",
    "conflict": "//initializeForEBS();"
  }
]
}