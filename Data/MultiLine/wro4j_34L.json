{"conflicts":[
  {
    "devdecision": "Version 1",
    "id": 45509,
    "v2": "private UriLocator mockUriLocator;",
    "resolution": "private ResourceLocator mockLocator;",
    "conflict": "private ResourceLocator mockLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 45511,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(WroUtil.EMPTY_STREAM);",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(WroUtil.EMPTY_STREAM);",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(WroUtil.EMPTY_STREAM);"
  },
  {
    "devdecision": "Version 1",
    "id": 45512,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Version 1",
    "id": 45513,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Version 1",
    "id": 45514,
    "v2": "verify(mockUriLocator, times(1)).locate(resourceUri);",
    "resolution": "verify(mockLocator, times(1)).getInputStream();",
    "conflict": "verify(mockLocator, times(1)).getInputStream();"
  },
  {
    "devdecision": "Version 1",
    "id": 45515,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Combination",
    "id": 45516,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45518,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.LessCssImportPreProcessor; import ro.isdc.wro.model.resource.processor.support.ChainedProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45527,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.extensions.processor.js.NgMinProcessor; import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 45529,
    "v2": "final Collection<ResourcePreProcessor> list = processorsFactory.getPreProcessors();",
    "resolution": "Collection<ResourceProcessor> list = processorsFactory.getPreProcessors();",
    "conflict": "Collection<ResourceProcessor> list = processorsFactory.getPreProcessors();"
  },
  {
    "devdecision": "Version 1",
    "id": 45536,
    "v2": "when(mockLocator.locate(Mockito.anyString())).thenAnswer(answerWithContent(\"initial\")); when(mockLocator.locate(\"/\" + Mockito.eq(RESOURCE_CSS_URI))).thenAnswer( answerWithContent(String.format(\"@import url(%s)\", importResourceUri)));",
    "resolution": "when(mockLocator.getInputStream()).then(answerWithContent(String.format(\"@import url(%s)\", importResourceUri)));",
    "conflict": "when(mockLocator.getInputStream()).then(answerWithContent(String.format(\"@import url(%s)\", importResourceUri)));"
  },
  {
    "devdecision": "Version 1",
    "id": 45537,
    "v2": "when(mockLocator.locate(Mockito.anyString())).thenAnswer(answerWithContent(\"changed\")); when(mockLocator.locate(\"/\" + Mockito.eq(RESOURCE_CSS_URI))).thenAnswer( answerWithContent(String.format(\"@import url(%s)\", importResourceUri)));",
    "resolution": "when(mockImportedResourceLocator.getInputStream()).then(answerWithContent(\"changed\"));",
    "conflict": "when(mockImportedResourceLocator.getInputStream()).then(answerWithContent(\"changed\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 45546,
    "v2": "private UriLocator mockUriLocator;",
    "resolution": "private ResourceLocator mockLocator;",
    "conflict": "private ResourceLocator mockLocator;"
  },
  {
    "devdecision": "Combination",
    "id": 45552,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory; import ro.isdc.wro.model.resource.locator.support.DispatcherStreamLocator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.support.DispatcherStreamLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 45555,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory; import ro.isdc.wro.model.resource.locator.support.DispatcherStreamLocator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.support.DispatcherStreamLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 45562,
    "v2": "import org.apache.commons.lang3.Validate;",
    "resolution": "import org.apache.commons.lang3.Validate;",
    "conflict": "import org.slf4j.Logger; import org.slf4j.LoggerFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 45569,
    "v2": "final WroManagerFactory managerFactory = new BaseWroManagerFactory() .setUriLocatorFactory(new SimpleUriLocatorFactory().addLocator(WroTestUtils.createResourceMockingLocator()));",
    "resolution": "final WroManagerFactory managerFactory = new BaseWroManagerFactory().setLocatorFactory(WroTestUtils.createResourceMockingLocatorFactory());",
    "conflict": "victim = new ResourceChangeDetector(); final WroManagerFactory managerFactory = new BaseWroManagerFactory().setLocatorFactory(WroTestUtils.createResourceMockingLocatorFactory());"
  },
  {
    "devdecision": "Version 1",
    "id": 45574,
    "v2": "final WroManagerFactory factory = new BaseWroManagerFactory().setModelFactory(modelFactory).setUriLocatorFactory( locatorFactory).setCacheStrategy(cacheStrategy);",
    "resolution": "final WroManagerFactory factory = new BaseWroManagerFactory().setModelFactory(modelFactory).setLocatorFactory( mockLocatorFactory);",
    "conflict": "final WroManagerFactory factory = new BaseWroManagerFactory().setModelFactory(modelFactory).setLocatorFactory( mockLocatorFactory);"
  },
  {
    "devdecision": "Manual",
    "id": 45581,
    "v2": "public void tearDown() throws Exception {",
    "resolution": "public void tearDown() {",
    "conflict": "public void tearDown() throws Exception  {"
  },
  {
    "devdecision": "Combination",
    "id": 45582,
    "v2": "import ro.isdc.wro.model.resource.locator.support.LocatorProvider; import ro.isdc.wro.model.resource.locator.wildcard.DefaultWildcardStreamLocator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 45589,
    "v2": "private UriLocator mockUriLocator;",
    "resolution": "private ResourceLocator mockLocator;",
    "conflict": "private ResourceLocator mockLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 45591,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(WroUtil.EMPTY_STREAM);",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(WroUtil.EMPTY_STREAM);",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(WroUtil.EMPTY_STREAM);"
  },
  {
    "devdecision": "Version 1",
    "id": 45592,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Version 1",
    "id": 45593,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Version 1",
    "id": 45594,
    "v2": "verify(mockUriLocator, times(1)).locate(resourceUri);",
    "resolution": "verify(mockLocator, times(1)).getInputStream();",
    "conflict": "verify(mockLocator, times(1)).getInputStream();"
  },
  {
    "devdecision": "Version 1",
    "id": 45595,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());",
    "conflict": "when(mockLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Version 1",
    "id": 45597,
    "v2": "private void doFilterWithProcessors(final List<ResourcePreProcessor> processors)",
    "resolution": "private void doFilterWithProcessors(final List<ResourceProcessor> processors)",
    "conflict": "private void doFilterWithProcessors(final List<ResourceProcessor> processors)"
  },
  {
    "devdecision": "Version 1",
    "id": 45600,
    "v2": "assertSame(ServletContextUriLocator.class, uriLocatorFactory.getConfiguredStrategies().iterator().next().getClass());",
    "resolution": "assertSame(ServletContextResourceLocatorFactory.class, uriLocatorFactory.getConfiguredStrategies().iterator().next().getClass());",
    "conflict": "assertSame(ServletContextResourceLocatorFactory.class, uriLocatorFactory.getConfiguredStrategies().iterator().next().getClass());"
  },
  {
    "devdecision": "Version 2",
    "id": 45603,
    "v2": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "resolution": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 45609,
    "v2": "assertEquals(JSMinProcessor.class, ((ProcessorDecorator) processorsFactory.getPostProcessors().iterator().next()).getDecoratedObject().getClass());",
    "resolution": "assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());",
    "conflict": "assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());"
  },
  {
    "devdecision": "Combination",
    "id": 45634,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.resource.locator.ClasspathUriLocator; import ro.isdc.wro.model.resource.locator.UriLocator;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 45658,
    "v2": "final URL url = ResourcePreProcessor.class.getResource(\"extensionAware\");",
    "resolution": "final URL url = ResourceProcessor.class.getResource(\"extensionAware\");",
    "conflict": "final URL url = ResourceProcessor.class.getResource(\"extensionAware\");"
  },
  {
    "devdecision": "Combination",
    "id": 45663,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.resource.locator.ClasspathUriLocator;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;"
  },
  {
    "devdecision": "Combination",
    "id": 45695,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.SingleLineCommentStripperProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.SingleLineCommentStripperProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 45707,
    "v2": "import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream;",
    "resolution": "import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 45709,
    "v2": "protected ServletContextUriLocator newServletContextUriLocator() { return new StandaloneServletContextUriLocator(standaloneContext);",
    "resolution": "protected ResourceLocatorFactory newLocatorFactory() { return new StandaloneServletContextUriLocator(standaloneContext);",
    "conflict": "protected ResourceLocatorFactory newLocatorFactory() { return DefaultResourceLocatorFactory.standaloneFactory(standaloneContext.getContextFolder());"
  },
  {
    "devdecision": "Version 2",
    "id": 45722,
    "v2": "private boolean parallelProcessing; private TaskExecutor<Void> taskExecutor;",
    "resolution": "private boolean parallelProcessing; private TaskExecutor<Void> taskExecutor;",
    "conflict": "private boolean parallelPostprocessing; private TaskExecutor<Void> taskExecutor;"
  },
  {
    "devdecision": "Version 1",
    "id": 45728,
    "v2": "* @param resources *          what are the resources to merge.",
    "resolution": "* @param group *          the group being processed.",
    "conflict": "* @param group *          the group being processed."
  },
  {
    "devdecision": "None",
    "id": 45754,
    "v2": "import java.text.SimpleDateFormat;",
    "resolution": "import java.util.Collection;",
    "conflict": "import static org.junit.Assert.assertTrue;"
  },
  {
    "devdecision": "Manual",
    "id": 45761,
    "v2": "",
    "resolution": "private TaskExecutor<String> taskExecutor;",
    "conflict": "private TaskExecutor<String> taskExecutor;"
  },
  {
    "devdecision": "Version 2",
    "id": 45771,
    "v2": "* Maven plugin which use a single processor. *",
    "resolution": "* Maven plugin which use a single processor. *",
    "conflict": "* Maven plugin which use a singe processor. *"
  },
  {
    "devdecision": "Manual",
    "id": 45780,
    "v2": "* * @parameter default-value=\"${project.build.directory}\"",
    "resolution": "* * @parameter default-value=\"${project.build.directory}\"",
    "conflict": "* * @parameter default-value=\"${project.build.directory}"
  },
  {
    "devdecision": "Manual",
    "id": 45783,
    "v2": "* @param destinationFolder the destinationFolder to set * @VisibleForTesting",
    "resolution": "* @parameter default-value=\"${project.build.directory}/wro/\" expression=\"${destinationFolder}\" * @optional",
    "conflict": "* @param destinationFolder *          the destinationFolder to set"
  },
  {
    "devdecision": "Manual",
    "id": 45784,
    "v2": "* @param cssDestinationFolder the cssDestinationFolder to set * @VisibleForTesting",
    "resolution": "* @parameter expression=\"${cssDestinationFolder}\" * @optional",
    "conflict": "* @param cssDestinationFolder *          the cssDestinationFolder to set"
  },
  {
    "devdecision": "Manual",
    "id": 45785,
    "v2": "* @param jsDestinationFolder the jsDestinationFolder to set * @VisibleForTesting",
    "resolution": "* @parameter expression=\"${jsDestinationFolder}\" * @optional",
    "conflict": "* @param jsDestinationFolder *          the jsDestinationFolder to set"
  },
  {
    "devdecision": "Combination",
    "id": 45790,
    "v2": "final Collection<ResourcePostProcessor> processors = processorsFactory.getPostProcessors(); LOG.debug(\"appying post processors: {}\", processors);",
    "resolution": "final Collection<ResourceProcessor> processors = processorsFactory.getPostProcessors(); LOG.debug(\"appying post processors: {}\", processors);",
    "conflict": "final Collection<ResourceProcessor> processors = processorsFactory.getPostProcessors();"
  },
  {
    "devdecision": "Combination",
    "id": 45794,
    "v2": "extends AbstractDecorator<LazyInitializer<ResourcePreProcessor>> implements ResourceProcessorAware {",
    "resolution": "extends AbstractDecorator<LazyInitializer<ResourceProcessor>> implements ResourceProcessorAware {",
    "conflict": "extends AbstractDecorator<LazyInitializer<ResourceProcessor>> implements ResourceProcessor, SupportedResourceTypeAware, MinimizeAware, SupportAware, ImportAware {"
  },
  {
    "devdecision": "Version 1",
    "id": 45795,
    "v2": "import ro.isdc.wro.model.resource.processor.factory.ConfigurableProcessorsFactory; import ro.isdc.wro.model.resource.processor.impl.css.CssMinProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;"
  },
  {
    "devdecision": "Manual",
    "id": 45797,
    "v2": "assertEquals(1, uriLocatorFactory.getConfiguredStrategies().size()); assertSame(ServletContextUriLocator.class,",
    "resolution": "assertEquals(1, uriLocatorFactory.getConfiguredStrategies().size()); assertSame(ServletContextResourceLocatorFactory.class,",
    "conflict": "Assert.assertEquals(1, uriLocatorFactory.getConfiguredStrategies().size()); Assert.assertSame(ServletContextResourceLocatorFactory.class,"
  },
  {
    "devdecision": "Manual",
    "id": 45803,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 45805,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45808,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45812,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45814,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 45817,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45820,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45823,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45825,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 45828,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 45831,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45834,
    "v2": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.Destroyable; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 45844,
    "v2": "@Mock private ServletContext mockServletContext; private ServletContextUriLocator victim;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 45845,
    "v2": "victim = new ServletContextUriLocator();  initLocator(victim);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 45847,
    "v2": "victim.locate(createUri(\"/css/*.css\"));",
    "resolution": "victim = new ServletContextResourceLocator(mockServletContext, createUri(\"/css/*.css\")); Assert.assertNotNull(victim.getInputStream());",
    "conflict": "locator = new ServletContextResourceLocator(mockServletContext, createUri(\"/css/*.css\")); Assert.assertNotNull(locator.getInputStream());"
  },
  {
    "devdecision": "Manual",
    "id": 45848,
    "v2": "victim.locate(createUri(\"/css/*.cs?\"));",
    "resolution": "victim = new ServletContextResourceLocator(mockServletContext, createUri(\"/css/*.cs?\")); Assert.assertNotNull(victim.getInputStream());",
    "conflict": "locator = new ServletContextResourceLocator(mockServletContext, createUri(\"/css/*.cs?\")); Assert.assertNotNull(locator.getInputStream());"
  },
  {
    "devdecision": "Manual",
    "id": 45849,
    "v2": "victim.locate(createUri(\"/css/*.???\"));",
    "resolution": "victim = new ServletContextResourceLocator(mockServletContext, createUri(\"/css/*.???\")); Assert.assertNotNull(victim.getInputStream());",
    "conflict": "locator = new ServletContextResourceLocator(mockServletContext, createUri(\"/css/*.???\")); Assert.assertNotNull(locator.getInputStream());"
  },
  {
    "devdecision": "Manual",
    "id": 45851,
    "v2": "victim.locate(createUri(\"/css/**.NOTEXIST\"));",
    "resolution": "useLocator(new ServletContextResourceLocator(mockServletContext, createUri(\"/css/**.NOTEXIST\"))); victim.getInputStream();",
    "conflict": "useLocator(new ServletContextResourceLocator(mockServletContext, createUri(\"/css/**.NOTEXIST\"))); locator.getInputStream();"
  },
  {
    "devdecision": "Manual",
    "id": 45853,
    "v2": "victim.setLocatorStrategy(null);",
    "resolution": "victim = new ServletContextResourceLocator(mockServletContext, \"/doesntMatter\"); victim.setLocatorStrategy(null);",
    "conflict": "locator = new ServletContextResourceLocator(mockServletContext, \"/doesntMatter\"); locator.setLocatorStrategy(null);"
  },
  {
    "devdecision": "Combination",
    "id": 45872,
    "v2": "final ResourcePostProcessor processor = new JsLintProcessor() {",
    "resolution": "final ResourceProcessor processor = new JsLintProcessor() {",
    "conflict": "final ThreadLocal<Throwable> cause = new ThreadLocal<Throwable>();  final ResourceProcessor processor = new JsLintProcessor() {"
  },
  {
    "devdecision": "Combination",
    "id": 45873,
    "v2": "final ResourcePostProcessor processor = new JsLintProcessor() {",
    "resolution": "final ResourceProcessor processor = new JsLintProcessor() {",
    "conflict": "final ThreadLocal<Throwable> cause = new ThreadLocal<Throwable>();  final ResourceProcessor processor = new JsLintProcessor() {"
  },
  {
    "devdecision": "Manual",
    "id": 45913,
    "v2": "when(mockLocator.locate(Mockito.eq(importResource))).thenAnswer(answerWithContent(\"Changed\")); assertTrue(victim.getTargetGroupsAsList().isEmpty());",
    "resolution": "when(mockLocator.getInputStream()).thenAnswer(answerWithContent(\"\"));",
    "conflict": "when(mockLocatorFactory.locate(Mockito.eq(importResource))).thenAnswer(answerWithContent(\"Changed\")); assertTrue(mojo.getTargetGroupsAsList().isEmpty());"
  },
  {
    "devdecision": "Combination",
    "id": 45917,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 45919,
    "v2": "private WebjarUriLocator webjarLocator;",
    "resolution": "private ResourceLocatorFactory webjarLocatorFactory;",
    "conflict": "private ResourceLocatorFactory webjarLocatorFactory;"
  },
  {
    "devdecision": "Version 1",
    "id": 45926,
    "v2": "private final UriLocatorFactory locatorFactory = newLocatorFactory();",
    "resolution": "private final ResourceLocatorFactory locatorFactory = newLocatorFactory();",
    "conflict": "private final ResourceLocatorFactory locatorFactory = newLocatorFactory();"
  },
  {
    "devdecision": "Version 1",
    "id": 45931,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 45937,
    "v2": "final WroManagerFactory managerFactory = new BaseWroManagerFactory() .setUriLocatorFactory(new SimpleUriLocatorFactory().addLocator(WroTestUtils.createResourceMockingLocator()));",
    "resolution": "final WroManagerFactory managerFactory = new BaseWroManagerFactory().setLocatorFactory(WroTestUtils.createResourceMockingLocatorFactory());",
    "conflict": "final WroManagerFactory managerFactory = new BaseWroManagerFactory().setLocatorFactory(WroTestUtils.createResourceMockingLocatorFactory());"
  },
  {
    "devdecision": "Manual",
    "id": 45941,
    "v2": "throw new WroRuntimeException(\"Cannot build model from XML: \" + e.getMessage(), e);",
    "resolution": "throw new WroRuntimeException(\"Cannot build model from XML: \" + e.getMessage(), e);",
    "conflict": "throw new WroRuntimeException(\"Cannot build model from XML\", e); } finally { IOUtils.closeQuietly(is);"
  },
  {
    "devdecision": "Version 2",
    "id": 45942,
    "v2": "import java.io.InputStream; import java.util.Arrays;",
    "resolution": "import java.io.InputStream; import java.util.Arrays;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 45945,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.css.LessCssImportPreProcessor; import ro.isdc.wro.model.resource.processor.support.ChainedProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.LessCssImportPreProcessor; import ro.isdc.wro.model.resource.processor.support.ChainedProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 45949,
    "v2": "public static final String ALIAS_RUBY = \"rubySassCss\";",
    "resolution": "public static final String ALIAS = \"sassCss\";",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 45950,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 45955,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 45961,
    "v2": "final String resultPathPrefix = String.format(\"%s%s/expander/subfolder\", ClasspathUriLocator.PREFIX, WroUtil.toPackageAsFolder(getClass()));",
    "resolution": "final String resultPathPrefix = String.format(\"%s%s/expander/subfolder\", ClasspathResourceLocator.PREFIX, WroUtil.toPackageAsFolder(getClass()));",
    "conflict": "final String resultPathPrefix = String.format(\"%s%s/expander/subfolder\", ClasspathResourceLocator.PREFIX, WroUtil.toPackageAsFolder(getClass()));"
  },
  {
    "devdecision": "Combination",
    "id": 45965,
    "v2": "",
    "resolution": "import org.apache.commons.lang3.Validate; import org.junit.After; import org.junit.Assert;",
    "conflict": "import junit.framework.Assert;  import org.apache.commons.lang3.Validate;"
  },
  {
    "devdecision": "Version 2",
    "id": 45974,
    "v2": "// will leave result unchanged, because the processing is not successful. assertEquals(\"alert(1);\", sw.toString());",
    "resolution": "// will leave result unchanged, because the processing is not successful. assertEquals(\"alert(1);\", sw.toString());",
    "conflict": "//will leave result unchanged, because the processing is not successful. Assert.assertEquals(\"alert(1);\", sw.toString());"
  },
  {
    "devdecision": "Combination",
    "id": 45976,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.css.CssImportPreProcessor; import ro.isdc.wro.model.resource.processor.support.ChainedProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.CssImportPreProcessor; import ro.isdc.wro.model.resource.processor.support.ChainedProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 45978,
    "v2": "import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertTrue;",
    "resolution": "import static org.junit.Assert.assertEquals; import static org.junit.Assert.assertFalse; import static org.junit.Assert.assertTrue;",
    "conflict": "import static junit.framework.Assert.assertEquals;"
  },
  {
    "devdecision": "Version 2",
    "id": 45986,
    "v2": "",
    "resolution": "",
    "conflict": "final WroManager manager = getWroManager(); final HashStrategy hashStrategy = manager.getHashStrategy(); final ResourceLocatorFactory locatorFactory = manager.getResourceLocatorFactory();"
  },
  {
    "devdecision": "Combination",
    "id": 45995,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.css.CssImportPreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.CssImportPreProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 45996,
    "v2": "private MBeanServer mockMBeanServer; @Mock private UriLocator mockUriLocator;",
    "resolution": "private MBeanServer mockMBeanServer; @Mock private ResourceLocator mockLocator;",
    "conflict": "private ResourceLocator mockLocator;"
  },
  {
    "devdecision": "Combination",
    "id": 45997,
    "v2": "verify(mockUriLocator, times(1)).locate(resourceUri); assertEquals(expectedBody, body);",
    "resolution": "verify(mockLocator, times(1)).getInputStream(); assertEquals(expectedBody, body);",
    "conflict": "verify(mockLocator, times(1)).getInputStream(); assertThat(body, is(expectedBody));"
  },
  {
    "devdecision": "Combination",
    "id": 46015,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.support.CssImportInspector;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.support.CssImportInspector;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 46029,
    "v2": "@Override protected ProcessorsFactory newProcessorsFactory() { return new DefaultProcessorsFactory(); }",
    "resolution": "@Override protected ProcessorsFactory newProcessorsFactory() { return new DefaultProcessorsFactory(); }",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 46030,
    "v2": "import ro.isdc.wro.util.LazyInitializer;",
    "resolution": "import ro.isdc.wro.util.LazyInitializer;import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.AbstractResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.AbstractResourceLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 46031,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException {",
    "resolution": "protected ResourceLocator getModelResourceLocator() {",
    "conflict": "protected ResourceLocator getModelResourceLocator() {"
  },
  {
    "devdecision": "Version 1",
    "id": 46035,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException {",
    "resolution": "protected ResourceLocator getModelResourceLocator() {",
    "conflict": "protected ResourceLocator getModelResourceLocator() {"
  },
  {
    "devdecision": "Combination",
    "id": 46039,
    "v2": "import ro.isdc.wro.model.factory.ConfigurableModelFactory; import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.locator.UriLocator;",
    "resolution": "import ro.isdc.wro.model.factory.ConfigurableModelFactory; import ro.isdc.wro.model.factory.WroModelFactory;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46040,
    "v2": "protected Map<String, ResourcePostProcessor> getPostProcessorStrategies(final ProcessorProvider provider) { final Map<String, ResourcePostProcessor> map = super.getPostProcessorStrategies(provider);",
    "resolution": "protected Map<String, ResourceProcessor> getPostProcessorStrategies(final ProcessorProvider provider) { final Map<String, ResourceProcessor> map = super.getPostProcessorStrategies(provider);",
    "conflict": "protected Map<String, ResourceProcessor> getPostProcessorStrategies(final ProcessorProvider provider) { final Map<String, ResourceProcessor> map = super.getPostProcessorStrategies(provider);"
  },
  {
    "devdecision": "Version 1",
    "id": 46041,
    "v2": "protected Map<String, ResourcePreProcessor> getPreProcessorStrategies(final ProcessorProvider provider) { final Map<String, ResourcePreProcessor> map = super.getPreProcessorStrategies(provider);",
    "resolution": "protected Map<String, ResourceProcessor> getPreProcessorStrategies(final ProcessorProvider provider) { final Map<String, ResourceProcessor> map = super.getPreProcessorStrategies(provider);",
    "conflict": "protected Map<String, ResourceProcessor> getPreProcessorStrategies(final ProcessorProvider provider) { final Map<String, ResourceProcessor> map = super.getPreProcessorStrategies(provider);"
  },
  {
    "devdecision": "Combination",
    "id": 46047,
    "v2": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.locator.UriLocator;",
    "resolution": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 46050,
    "v2": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46051,
    "v2": "@Override public java.util.Map<String,ResourcePreProcessor> providePreProcessors() {",
    "resolution": "public java.util.Map<String,ResourceProcessor> providePreProcessors() {",
    "conflict": "public java.util.Map<String,ResourceProcessor> providePreProcessors() {"
  },
  {
    "devdecision": "Combination",
    "id": 46062,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.DefaultUriLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.DefaultUriLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 46063,
    "v2": "@Inject private final UriLocatorFactory locatorFactory;",
    "resolution": "@Inject private final ResourceLocatorFactory locatorFactory;",
    "conflict": "private final ResourceLocatorFactory locatorFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 46064,
    "v2": "",
    "resolution": "",
    "conflict": "public final GroupsProcessor getGroupsProcessor() { return this.groupsProcessor; }"
  },
  {
    "devdecision": "Combination",
    "id": 46066,
    "v2": "public Builder setLocatorFactory(final UriLocatorFactory locatorFactory) { notNull(locatorFactory);",
    "resolution": "public Builder setLocatorFactory(final ResourceLocatorFactory locatorFactory) { notNull(locatorFactory);",
    "conflict": "public Builder setLocatorFactory(final ResourceLocatorFactory locatorFactory) {"
  },
  {
    "devdecision": "Combination",
    "id": 46069,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.InjectorAwareResourceLocatorFactoryDecorator; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 46073,
    "v2": "return managerFactory.create().getModelFactory();",
    "resolution": "return managerFactory.create().getModelFactory();",
    "conflict": "final WroModelFactory modelFactory = modelFactoryInitializer.get(); // final WroModelFactory proxy = ProxyFactory.proxy(modelFactory, WroModelFactory.class).create(); return modelFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 46074,
    "v2": "return managerFactory.create().getNamingStrategy();",
    "resolution": "return managerFactory.create().getNamingStrategy();",
    "conflict": "final NamingStrategy namingStrategy = managerFactory.create().getNamingStrategy(); // final NamingStrategy proxy = new ProxyFactory<NamingStrategy>(namingStrategy, NamingStrategy.class).create(); return namingStrategy;"
  },
  {
    "devdecision": "Version 2",
    "id": 46078,
    "v2": "private UriLocator mockUriLocator;",
    "resolution": "private UriLocator mockUriLocator;",
    "conflict": "private ResourceLocator mockUriLocator;"
  },
  {
    "devdecision": "Version 2",
    "id": 46080,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "conflict": "when(mockUriLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Version 2",
    "id": 46081,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "conflict": "when(mockUriLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Version 2",
    "id": 46082,
    "v2": "verify(mockUriLocator, times(1)).locate(resourceUri);",
    "resolution": "verify(mockUriLocator, times(1)).locate(resourceUri);",
    "conflict": "verify(mockUriLocator, times(1)).getInputStream();"
  },
  {
    "devdecision": "Version 2",
    "id": 46083,
    "v2": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "resolution": "when(mockUriLocator.locate(anyString())).thenReturn(new ClasspathUriLocator().locate(resourceUri));",
    "conflict": "when(mockUriLocator.getInputStream()).thenReturn(new ClasspathResourceLocator(resourceUri).getInputStream());"
  },
  {
    "devdecision": "Manual",
    "id": 46084,
    "v2": "throws Exception { when(mockLocatorFactory.locate(Mockito.anyString())).thenThrow(IOException.class);",
    "resolution": "throws Exception { when(mockLocator.getInputStream()).thenThrow(IOException.class);",
    "conflict": "throws Exception { when(mockLocator.getInputStream()).thenThrow(IOException.class);"
  },
  {
    "devdecision": "Combination",
    "id": 46095,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46115,
    "v2": "private ResourcePreProcessor mockFallbackProcessor; private ResourcePreProcessor victim;",
    "resolution": "private ResourceProcessor mockFallbackProcessor; private ResourceProcessor victim;",
    "conflict": "private ResourceProcessor mockRhinoProcessor; private ResourceProcessor victim;"
  },
  {
    "devdecision": "Manual",
    "id": 46116,
    "v2": "protected ResourcePreProcessor createFallbackProcessor() { return mockFallbackProcessor;",
    "resolution": "protected ResourceProcessor createFallbackProcessor() { return mockFallbackProcessor;",
    "conflict": "ResourceProcessor createRhinoProcessor() { return mockRhinoProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 46131,
    "v2": "//final WroModelFactory proxy = ProxyFactory.proxy(modelFactory, WroModelFactory.class).create();",
    "resolution": "//final WroModelFactory proxy = ProxyFactory.proxy(modelFactory, WroModelFactory.class).create();",
    "conflict": "injector.inject(modelFactory); // final WroModelFactory proxy = ProxyFactory.proxy(modelFactory, WroModelFactory.class).create();"
  },
  {
    "devdecision": "Version 2",
    "id": 46132,
    "v2": "//final NamingStrategy proxy = new ProxyFactory<NamingStrategy>(namingStrategy, NamingStrategy.class).create();",
    "resolution": "//final NamingStrategy proxy = new ProxyFactory<NamingStrategy>(namingStrategy, NamingStrategy.class).create();",
    "conflict": "injector.inject(namingStrategy); // final NamingStrategy proxy = new ProxyFactory<NamingStrategy>(namingStrategy, NamingStrategy.class).create();"
  },
  {
    "devdecision": "Version 1",
    "id": 46143,
    "v2": "private UriLocatorFactory locatorFactory;",
    "resolution": "private ResourceLocatorFactory resourceLocatorFactory;",
    "conflict": "private ResourceLocatorFactory resourceLocatorFactory;"
  },
  {
    "devdecision": "Version 1",
    "id": 46193,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46197,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.js.JSMinProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.js.JSMinProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46206,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.decorator.LazyProcessorDecorator; import ro.isdc.wro.util.LazyInitializer;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.LazyProcessorDecorator;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 46207,
    "v2": "private GoogleClosureCompressorProcessor victim;",
    "resolution": "private GoogleClosureCompressorProcessor victim;",
    "conflict": "private GoogleClosureCompressorProcessor processor;"
  },
  {
    "devdecision": "Manual",
    "id": 46208,
    "v2": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", (ResourcePreProcessor) victim);",
    "resolution": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", victim);",
    "conflict": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);"
  },
  {
    "devdecision": "Manual",
    "id": 46209,
    "v2": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", (ResourcePreProcessor) victim);",
    "resolution": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", victim);",
    "conflict": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);"
  },
  {
    "devdecision": "Manual",
    "id": 46210,
    "v2": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", (ResourcePreProcessor) victim);",
    "resolution": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", victim);",
    "conflict": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);"
  },
  {
    "devdecision": "Version 2",
    "id": 46212,
    "v2": "victim.process(null, new StringReader(\"alert(1);\"), sw); // will leave result unchanged, because the processing is not successful.",
    "resolution": "victim.process(null, new StringReader(\"alert(1);\"), sw); // will leave result unchanged, because the processing is not successful.",
    "conflict": "processor.process(null, new StringReader(\"alert(1);\"), sw); //will leave result unchanged, because the processing is not successful."
  },
  {
    "devdecision": "Combination",
    "id": 46230,
    "v2": "public class TestRhinoCoffeeScriptProcessor { private ResourcePreProcessor processor;",
    "resolution": "public class TestRhinoCoffeeScriptProcessor { private ResourceProcessor processor;",
    "conflict": "public class TestCoffeeScriptProcessor { private ResourceProcessor processor;"
  },
  {
    "devdecision": "Combination",
    "id": 46231,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 46240,
    "v2": "} catch(final IOException e) { LOG.error(\"Exception occured while processing resource: \" + resource + \" using processor: \" + ALIAS); onException(new WroRuntimeException(\"Exception during YuiCss processing of resource: \" + resource, e));",
    "resolution": "} catch(final IOException e) { LOG.error(\"Exception occured while processing resource: \" + resource + \" using processor: \" + ALIAS); onException(new WroRuntimeException(\"Exception during YuiCss processing of resource: \" + resource, e));",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 46241,
    "v2": "public void shouldNotDetectChangeAfterFirstRun() throws Exception {",
    "resolution": "public void shouldNotDetectChangeAfterFirstRun() throws Exception {",
    "conflict": "public void shouldDetectChangeAfterFirstRun() throws Exception {"
  },
  {
    "devdecision": "Combination",
    "id": 46246,
    "v2": "final String result = preProcessorExecutor.processAndMerge(filteredGroup.getResources(), cacheKey.isMinimize()); return applyPostProcessors(cacheKey, result);",
    "resolution": "final String result = preProcessorExecutor.processAndMerge(filteredGroup, cacheKey.isMinimize()); return applyPostProcessors(cacheKey, result);",
    "conflict": "final String result = preProcessorExecutor.processAndMerge(filteredGroup, cacheKey.isMinimize()); return applyPostProcessors(group, cacheKey, result);"
  },
  {
    "devdecision": "Version 2",
    "id": 46248,
    "v2": "//the processor is invoked as a pre processor. This is important for correct computation of eligibility. decorateProcessor(processor, cacheKey.isMinimize()).process(resource, reader, writer);",
    "resolution": "//the processor is invoked as a pre processor. This is important for correct computation of eligibility. decorateProcessor(processor, cacheKey.isMinimize()).process(resource, reader, writer);",
    "conflict": "decorateProcessor(processor).process(mergedResource, reader, writer);"
  },
  {
    "devdecision": "Manual",
    "id": 46249,
    "v2": "private ProcessorDecorator decorateProcessor(final ResourcePostProcessor processor, final boolean minimize) { final ProcessorDecorator decorated = new DefaultProcessorDecorator(processor, minimize);",
    "resolution": "private ProcessorDecorator decorateProcessor(final ResourceProcessor processor, final boolean minimize) { final ProcessorDecorator decorated = new DefaultProcessorDecorator(processor, minimize);",
    "conflict": "private ResourceProcessor decorateProcessor(final ResourceProcessor processor) { final ResourceProcessor decorated = new DefaultProcessorDecorator(processor);"
  },
  {
    "devdecision": "Manual",
    "id": 46252,
    "v2": "public DefaultProcessorDecorator(final Object processor, final boolean minimize) { this(processor, ProcessingCriteria.createDefault(minimize));",
    "resolution": "public DefaultProcessorDecorator(final ResourceProcessor processor, final boolean minimize) { this(processor, ProcessingCriteria.createDefault(minimize));",
    "conflict": "public DefaultProcessorDecorator(final ResourceProcessor processor) { this(processor, ProcessingCriteria.createDefault());"
  },
  {
    "devdecision": "Combination",
    "id": 46255,
    "v2": "private UriLocatorFactory locatorFactory;",
    "resolution": "private ResourceLocatorFactory locatorFactory;",
    "conflict": "@Inject private ResourceLocatorFactory locatorFactory;"
  },
  {
    "devdecision": "Version 1",
    "id": 46259,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.InjectorAwareUriLocatorFactoryDecorator; import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.InjectorAwareResourceLocatorFactoryDecorator; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.InjectorAwareResourceLocatorFactoryDecorator; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Version 1",
    "id": 46262,
    "v2": "manager.setModelFactory(DefaultWroModelFactoryDecorator.decorate(manager.getModelFactory(), manager .getModelTransformers()));",
    "resolution": "manager.setModelFactory(DefaultWroModelFactoryDecorator.decorate(manager.getModelFactory(), manager.getModelTransformers()));",
    "conflict": "manager.setModelFactory(DefaultWroModelFactoryDecorator.decorate(manager.getModelFactory(), manager.getModelTransformers()));"
  },
  {
    "devdecision": "Version 1",
    "id": 46266,
    "v2": "return new InjectorObjectFactory<UriLocatorFactory>() { public UriLocatorFactory create() {",
    "resolution": "return new InjectorObjectFactory<ResourceLocatorFactory>() { public ResourceLocatorFactory create() {",
    "conflict": "return new InjectorObjectFactory<ResourceLocatorFactory>() { public ResourceLocatorFactory create() {"
  },
  {
    "devdecision": "Version 2",
    "id": 46273,
    "v2": "assertNotNull(sample.metaDataFactory); assertNotNull(sample.cacheKeyFactory); assertNotNull(sample.bundleProcessor);",
    "resolution": "assertNotNull(sample.metaDataFactory); assertNotNull(sample.cacheKeyFactory); assertNotNull(sample.bundleProcessor);",
    "conflict": "org.junit.Assert.assertNotNull(sample.metaDataFactory);"
  },
  {
    "devdecision": "Combination",
    "id": 46274,
    "v2": "private UriLocatorFactory uriLocatorFactory;",
    "resolution": "private UriLocatorFactory locatorFactory;",
    "conflict": "@Inject private UriLocatorFactory locatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 46277,
    "v2": "public final WroManager setCacheStrategy(final CacheStrategy<CacheKey, CacheValue> cacheStrategy) { Validate.notNull(cacheStrategy);",
    "resolution": "public final WroManager setCacheStrategy(final CacheStrategy<CacheKey, CacheValue> cacheStrategy) { notNull(cacheStrategy);",
    "conflict": "public final WroManager setCacheStrategy(final CacheStrategy<CacheEntry, ContentHashEntry> cacheStrategy) { notNull(cacheStrategy);"
  },
  {
    "devdecision": "Concatenation",
    "id": 46280,
    "v2": "if (cacheKeyFactory == null) { cacheKeyFactory = newCacheKeyFactory();",
    "resolution": "if (metaDataFactory == null) { metaDataFactory = newMetaDataFactory();if (cacheKeyFactory == null) { cacheKeyFactory = newCacheKeyFactory();",
    "conflict": "if (metaDataFactory == null) { metaDataFactory = newMetaDataFactory();"
  },
  {
    "devdecision": "Concatenation",
    "id": 46293,
    "v2": "assertNotNull(sample.cacheKeyFactory); assertNotNull(sample.bundleProcessor);",
    "resolution": "assertNotNull(sample.cacheKeyFactory); assertNotNull(sample.bundleProcessor);assertNotNull(sample.metaDataFactory);",
    "conflict": "assertNotNull(sample.metaDataFactory);"
  },
  {
    "devdecision": "Concatenation",
    "id": 46294,
    "v2": "CacheKeyFactory cacheKeyFactory; @Inject ResourceBundleProcessor bundleProcessor;",
    "resolution": "CacheKeyFactory cacheKeyFactory; @Inject ResourceBundleProcessor bundleProcessor;MetaDataFactory metaDataFactory;",
    "conflict": "MetaDataFactory metaDataFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 46298,
    "v2": "public final WroManager setUriLocatorFactory(final UriLocatorFactory uriLocatorFactory) { this.locatorFactory = uriLocatorFactory;",
    "resolution": "*/ public final WroManager setResourceLocatorFactory(final ResourceLocatorFactory resourceLocatorFactory) {",
    "conflict": "public final WroManager setResourceLocatorFactory(final ResourceLocatorFactory resourceLocatorFactory) { this.resourceLocatorFactory = resourceLocatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 46299,
    "v2": "public final UriLocatorFactory getUriLocatorFactory() { return locatorFactory;",
    "resolution": "public ResourceLocatorFactory getResourceLocatorFactory() { return locatorFactory;",
    "conflict": "public ResourceLocatorFactory getResourceLocatorFactory() { return resourceLocatorFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 46300,
    "v2": "if (metaDataFactory == null) { metaDataFactory = newMetaDataFactory(); }",
    "resolution": "if (metaDataFactory == null) { metaDataFactory = newMetaDataFactory(); }",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 46301,
    "v2": "manager.setMetaDataFactory(metaDataFactory);",
    "resolution": "manager.setMetaDataFactory(metaDataFactory);",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 46318,
    "v2": "import java.io.IOException; import java.io.InputStream; import java.util.HashMap; import java.util.Map;",
    "resolution": "import java.util.HashMap; import java.util.Map;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 46329,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.extensions.processor.js.YUIJsCompressorProcessor; import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46330,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.extensions.processor.js.YUIJsCompressorProcessor; import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46332,
    "v2": "final String result = preProcessorExecutor.processAndMerge(filteredGroup.getResources(), cacheKey.isMinimize()); return applyPostProcessors(result);",
    "resolution": "final String result = preProcessorExecutor.processAndMerge(filteredGroup, cacheKey.isMinimize()); return applyPostProcessors(group, cacheKey, result);",
    "conflict": "final String result = preProcessorExecutor.processAndMerge(filteredGroup, cacheKey.isMinimize()); return doPostProcess(group, result, cacheKey);"
  },
  {
    "devdecision": "Manual",
    "id": 46334,
    "v2": "private String applyPostProcessors(final String content)",
    "resolution": "private String applyPostProcessors(final Group group, final CacheEntry cacheEntry, final String content)",
    "conflict": "private String applyPostProcessors(final Resource mergedResource, final Collection<? extends ResourceProcessor> processors, final String content)"
  },
  {
    "devdecision": "Version 2",
    "id": 46343,
    "v2": "protected boolean isEnabled(final Resource resource) {",
    "resolution": "protected boolean isEnabled(final Resource resource) {",
    "conflict": "public void process(final Resource resource, final Reader reader, final Writer writer) throws IOException { final ResourceProcessor processor = getDecoratedObject();"
  },
  {
    "devdecision": "Combination",
    "id": 46344,
    "v2": "extends AbstractProcessorDecoratorSupport<ResourcePreProcessor> { private static final Logger LOG = LoggerFactory.getLogger(ProcessorDecorator.class);",
    "resolution": "extends AbstractProcessorDecoratorSupport {",
    "conflict": "extends AbstractProcessorDecoratorSupport {"
  },
  {
    "devdecision": "Version 1",
    "id": 46353,
    "v2": "implements ResourcePreProcessor {",
    "resolution": "implements ResourceProcessor {",
    "conflict": "implements ResourceProcessor {"
  },
  {
    "devdecision": "Version 2",
    "id": 46357,
    "v2": "throws Exception { victim.processAndMerge(null, true);",
    "resolution": "throws Exception { victim.processAndMerge(null, true);",
    "conflict": "throws Exception { executor.processAndMerge(null, true);"
  },
  {
    "devdecision": "Manual",
    "id": 46360,
    "v2": "final List<Resource> resources = createResources(Resource.create(\"/uri\", ResourceType.JS)); final String result = victim.processAndMerge(resources, true);",
    "resolution": "final Group group = createGroup(Resource.create(\"/uri\", ResourceType.JS)); final String result = victim.processAndMerge(group, true);",
    "conflict": "final Group group = createGroup(Resource.create(\"/uri\", ResourceType.JS)); final String result = executor.processAndMerge(group, true);"
  },
  {
    "devdecision": "Manual",
    "id": 46365,
    "v2": "victim.processAndMerge(resources, true);",
    "resolution": "final Group group = new Group(\"group\").addResource(resource); victim.processAndMerge(group, true);",
    "conflict": "Group group = new Group(\"group\").addResource(resource); executor.processAndMerge(group, true);"
  },
  {
    "devdecision": "Combination",
    "id": 46368,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.TestProcessorsUtils;"
  },
  {
    "devdecision": "Manual",
    "id": 46370,
    "v2": "final ResourcePreProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor); final URL url = ResourcePreProcessor.class.getResource(\"copyright\");",
    "resolution": "final ResourceProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor); final URL url = ResourceProcessor.class.getResource(\"copyright\");",
    "conflict": "final ResourceProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor); final URL url = TestProcessorsUtils.class.getResource(\"copyright\");"
  },
  {
    "devdecision": "Combination",
    "id": 46371,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.TestProcessorsUtils;"
  },
  {
    "devdecision": "Combination",
    "id": 46372,
    "v2": "import ro.isdc.wro.model.resource.processor.ImportAware; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ImportAware; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46373,
    "v2": "private final ResourcePreProcessor lessProcessor;",
    "resolution": "private final ResourceProcessor lessProcessor;",
    "conflict": "private final ResourceProcessor lessProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46388,
    "v2": "import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46391,
    "v2": "import ro.isdc.wro.model.resource.locator.UriLocator; import ro.isdc.wro.util.WroTestUtils;",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.util.WroTestUtils;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 46392,
    "v2": "verify(mockUriLocator).locate(Mockito.anyString());",
    "resolution": "verify(mockUriLocator).getInputStream();",
    "conflict": "verify(mockUriLocator).getInputStream();"
  },
  {
    "devdecision": "Concatenation",
    "id": 46394,
    "v2": "import static org.mockito.Mockito.never; import static org.mockito.Mockito.verify;",
    "resolution": "import static org.mockito.Mockito.never; import static org.mockito.Mockito.verify;import static org.mockito.Mockito.mock;",
    "conflict": "import static org.mockito.Mockito.mock;"
  },
  {
    "devdecision": "Version 1",
    "id": 46407,
    "v2": "final List<UriLocator> locators = victim.getConfiguredStrategies();",
    "resolution": "final List<ResourceLocatorFactory> locators = victim.getConfiguredStrategies();",
    "conflict": "final List<ResourceLocatorFactory> locators = victim.getConfiguredStrategies();"
  },
  {
    "devdecision": "Version 1",
    "id": 46411,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46420,
    "v2": "private UriLocator mockUriLocator;",
    "resolution": "private ResourceLocator mockLocator;",
    "conflict": "private ResourceLocator mockLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 46422,
    "v2": "configureValidUriLocators(mockFilterConfig);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46423,
    "v2": "configureValidUriLocators(mockFilterConfig);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46424,
    "v2": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46425,
    "v2": "configureValidUriLocators(mockFilterConfig);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46426,
    "v2": "configureValidUriLocators(mockFilterConfig);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46427,
    "v2": "configureValidUriLocators(mockFilterConfig);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46428,
    "v2": "configureValidUriLocators(mockFilterConfig);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46429,
    "v2": "final Collection<ResourcePreProcessor> list = processorsFactory.getPreProcessors();",
    "resolution": "Collection<ResourceProcessor> list = processorsFactory.getPreProcessors();",
    "conflict": "Collection<ResourceProcessor> list = processorsFactory.getPreProcessors();"
  },
  {
    "devdecision": "Version 1",
    "id": 46434,
    "v2": "managerFactroy.setUriLocatorFactory(uriLocatorFactory);",
    "resolution": "managerFactroy.setLocatorFactory(resourceLocatorFactory);",
    "conflict": "managerFactroy.setLocatorFactory(resourceLocatorFactory);"
  },
  {
    "devdecision": "Version 1",
    "id": 46436,
    "v2": "final UriLocatorFactory uriLocatorFactory = new DefaultUriLocatorFactory(); final WroManagerFactory managerFactory = new BaseWroManagerFactory().setUriLocatorFactory(uriLocatorFactory);",
    "resolution": "final ResourceLocatorFactory resourceLocatorFactory = new DefaultResourceLocatorFactory(); WroManagerFactory managerFactory = new BaseWroManagerFactory().setLocatorFactory(resourceLocatorFactory);",
    "conflict": "final ResourceLocatorFactory resourceLocatorFactory = new DefaultResourceLocatorFactory(); WroManagerFactory managerFactory = new BaseWroManagerFactory().setLocatorFactory(resourceLocatorFactory);"
  },
  {
    "devdecision": "Combination",
    "id": 46440,
    "v2": "final UriLocatorFactory locatorFactory = manager.getUriLocatorFactory(); // using AtomicBoolean because we need to mutate this variable inside an anonymous class. final AtomicBoolean changeDetected = new AtomicBoolean(false);",
    "resolution": "final ResourceLocatorFactory locatorFactory = manager.getResourceLocatorFactory(); // using AtomicBoolean because we need to mutate this variable inside an anonymous class. final AtomicBoolean changeDetected = new AtomicBoolean(false);",
    "conflict": "final ResourceLocatorFactory locatorFactory = manager.getResourceLocatorFactory();"
  },
  {
    "devdecision": "Manual",
    "id": 46444,
    "v2": "private ResourcePostProcessor decorateProcessor(final ResourcePostProcessor processor) { final ResourcePostProcessor decorated = new DefaultProcessorDecorator(processor);",
    "resolution": "private ResourceProcessor decorateProcessor(final ResourceProcessor processor) { final ResourceProcessor decorated = new DefaultProcessorDecorator(processor);",
    "conflict": "private ResourceProcessor decorateProcessor(final ResourceProcessor processor) { final ResourceProcessor decorated = new ExceptionHandlingProcessorDecorator(processor);"
  },
  {
    "devdecision": "Manual",
    "id": 46448,
    "v2": "final Map<String, ResourcePreProcessor> preProcessorsMap = createMap(); for (final Entry<String, ResourcePreProcessor> entry : preProcessorsMap.entrySet()) {",
    "resolution": "final Map<String, ResourceProcessor> preProcessorsMap = createMap(); for (final Entry<String, ResourceProcessor> entry : preProcessorsMap.entrySet()) {",
    "conflict": "final Map<String, ResourceProcessor> preProcessorsMap = createMap(); for (Entry<String, ResourceProcessor> entry : preProcessorsMap.entrySet()) {"
  },
  {
    "devdecision": "Version 1",
    "id": 46453,
    "v2": "public static void compare(final InputStream input, final InputStream expected, final ResourcePostProcessor processor)",
    "resolution": "public static void compare(final InputStream input, final InputStream expected, final ResourceProcessor processor)",
    "conflict": "public static void compare(final InputStream input, final InputStream expected, final ResourceProcessor processor)"
  },
  {
    "devdecision": "Version 1",
    "id": 46458,
    "v2": "public boolean accept(final String uri) { return true; }",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 46459,
    "v2": "",
    "resolution": "",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.StringUtils; import ro.isdc.wro.util.WroUtil;"
  },
  {
    "devdecision": "Combination",
    "id": 46468,
    "v2": "for (final ResourcePostProcessor processor : processors) { stopWatch.start(\"Using \" + processor.toString());",
    "resolution": "for (final ResourceProcessor processor : processors) { stopWatch.start(\"Using \" + processor.toString());",
    "conflict": "for (final ResourceProcessor processor : processors) { stopWatch.start(\"Using \" + processor.getClass().getSimpleName());"
  },
  {
    "devdecision": "Manual",
    "id": 46478,
    "v2": "private ResourcePostProcessor decorateProcessor(final ResourcePostProcessor processor) { final ResourcePostProcessor decorated = new ExceptionHandlingProcessorDecorator(processor);",
    "resolution": "private ResourceProcessor decorateProcessor(final ResourceProcessor processor) { final ResourceProcessor decorated = new ExceptionHandlingProcessorDecorator(processor);",
    "conflict": "private ResourceProcessor decorateProcessor(final ResourceProcessor processor) { ResourceProcessor decorated = new ExceptionHandlingProcessorDecorator(processor);"
  },
  {
    "devdecision": "Combination",
    "id": 46486,
    "v2": "public final class YUIJsCompressorProcessor implements ResourcePostProcessor, ResourcePreProcessor {",
    "resolution": "public final class YUIJsCompressorProcessor implements ResourceProcessor {",
    "conflict": "public class YUIJsCompressorProcessor implements ResourceProcessor {"
  },
  {
    "devdecision": "Manual",
    "id": 46489,
    "v2": "final Transformer<String> toTargetFileName, final ResourcePreProcessor processor) {",
    "resolution": "final Transformer<String> toTargetFileName, final ResourceProcessor processor) {",
    "conflict": "final Transformer<String> toTargetFileName, final ResourceProcessor processor) throws IOException {"
  },
  {
    "devdecision": "Version 2",
    "id": 46490,
    "v2": "LOG.debug(\"Skip comparison because couldn't find the TARGET file \" + targetFile.getPath() + \"\\n. Original exception: \" + e.getCause());",
    "resolution": "LOG.debug(\"Skip comparison because couldn't find the TARGET file \" + targetFile.getPath() + \"\\n. Original exception: \" + e.getCause());",
    "conflict": "LOG.warn(\"Skip comparison because couldn't find the TARGET file \" + targetFile.getPath() + \"\\n. Original exception: \" + e.getCause());"
  },
  {
    "devdecision": "Manual",
    "id": 46502,
    "v2": "new BaseWroManagerFactory().setUriLocatorFactory(mockUriLocatorFactory).setResourceAuthorizationManager( mockAuthorizationManager)).build();",
    "resolution": "new BaseWroManagerFactory().setLocatorFactory(mockLocatorFactory).setResourceAuthorizationManager( mockAuthorizationManager)).build();",
    "conflict": "new BaseWroManagerFactory().setLocatorFactory(mockUriLocatorFactory)).setResourceAuthorizationManager( mockAuthorizationManager).build();"
  },
  {
    "devdecision": "Manual",
    "id": 46505,
    "v2": "private UriLocatorFactory locatorFactory; @Inject private Injector injector;",
    "resolution": "private ResourceLocatorFactory locatorFactory; @Inject private Injector injector;",
    "conflict": "private ResourceLocatorFactory locatorFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 46507,
    "v2": "//add only non abstract groups model.addGroup(group);",
    "resolution": "// add only non abstract groups groups.add(group);",
    "conflict": "// add only non abstract groups groups.add(group);"
  },
  {
    "devdecision": "Version 2",
    "id": 46511,
    "v2": "private static final String XML_SCHEMA_FILE = \"wro.xsd\";",
    "resolution": "private static final String XML_SCHEMA_FILE = \"wro.xsd\";",
    "conflict": "private static final String TAG_GROUP = \"group\";"
  },
  {
    "devdecision": "Combination",
    "id": 46528,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.SupportAware;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.SupportAware;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46530,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.SupportAware;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.SupportAware;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46533,
    "v2": "ResourcePreProcessor noOpProcessor = new ResourcePreProcessor() { public void process(final Resource resource, final Reader reader, final Writer writer)",
    "resolution": "ResourceProcessor noOpProcessor = new ResourceProcessor() { public void process(final Resource resource, final Reader reader, final Writer writer)",
    "conflict": "ResourceProcessor noOpProcessor = new ResourceProcessor() { public void process(Resource resource, Reader reader, Writer writer)"
  },
  {
    "devdecision": "Combination",
    "id": 46542,
    "v2": "@Override public final ResourcePreProcessor getDecoratedObject() {",
    "resolution": "@Override public final ResourceProcessor getDecoratedObject() {",
    "conflict": "public final ResourceProcessor getDecoratedObject() {"
  },
  {
    "devdecision": "Version 1",
    "id": 46548,
    "v2": "public static void compare(final Reader resultReader, final Reader expectedReader, final ResourcePostProcessor processor)",
    "resolution": "public static void compare(final Reader resultReader, final Reader expectedReader, final ResourceProcessor processor)",
    "conflict": "public static void compare(final Reader resultReader, final Reader expectedReader, final ResourceProcessor processor)"
  },
  {
    "devdecision": "Version 1",
    "id": 46561,
    "v2": "* @return an implementation of {@link UriLocator} which always return a valid stream which contains the resource uri *         as content.",
    "resolution": "* @return an implementation of {@link ResourceLocator} which always return a valid stream which contains the resource *         uri as content.",
    "conflict": "* @return an implementation of {@link ResourceLocator} which always return a valid stream which contains the resource *         uri as content."
  },
  {
    "devdecision": "Version 2",
    "id": 46598,
    "v2": "// should never happen (use debug level to suppres unuseful logs) LOG.debug(\"Error while chaining the request\", e);",
    "resolution": "// should never happen (use debug level to suppres unuseful logs) LOG.debug(\"Error while chaining the request\", e);",
    "conflict": "// should never happen LOG.error(\"Error while chaining the request: \" + HttpServletResponse.SC_NOT_FOUND);"
  },
  {
    "devdecision": "Combination",
    "id": 46599,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;",
    "conflict": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 46604,
    "v2": "",
    "resolution": "",
    "conflict": "/** * TODO: use new AuthorizedResourcesHolder to check acccess to resourceUri * Verifies that the user has access or not to the requested resource */"
  },
  {
    "devdecision": "Manual",
    "id": 46612,
    "v2": "css = IOUtils.toString(new AutoCloseInputStream(uriLocatorFactory.locate(resource.getUri())), configuration.getEncoding());",
    "resolution": "css = IOUtils.toString(new AutoCloseInputStream(resourceLocatorFactory.locate(resource.getUri())), configuration.getEncoding());",
    "conflict": "css = IOUtils.toString(resourceLocatorFactory.locate(resource.getUri()), configuration.getEncoding());"
  },
  {
    "devdecision": "Version 2",
    "id": 46628,
    "v2": "LOG.warn(\"Skip comparison because couldn't find the TARGET file \" + targetFile.getPath() + \"\\n. Original exception: \" + e.getCause());",
    "resolution": "LOG.warn(\"Skip comparison because couldn't find the TARGET file \" + targetFile.getPath() + \"\\n. Original exception: \" + e.getCause());",
    "conflict": "LOG.warn(\"Skip comparison because couldn't find the TARGET file \" + targetFile.getPath() + \"\\n. Original exception: \" + e.getCause(), e);"
  },
  {
    "devdecision": "Version 2",
    "id": 46639,
    "v2": "import ro.isdc.wro.manager.factory.WroManagerFactory; import ro.isdc.wro.manager.runnable.ReloadCacheRunnable; import ro.isdc.wro.manager.runnable.ReloadModelRunnable; import ro.isdc.wro.manager.runnable.ResourceWatcherRunnable;",
    "resolution": "import ro.isdc.wro.manager.factory.WroManagerFactory; import ro.isdc.wro.manager.runnable.ReloadCacheRunnable; import ro.isdc.wro.manager.runnable.ReloadModelRunnable; import ro.isdc.wro.manager.runnable.ResourceWatcherRunnable;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 46640,
    "v2": "private final SchedulerHelper cacheSchedulerHelper; private final SchedulerHelper resourceWatcherSchedulerHelper;",
    "resolution": "private final SchedulerHelper cacheSchedulerHelper; private final SchedulerHelper resourceWatcherSchedulerHelper;",
    "conflict": "@Inject private HashStrategy hashStrategy;"
  },
  {
    "devdecision": "Version 2",
    "id": 46641,
    "v2": "* @deprecated use {@link BaseWroManagerFactory#setHashStrategy(HashStrategy)} * @param hashBuilder *          the hashBuilder to set",
    "resolution": "* @deprecated use {@link BaseWroManagerFactory#setHashStrategy(HashStrategy)} * @param hashBuilder *          the hashBuilder to set",
    "conflict": "* @param hashBuilder the hashBuilder to set"
  },
  {
    "devdecision": "Combination",
    "id": 46643,
    "v2": "LOG.debug(\"No locators configured. Using Default locator factory.\"); return new DefaultUriLocatorFactory();",
    "resolution": "LOG.debug(\"No locators configured. Using Default locator factory.\"); return new DefaultResourceLocatorFactory();",
    "conflict": "LOG.info(\"No locators configured. Using Default locator factory.\"); return new DefaultResourceLocatorFactory();"
  },
  {
    "devdecision": "Version 1",
    "id": 46647,
    "v2": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", (ResourcePreProcessor) processor);",
    "resolution": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);",
    "conflict": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);"
  },
  {
    "devdecision": "Version 1",
    "id": 46648,
    "v2": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", (ResourcePreProcessor) processor);",
    "resolution": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);",
    "conflict": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);"
  },
  {
    "devdecision": "Version 1",
    "id": 46649,
    "v2": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", (ResourcePreProcessor) processor);",
    "resolution": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);",
    "conflict": "WroTestUtils.compareFromDifferentFoldersByExtension(testFolder, expectedFolder, \"js\", processor);"
  },
  {
    "devdecision": "Version 1",
    "id": 46662,
    "v2": "final FilterChain chain) { LOG.debug(\"Exception occured\", e);",
    "resolution": "final FilterChain chain) { LOG.debug(\"RuntimeException occured\", e);",
    "conflict": "final FilterChain chain) { LOG.debug(\"RuntimeException occured\", e);"
  },
  {
    "devdecision": "Combination",
    "id": 46674,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.processor.ProcessorsUtils; import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46678,
    "v2": "import ro.isdc.wro.model.resource.locator.UriLocator; import ro.isdc.wro.model.resource.locator.UrlUriLocator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator;"
  },
  {
    "devdecision": "Manual",
    "id": 46684,
    "v2": "import ro.isdc.wro.model.resource.locator.UriLocator; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46686,
    "v2": "return new InjectorBuilder(new BaseWroManagerFactory().setUriLocatorFactory(mockUriLocatorFactory)).setResourceAuthorizationManager(",
    "resolution": "return new InjectorBuilder(new BaseWroManagerFactory().setResourceLocatorFactory(mockUriLocatorFactory)).setResourceAuthorizationManager( mockAuthorizationManager).build();",
    "conflict": "return new InjectorBuilder().setWroManager( new BaseWroManagerFactory().setResourceLocatorFactory(mockUriLocatorFactory).create()).setResourceAuthorizationManager("
  },
  {
    "devdecision": "Manual",
    "id": 46687,
    "v2": "final Injector injector = new InjectorBuilder( new BaseWroManagerFactory().setUriLocatorFactory(mockUriLocatorFactory)).setResourceAuthorizationManager(",
    "resolution": "final Injector injector = new InjectorBuilder( new BaseWroManagerFactory().setResourceLocatorFactory(mockUriLocatorFactory)).setResourceAuthorizationManager(",
    "conflict": "final Injector injector = new InjectorBuilder().setWroManager( new BaseWroManagerFactory().setResourceLocatorFactory(mockUriLocatorFactory).create()).setResourceAuthorizationManager("
  },
  {
    "devdecision": "Version 1",
    "id": 46696,
    "v2": "final ProcessorsFactory processorsFactory = wroManager.getProcessorsFactory(); Collection<ResourcePostProcessor> postProcessors = processorsFactory.getPostProcessors();",
    "resolution": "ProcessorsFactory processorsFactory = wroManager.getProcessorsFactory(); Collection<ResourceProcessor> postProcessors = processorsFactory.getPostProcessors();",
    "conflict": "ProcessorsFactory processorsFactory = wroManager.getProcessorsFactory(); Collection<ResourceProcessor> postProcessors = processorsFactory.getPostProcessors();"
  },
  {
    "devdecision": "Version 1",
    "id": 46701,
    "v2": "contextPath = (String) ServletContext.class.getMethod(\"getContextPath\", new Class<?>[] {}).invoke( filterConfig.getServletContext(), new Object[] {});",
    "resolution": "contextPath = (String)ServletContext.class.getMethod(\"getContextPath\", new Class<?>[] {}).invoke( filterConfig.getServletContext(), new Object[] {});",
    "conflict": "contextPath = (String)ServletContext.class.getMethod(\"getContextPath\", new Class<?>[] {}).invoke( filterConfig.getServletContext(), new Object[] {});"
  },
  {
    "devdecision": "Version 1",
    "id": 46705,
    "v2": "throws ServletException { }",
    "resolution": "throws ServletException {}",
    "conflict": "throws ServletException {}"
  },
  {
    "devdecision": "Manual",
    "id": 46713,
    "v2": "private ReadOnlyContext context;",
    "resolution": "@Inject private ReadOnlyContext context;",
    "conflict": "private Context context;"
  },
  {
    "devdecision": "Combination",
    "id": 46739,
    "v2": "manager.setHashStrategy(hashStrategy); manager.setUriLocatorFactory(uriLocatorFactory);",
    "resolution": "manager.setResourceLocatorFactory(resourceLocatorFactory);",
    "conflict": "manager.setHashBuilder(hashStrategy); manager.setResourceLocatorFactory(resourceLocatorFactory);"
  },
  {
    "devdecision": "Manual",
    "id": 46741,
    "v2": "* @param uriLocatorFactory *          the uriLocatorFactory to set",
    "resolution": "* @param resourceLocatorFactory the uriLocatorFactory to set",
    "conflict": "* @param resourceLocatorFactory the uriLocatorFactory to set"
  },
  {
    "devdecision": "Combination",
    "id": 46756,
    "v2": "import static junit.framework.Assert.assertEquals; import static junit.framework.Assert.assertTrue;  import java.io.InputStream;",
    "resolution": "import static junit.framework.Assert.assertEquals; import static junit.framework.Assert.assertTrue;",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 46757,
    "v2": "import ro.isdc.wro.model.resource.Resource;",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;import ro.isdc.wro.model.resource.Resource;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 46760,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46773,
    "v2": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "resolution": "createManager();",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 46775,
    "v2": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "resolution": "createManager();",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 46776,
    "v2": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "resolution": "createManager();",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 46777,
    "v2": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "resolution": "createManager();",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 46778,
    "v2": "createManager();  configureValidUriLocators(mockFilterConfig);",
    "resolution": "createManager();",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46782,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46783,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46785,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46786,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46787,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46790,
    "v2": "private boolean handledWithRequestHandler(final HttpServletRequest request, final HttpServletResponse response)",
    "resolution": "private boolean handledWithRequestHandler(final HttpServletRequest request, final HttpServletResponse response)",
    "conflict": "private boolean handledWithRequestHandler(final HttpServletRequest request, final HttpServletResponse response)"
  },
  {
    "devdecision": "Manual",
    "id": 46792,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46793,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46794,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46796,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46797,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46802,
    "v2": "private HashBuilder hashBuilder;",
    "resolution": "private HashStrategy hashStrategy; @Inject private Injector injector;",
    "conflict": "private HashStrategy hashStrategy; @Inject private Injector injector;"
  },
  {
    "devdecision": "Version 1",
    "id": 46805,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46808,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46810,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46815,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46818,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46819,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46834,
    "v2": "* @param uriLocatorFactory *          the uriLocatorFactory to set",
    "resolution": "import java.io.OutputStream;",
    "conflict": "* @param resourceLocatorFactory the resourceLocatorFactory to set"
  },
  {
    "devdecision": "Combination",
    "id": 46836,
    "v2": "manager.setHashBuilder(hashStrategy); manager.setUriLocatorFactory(uriLocatorFactory);",
    "resolution": "manager.setHashBuilder(hashStrategy); manager.setResourceLocatorFactory(resourceLocatorFactory);",
    "conflict": "manager.setHashBuilder(hashBuilder); manager.setResourceLocatorFactory(resourceLocatorFactory);"
  },
  {
    "devdecision": "Combination",
    "id": 46848,
    "v2": "implements RequestHandler { private static final Logger LOG = LoggerFactory.getLogger(ReloadModelRequestHandler.class);",
    "resolution": "extends RequestHandlerSupport { private static final Logger LOG = LoggerFactory.getLogger(ReloadModelRequestHandler.class);",
    "conflict": "extends RequestHandlerSupport { private static final Logger LOG = LoggerFactory.getLogger(ReloadCacheRequestHandler.class);"
  },
  {
    "devdecision": "Manual",
    "id": 46854,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.WroUtil;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.WroUtil;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46855,
    "v2": "public static final Pattern PATTERN = Pattern.compile(WroUtil.loadRegexpWithKey(\"comment.singleline\"), Pattern.MULTILINE);",
    "resolution": "public static final Pattern PATTERN = Pattern.compile(WroUtil.loadRegexpWithKey(\"comment.singleline\"), Pattern.MULTILINE);",
    "conflict": "public static final Pattern PATTERN = Pattern.compile(\"[\\\\t ]*//.*?$\", Pattern.MULTILINE);"
  },
  {
    "devdecision": "Manual",
    "id": 46856,
    "v2": "import ro.isdc.wro.WroRuntimeException; import ro.isdc.wro.config.Context; import ro.isdc.wro.model.group.Inject;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.group.Inject;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46860,
    "v2": "private UriLocatorFactory uriLocatorFactory;",
    "resolution": "@Inject private ResourceLocatorFactory resourceLocatorFactory;",
    "conflict": "private ResourceLocatorFactory resourceLocatorFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 46864,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.WroUtil;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.WroUtil;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46866,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.WroUtil;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.WroUtil;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46867,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.WroUtil;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.WroUtil;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46870,
    "v2": "import java.io.IOException; import java.io.InputStream; import java.io.Reader; import java.io.Writer;",
    "resolution": "import java.io.IOException; import java.io.InputStream;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 46877,
    "v2": "private final String PROXY_RESOURCE_PATH = \"classpath:ro/isdc/wro/model/resource/processor/dataUri/proxyImage/\"; private ResourcePreProcessor processor;",
    "resolution": "private final String PROXY_RESOURCE_PATH = \"classpath:ro/isdc/wro/model/resource/processor/dataUri/proxyImage/\"; private ResourceProcessor processor;",
    "conflict": "private ResourceProcessor processor;"
  },
  {
    "devdecision": "Manual",
    "id": 46878,
    "v2": "public void init() throws Exception {",
    "resolution": "@Before public void init() throws Exception {",
    "conflict": "public void setUp() { Context.set(Context.standaloneContext());"
  },
  {
    "devdecision": "Combination",
    "id": 46881,
    "v2": "import java.io.IOException; import java.io.InputStream; import java.util.ArrayList;",
    "resolution": "import java.io.IOException; import java.util.ArrayList;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 46894,
    "v2": "public static <T> Collection<T> filterProcessorsToApply(final boolean minimize, final ResourceType type, final Collection<T> availableProcessors) {",
    "resolution": "public static Collection<ResourceProcessor> filterProcessorsToApply(final boolean minimize, final ResourceType type, final Collection<? extends ResourceProcessor> availableProcessors) {",
    "conflict": "public static Collection<ResourceProcessor> filterProcessorsToApply(final boolean minimize, final ResourceType type, final Collection<? extends ResourceProcessor> availableProcessors) {"
  },
  {
    "devdecision": "Combination",
    "id": 46897,
    "v2": "import ro.isdc.wro.model.resource.processor.ProcessorsProvider; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ProcessorsProvider; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46899,
    "v2": "public static <T> List<T> getListOfItems(final String itemsAsString, final Map<String, T> map) { Validate.notNull(map);",
    "resolution": "private static List<ResourceProcessor> getListOfItems(final String itemsAsString, final Map<String, ResourceProcessor> map) {",
    "conflict": "private static List<ResourceProcessor> getListOfItems(final String itemsAsString, final Map<String, ResourceProcessor> map) {"
  },
  {
    "devdecision": "Manual",
    "id": 46906,
    "v2": "import ro.isdc.wro.model.resource.processor.ProcessorsProvider; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ProcessorsProvider; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 46911,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ProcessorsUtils; import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46924,
    "v2": "processor = (T) ExtensionsAwareProcessorDecorator.decorate((ResourcePreProcessor) processor).addExtension( extension);",
    "resolution": "processor = ExtensionsAwareProcessorDecorator.decorate(processor).addExtension(extension);",
    "conflict": "processor = ExtensionsAwareProcessorDecorator.decorate(processor).addExtension(extension);"
  },
  {
    "devdecision": "Version 1",
    "id": 46930,
    "v2": "implements ResourcePostProcessor, ResourcePreProcessor { private static final Logger LOG = LoggerFactory.getLogger(YUICssCompressorProcessor.class);",
    "resolution": "implements ResourceProcessor {",
    "conflict": "implements ResourceProcessor {"
  },
  {
    "devdecision": "Version 2",
    "id": 46932,
    "v2": "//keep js unchanged if it contains errors -> this should be configurable LOG.error(\"Exception while applying \" + getClass().getSimpleName() + \" processor on the \" + resourceUri",
    "resolution": "//keep js unchanged if it contains errors -> this should be configurable LOG.error(\"Exception while applying \" + getClass().getSimpleName() + \" processor on the \" + resourceUri",
    "conflict": "// keep js unchanged if it contains errors -> this should be configurable LOG.warn(\"Exception while applying \" + getClass().getSimpleName() + \" processor on the \" + resourceUri"
  },
  {
    "devdecision": "Version 1",
    "id": 46933,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46934,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46935,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46936,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46937,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46938,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46940,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46941,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46942,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46943,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46945,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46946,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46950,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46951,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46952,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46953,
    "v2": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.ResourceType; import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46959,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46960,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46965,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExceptionHandlingProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 46966,
    "v2": "private String doPostProcess(final String content, final CacheEntry cacheEntry) throws IOException {",
    "resolution": "private String doPostProcess(final Group group, final String content, final CacheEntry cacheEntry) throws IOException {",
    "conflict": "private String doPostProcess(final Group group, final String content, final CacheEntry cacheEntry) throws IOException {"
  },
  {
    "devdecision": "Combination",
    "id": 46973,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.support.ProcessorDecorator;"
  },
  {
    "devdecision": "Combination",
    "id": 46974,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.support.ProcessorDecorator;"
  },
  {
    "devdecision": "Combination",
    "id": 46975,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.support.AbstractProcessorDecoratorSupport;"
  },
  {
    "devdecision": "Combination",
    "id": 46985,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.decorator.CopyrightKeeperProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.CopyrightKeeperProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.CopyrightKeeperProcessorDecorator;"
  },
  {
    "devdecision": "Combination",
    "id": 46990,
    "v2": "final ResourcePreProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor); final URL url = TestProcessorsUtils.class.getResource(\"copyright\");",
    "resolution": "final ResourceProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor); final URL url = TestProcessorsUtils.class.getResource(\"copyright\");",
    "conflict": "final ResourceProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor); final URL url = getClass().getResource(\"copyright\");"
  },
  {
    "devdecision": "Version 1",
    "id": 46991,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.decorator.ProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 46994,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.decorator.CopyrightKeeperProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.CopyrightKeeperProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.CopyrightKeeperProcessorDecorator;"
  },
  {
    "devdecision": "Combination",
    "id": 46995,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExtensionsAwareProcessorDecorator; import ro.isdc.wro.model.resource.processor.decorator.ProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.decorator.ExtensionsAwareProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 46999,
    "v2": "wroManagerFactory.onCachePeriodChanged(valueAsLong(event.getNewValue()));",
    "resolution": "wroManagerFactory.onCachePeriodChanged(valueAsLong(event.getNewValue()));",
    "conflict": "final long value = Long.valueOf(String.valueOf(event.getNewValue())).longValue(); wroManagerFactory.onCachePeriodChanged(value);"
  },
  {
    "devdecision": "Version 2",
    "id": 47000,
    "v2": "wroManagerFactory.onModelPeriodChanged(valueAsLong(event.getNewValue()));",
    "resolution": "wroManagerFactory.onModelPeriodChanged(valueAsLong(event.getNewValue()));",
    "conflict": "final long value = Long.valueOf(String.valueOf(event.getNewValue())).longValue(); wroManagerFactory.onModelPeriodChanged(value);"
  },
  {
    "devdecision": "Version 1",
    "id": 47005,
    "v2": "} finally { // remove the handler, it is not needed anymore expandedHandler.setWildcardExpanderHandler(null);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 47007,
    "v2": "private String computeBaseNameFolder(final Resource resource, final UriLocator uriLocator, final WildcardExpanderHandlerAware expandedHandler) { // Find the baseName",
    "resolution": "private String computeBaseNameFolder(final Resource resource) {",
    "conflict": "private String computeBaseNameFolder(final Resource resource) {"
  },
  {
    "devdecision": "Version 1",
    "id": 47009,
    "v2": "throws Exception {",
    "resolution": "throws Exception { try {",
    "conflict": "throws Exception { try {"
  },
  {
    "devdecision": "Version 1",
    "id": 47011,
    "v2": "final String uri = String.format(ClasspathUriLocator.PREFIX + \"%s/expander/file1.js\", WroUtil.toPackageAsFolder(getClass()));",
    "resolution": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/file1.js\", WroUtil.toPackageAsFolder(getClass()));",
    "conflict": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/file1.js\", WroUtil.toPackageAsFolder(getClass()));"
  },
  {
    "devdecision": "Version 1",
    "id": 47012,
    "v2": "final String uri = String.format(ClasspathUriLocator.PREFIX + \"%s/expander/INVALID.*\", WroUtil.toPackageAsFolder(getClass()));",
    "resolution": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/INVALID.*\", WroUtil.toPackageAsFolder(getClass()));",
    "conflict": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/INVALID.*\", WroUtil.toPackageAsFolder(getClass()));"
  },
  {
    "devdecision": "Version 1",
    "id": 47013,
    "v2": "final String uri = String.format(ClasspathUriLocator.PREFIX + \"%s/expander/?cript1.js\", WroUtil.toPackageAsFolder(getClass()));",
    "resolution": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/?cript1.js\", WroUtil.toPackageAsFolder(getClass()));",
    "conflict": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/?cript1.js\", WroUtil.toPackageAsFolder(getClass()));"
  },
  {
    "devdecision": "Version 1",
    "id": 47014,
    "v2": "final String uri = String.format(ClasspathUriLocator.PREFIX + \"%s/expander/*.js\", WroUtil.toPackageAsFolder(getClass()));",
    "resolution": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/*.js\", WroUtil.toPackageAsFolder(getClass()));",
    "conflict": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/*.js\", WroUtil.toPackageAsFolder(getClass()));"
  },
  {
    "devdecision": "Version 1",
    "id": 47015,
    "v2": "final String uri = String.format(ClasspathUriLocator.PREFIX + \"%s/expander/subfolder/**.js\", WroUtil.toPackageAsFolder(getClass()));",
    "resolution": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/subfolder/**.js\", WroUtil.toPackageAsFolder(getClass()));",
    "conflict": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/subfolder/**.js\", WroUtil.toPackageAsFolder(getClass()));"
  },
  {
    "devdecision": "Version 1",
    "id": 47017,
    "v2": "final String uri = String.format(ClasspathUriLocator.PREFIX + \"%s/expander/order/**.js\", WroUtil.toPackageAsFolder(getClass()));",
    "resolution": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/order/**.js\", WroUtil.toPackageAsFolder(getClass()));",
    "conflict": "final String uri = String.format(ClasspathResourceLocator.PREFIX + \"%s/expander/order/**.js\", WroUtil.toPackageAsFolder(getClass()));"
  },
  {
    "devdecision": "Version 1",
    "id": 47036,
    "v2": "})); map.put(RubySassCssProcessor.ALIAS, new LazyProcessorDecorator(new LazyInitializer<ResourcePreProcessor>() {",
    "resolution": "})); map.put(RubySassCssProcessor.ALIAS, new LazyProcessorDecorator(new LazyInitializer<ResourceProcessor>() {",
    "conflict": "})); map.put(RubySassCssProcessor.ALIAS, new LazyProcessorDecorator(new LazyInitializer<ResourceProcessor>() {"
  },
  {
    "devdecision": "Version 2",
    "id": 47037,
    "v2": "",
    "resolution": "",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 47042,
    "v2": "implements ResourcePreProcessor { public static final String ALIAS = \"consoleStripper\";",
    "resolution": "implements ResourceProcessor { public static final String ALIAS = \"consoleStripper\";",
    "conflict": "implements ResourceProcessor { public static final String ALIAS = \"consoleStripperProcessor\";"
  },
  {
    "devdecision": "Combination",
    "id": 47047,
    "v2": "manager.setUriLocatorFactory(uriLocatorFactory);",
    "resolution": "manager.setResourceLocatorFactory(resourceLocatorFactory);",
    "conflict": "manager.registerCacheChangeListener(cacheChangeCallback); manager.setResourceLocatorFactory(resourceLocatorFactory);"
  },
  {
    "devdecision": "Combination",
    "id": 47048,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.http.support.RedirectedStreamServletResponseWrapper; import ro.isdc.wro.util.WroUtil;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.http.support.RedirectedStreamServletResponseWrapper; import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.util.WroUtil;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator;"
  },
  {
    "devdecision": "Manual",
    "id": 47053,
    "v2": "Injector injector = InjectorBuilder.create(new BaseWroManagerFactory()).build(); final List<ResourcePreProcessor> processors = getProcessorsList();",
    "resolution": "Injector injector = InjectorBuilder.create(new BaseWroManagerFactory()).build(); final List<ResourceProcessor> processors = getProcessorsList();",
    "conflict": "Injector injector = new InjectorBuilder().build(); List<ResourceProcessor> processors = getProcessorsList();"
  },
  {
    "devdecision": "Version 1",
    "id": 47058,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 47061,
    "v2": "private String doPostProcess(final String content, final CacheEntry cacheEntry) throws IOException {",
    "resolution": "private String doPostProcess(final Group group, final String content, final CacheEntry cacheEntry) throws IOException {",
    "conflict": "private String doPostProcess(final Group group, final ResourceType resourceType, final String content, final boolean minimize) throws IOException {"
  },
  {
    "devdecision": "Manual",
    "id": 47066,
    "v2": "final Collection<ResourcePreProcessor> processors = ProcessorsUtils.filterProcessorsToApply(minimize, resource.getType(), processorsFactory.getPreProcessors());",
    "resolution": "final Collection<ResourceProcessor> processors = ProcessorsUtils.filterProcessorsToApply(minimize, resource.getType(), processorsFactory.getPreProcessors());",
    "conflict": "final Collection<ResourceProcessor> processors = ProcessorsUtils.filterProcessorsToApply(minimize, resource.getType(), processorsFactory.getPreProcessors());"
  },
  {
    "devdecision": "Manual",
    "id": 47067,
    "v2": "import ro.isdc.wro.model.group.processor.InjectorAwareDecorator; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 47080,
    "v2": "public static void runConcurrently(final Callable<Void> task, final int times) throws Exception {",
    "resolution": "public static void runConcurrently(final Callable<Void> task, final int times) throws Exception {",
    "conflict": "public static void runConcurrently(final Callable<Void> task) throws Exception {"
  },
  {
    "devdecision": "Version 1",
    "id": 47082,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.SimpleUriLocatorFactory; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 47084,
    "v2": "Assert.assertEquals( JSMinProcessor.class, ((ProcessorDecorator) processorsFactory.getPostProcessors().iterator().next()).getDecoratedObject().getClass());",
    "resolution": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());",
    "conflict": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());"
  },
  {
    "devdecision": "Version 1",
    "id": 47085,
    "v2": "Assert.assertEquals( JSMinProcessor.class, ((ProcessorDecorator) processorsFactory.getPostProcessors().iterator().next()).getDecoratedObject().getClass());",
    "resolution": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());",
    "conflict": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());"
  },
  {
    "devdecision": "Combination",
    "id": 47101,
    "v2": "stopWatch.start(\"parseStream\"); script = new GroovyShell().parse(new InputStreamReader(getModelResourceAsStream()));",
    "resolution": "stopWatch.start(\"parseStream\"); final InputStream configResource = getModelResourceLocator().getInputStream(); script = new GroovyShell().parse(new InputStreamReader(configResource));",
    "conflict": "final InputStream configResource = getModelResourceLocator().getInputStream(); script = new GroovyShell().parse(new InputStreamReader(configResource));"
  },
  {
    "devdecision": "Concatenation",
    "id": 47102,
    "v2": "import ro.isdc.wro.util.WroTestUtils;",
    "resolution": "import ro.isdc.wro.util.WroTestUtils;import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;"
  },
  {
    "devdecision": "Version 1",
    "id": 47108,
    "v2": "Assert.assertEquals( JSMinProcessor.class, ((ProcessorDecorator) processorsFactory.getPostProcessors().iterator().next()).getDecoratedObject().getClass());",
    "resolution": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());",
    "conflict": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());"
  },
  {
    "devdecision": "Version 1",
    "id": 47109,
    "v2": "Assert.assertEquals( JSMinProcessor.class, ((ProcessorDecorator) processorsFactory.getPostProcessors().iterator().next()).getDecoratedObject().getClass());",
    "resolution": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());",
    "conflict": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());"
  },
  {
    "devdecision": "Version 1",
    "id": 47113,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 47117,
    "v2": "Assert.assertEquals( JSMinProcessor.class, ((ProcessorDecorator) processorsFactory.getPostProcessors().iterator().next()).getDecoratedProcessor().getClass());",
    "resolution": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());",
    "conflict": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());"
  },
  {
    "devdecision": "Version 1",
    "id": 47118,
    "v2": "Assert.assertEquals( JSMinProcessor.class, ((ProcessorDecorator) processorsFactory.getPostProcessors().iterator().next()).getDecoratedProcessor().getClass());",
    "resolution": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());",
    "conflict": "Assert.assertEquals(JSMinProcessor.class, processorsFactory.getPostProcessors().iterator().next().getClass());"
  },
  {
    "devdecision": "Combination",
    "id": 47119,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.ExtensionsAwareProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.ExtensionsAwareProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 47120,
    "v2": "public void cannotAcceptExtensionAwareConfigurationForPostProcessors() { final Map<String, ResourcePreProcessor> map = new HashMap<String, ResourcePreProcessor>();",
    "resolution": "public void shouldDecorateWithExtensionAwareProcessorDecorator() { final Map<String, ResourceProcessor> map = new HashMap<String, ResourceProcessor>();",
    "conflict": "public void shouldDecorateWithExtensionAwareProcessorDecorator() { final Map<String, ResourceProcessor> map = new HashMap<String, ResourceProcessor>();"
  },
  {
    "devdecision": "Combination",
    "id": 47122,
    "v2": "@Inject private UriLocatorFactory uriLocatorFactory;",
    "resolution": "@Inject private ResourceLocatorFactory resourceLocatorFactory;",
    "conflict": "private ResourceLocatorFactory resourceLocatorFactory;"
  },
  {
    "devdecision": "Version 1",
    "id": 47123,
    "v2": "public final WroManager setUriLocatorFactory(final UriLocatorFactory uriLocatorFactory) { this.uriLocatorFactory = uriLocatorFactory;",
    "resolution": "public WroManager setResourceLocatorFactory(final ResourceLocatorFactory resourceLocatorFactory) { this.resourceLocatorFactory = resourceLocatorFactory;",
    "conflict": "public WroManager setResourceLocatorFactory(final ResourceLocatorFactory resourceLocatorFactory) { this.resourceLocatorFactory = resourceLocatorFactory;"
  },
  {
    "devdecision": "Version 1",
    "id": 47124,
    "v2": "public final CacheStrategy<CacheEntry, ContentHashEntry> getCacheStrategy() { return cacheStrategy;",
    "resolution": "public ResourceLocatorFactory getResourceLocatorFactory() { return resourceLocatorFactory;",
    "conflict": "public ResourceLocatorFactory getResourceLocatorFactory() { return resourceLocatorFactory;"
  },
  {
    "devdecision": "Version 1",
    "id": 47125,
    "v2": "public final UriLocatorFactory getUriLocatorFactory() { return uriLocatorFactory;",
    "resolution": "public CacheStrategy<CacheEntry, ContentHashEntry> getCacheStrategy() { return cacheStrategy;",
    "conflict": "public CacheStrategy<CacheEntry, ContentHashEntry> getCacheStrategy() { return cacheStrategy;"
  },
  {
    "devdecision": "Concatenation",
    "id": 47126,
    "v2": "import ro.isdc.wro.model.group.Inject;",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.ServletContextResourceLocator;import ro.isdc.wro.model.group.Inject;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.ServletContextResourceLocator;"
  },
  {
    "devdecision": "Version 2",
    "id": 47130,
    "v2": "map.put(GroupExtractor.class, groupExtractor);",
    "resolution": "map.put(GroupExtractor.class, groupExtractor);",
    "conflict": "map.put(ResourceLocatorFactory.class, resourceLocatorFactory); map.put(ProcessorsFactory.class, processorsFactory); map.put(NamingStrategy.class, namingStrategy);"
  },
  {
    "devdecision": "Combination",
    "id": 47131,
    "v2": "import ro.isdc.wro.model.group.Inject; import ro.isdc.wro.model.resource.locator.wildcard.WildcardUriLocatorSupport;",
    "resolution": "import ro.isdc.wro.model.group.Inject; import ro.isdc.wro.model.resource.locator.ResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator;"
  },
  {
    "devdecision": "Version 2",
    "id": 47132,
    "v2": "@Inject private Context context;",
    "resolution": "@Inject private Context context;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 47137,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.support.ProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.support.ProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47138,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.support.ProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.support.ProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 47140,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 47143,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.DefaultUriLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactoryDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.DefaultResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactoryDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 47144,
    "v2": "Assert.assertNotNull(sample.processorsFactory); Assert.assertNotNull(sample.uriLocatorFactor);",
    "resolution": "Assert.assertNull(sample.processorsFactory); Assert.assertNull(sample.resourceLocatorFactory);",
    "conflict": "Assert.assertNull(sample.processorsFactory); Assert.assertNull(sample.resourceLocatorFactor);"
  },
  {
    "devdecision": "Manual",
    "id": 47146,
    "v2": "Assert.assertSame(processorsFactory, ((ProcessorsFactoryDecorator) sample.processorsFactory).getDecoratedObject()); Assert.assertSame(uriLocatorFactory, ((UriLocatorFactoryDecorator) sample.uriLocatorFactor).getDecoratedObject());",
    "resolution": "Assert.assertSame(processorsFactory, ((ProcessorsFactoryDecorator) sample.processorsFactory).getDecoratedObject()); Assert.assertSame(resourceLocatorFactory, ((UriLocatorFactoryDecorator) sample.resourceLocatorFactory).getDecoratedObject());",
    "conflict": "Assert.assertSame(processorsFactory, sample.processorsFactory); Assert.assertSame(resourceLocatorFactory, sample.resourceLocatorFactor);"
  },
  {
    "devdecision": "Manual",
    "id": 47147,
    "v2": "final List<Resource> resources = createResources(Resource.create(\"/uri\", ResourceType.JS)); final String result = executor.processAndMerge(resources, true);",
    "resolution": "final Group group = createGroup(Resource.create(\"/uri\", ResourceType.JS)); final String result = executor.processAndMerge(group, true);",
    "conflict": "final Group group = createGroup(Resource.create(\"uri\", ResourceType.JS)); final String result = executor.processAndMerge(group, true);"
  },
  {
    "devdecision": "Manual",
    "id": 47155,
    "v2": "Collection<ResourcePreProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); assertEquals(1, output.size());",
    "resolution": "Collection<? extends ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(1, output.size());",
    "conflict": "Collection<ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(1, output.size());"
  },
  {
    "devdecision": "Manual",
    "id": 47156,
    "v2": "Collection<ResourcePreProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); assertEquals(2, output.size());",
    "resolution": "Collection<? extends ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(2, output.size());",
    "conflict": "Collection<ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(2, output.size());"
  },
  {
    "devdecision": "Manual",
    "id": 47157,
    "v2": "Collection<ResourcePreProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); assertEquals(0, output.size());",
    "resolution": "Collection<? extends ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(0, output.size());",
    "conflict": "Collection<ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(0, output.size());"
  },
  {
    "devdecision": "Manual",
    "id": 47158,
    "v2": "Collection<ResourcePreProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); assertEquals(1, output.size());",
    "resolution": "Collection<? extends ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(1, output.size());",
    "conflict": "Collection<ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(1, output.size());"
  },
  {
    "devdecision": "Manual",
    "id": 47159,
    "v2": "Collection<ResourcePreProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); assertEquals(1, output.size());",
    "resolution": "Collection<? extends ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(1, output.size());",
    "conflict": "Collection<ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.CSS, input); Assert.assertEquals(1, output.size());"
  },
  {
    "devdecision": "Version 1",
    "id": 47160,
    "v2": "final Collection<ResourcePreProcessor> output = ProcessorsUtils.filterProcessorsToApply(false, ResourceType.JS, input); assertEquals(0, output.size());",
    "resolution": "final Collection<ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(false, ResourceType.JS, input); Assert.assertEquals(0, output.size());",
    "conflict": "final Collection<ResourceProcessor> output = ProcessorsUtils.filterProcessorsToApply(false, ResourceType.JS, input); Assert.assertEquals(0, output.size());"
  },
  {
    "devdecision": "Version 1",
    "id": 47161,
    "v2": "Collection<ResourcePreProcessor> actual = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.JS, input); assertEquals(3, actual.size());",
    "resolution": "Collection<ResourceProcessor> actual = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.JS, input); Assert.assertEquals(3, actual.size());",
    "conflict": "Collection<ResourceProcessor> actual = ProcessorsUtils.filterProcessorsToApply(true, ResourceType.JS, input); Assert.assertEquals(3, actual.size());"
  },
  {
    "devdecision": "Manual",
    "id": 47165,
    "v2": "protected void contributePostProcessors(final Map<String, ResourcePostProcessor> map) { populateMapWithExtensionsPostProcessors(map);",
    "resolution": "@Override protected void contributePreProcessors(final Map<String, ResourceProcessor> map) { populateMapWithExtensionsProcessors(map);",
    "conflict": "protected void contributePreProcessors(final Map<String, ResourceProcessor> map) { pupulateMapWithExtensionsProcessors(map);"
  },
  {
    "devdecision": "Version 1",
    "id": 47174,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 47208,
    "v2": "final String actual = jarStreamLocator.getJarFile(new File(\"file:path/to/file!one/two/three.class\")).getPath(); final String expected = FilenameUtils.separatorsToSystem(\"path/to/file\"); Assert.assertEquals(expected, actual);",
    "resolution": "final String actual = jarStreamLocator.getJarFile(new File(\"file:path/to/file!one/two/three.class\")).getPath(); final String expected = FilenameUtils.separatorsToSystem(\"path/to/file\"); Assert.assertEquals(expected, actual);",
    "conflict": "Assert.assertEquals(\"path\" + SEP + \"to\" + SEP + \"file\", jarStreamLocator.getJarFile(new File(\"file:path/to/file!one/two/three.class\")).getPath());"
  },
  {
    "devdecision": "Combination",
    "id": 47223,
    "v2": "map.put(UriLocatorFactory.class, uriLocatorFactory);",
    "resolution": "map.put(ResourceLocatorFactory.class, resourceLocatorFactory);",
    "conflict": "//map.put(UriLocatorFactory.class, uriLocatorFactory); map.put(ResourceLocatorFactory.class, resourceLocatorFactory);"
  },
  {
    "devdecision": "Version 2",
    "id": 47227,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.JawrCssMinifierProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 47236,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 47239,
    "v2": "import ro.isdc.wro.model.group.Inject; import ro.isdc.wro.model.group.processor.Injector;",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.AbstractResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.AbstractResourceLocator;"
  },
  {
    "devdecision": "Version 2",
    "id": 47241,
    "v2": "final boolean applyProcessor = resource.isMinimize() || !ProcessorsUtils.isMinimizeAwareProcessor(processor);",
    "resolution": "final boolean applyProcessor = resource.isMinimize() || !ProcessorsUtils.isMinimizeAwareProcessor(processor);",
    "conflict": "final boolean applyProcessor = resource.isMinimize() || !processor.getClass().isAnnotationPresent(Minimize.class);"
  },
  {
    "devdecision": "Version 2",
    "id": 47262,
    "v2": "import static junit.framework.Assert.assertEquals;  import java.io.ByteArrayInputStream; import java.io.InputStream;",
    "resolution": "import static junit.framework.Assert.assertEquals;  import java.io.ByteArrayInputStream; import java.io.InputStream;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 47264,
    "v2": "private String computeBaseNameFolder(final Resource resource, final UriLocator uriLocator, final WildcardExpanderHandlerAware expandedHandler) {",
    "resolution": "private String computeBaseNameFolder(final Resource resource, final UriLocator uriLocator, final WildcardExpanderHandlerAware expandedHandler) {",
    "conflict": "private String computeBaseNameFolder(final Resource resource, final ResourceLocatorFactory resourceLocatorFactory) {"
  },
  {
    "devdecision": "None",
    "id": 47266,
    "v2": "import java.io.IOException; import java.io.Reader; import java.io.Writer;",
    "resolution": "import java.util.Enumeration;",
    "conflict": "import java.io.InputStream;"
  },
  {
    "devdecision": "Combination",
    "id": 47272,
    "v2": "import ro.isdc.wro.util.Function;",
    "resolution": "import ro.isdc.wro.model.resource.locator.support.IOFileFilterDecorator; import ro.isdc.wro.util.Function;",
    "conflict": "import ro.isdc.wro.model.resource.locator.support.IOFileFilterDecorator; import ro.isdc.wro.util.Transformer;"
  },
  {
    "devdecision": "Combination",
    "id": 47276,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.Function;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.Function;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 47298,
    "v2": "final StringWriter writer = new StringWriter(); processor.process(reader, writer);",
    "resolution": "processor.process(null, reader, new StringWriter());",
    "conflict": "processor.process(null, reader, new StringWriter());"
  },
  {
    "devdecision": "Combination",
    "id": 47299,
    "v2": "implements ResourcePreProcessor, ResourcePostProcessor { private static final Logger LOG = LoggerFactory.getLogger(CssCompressorProcessor.class);",
    "resolution": "implements ResourceProcessor { private static final Logger LOG = LoggerFactory.getLogger(CssCompressorProcessor.class);",
    "conflict": "implements ResourceProcessor {"
  },
  {
    "devdecision": "Combination",
    "id": 47300,
    "v2": "implements ResourcePreProcessor, ResourcePostProcessor { private static final Logger LOG = LoggerFactory.getLogger(CssMinProcessor.class);",
    "resolution": "implements ResourceProcessor {  private static final Logger LOG = LoggerFactory.getLogger(CssMinProcessor.class);",
    "conflict": "implements ResourceProcessor {"
  },
  {
    "devdecision": "Combination",
    "id": 47302,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.css.JawrCssMinifierProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.JawrCssMinifierProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47308,
    "v2": "output = new StringWriter(); decorateWithPostProcessCallback(processor).process(input, output);",
    "resolution": "output = new StringWriter(); decorateWithPostProcessCallback(processor).process(mergedResource, input, output);",
    "conflict": "decorateWithPostProcessCallback(processor).process(mergedResource, input, output);"
  },
  {
    "devdecision": "Combination",
    "id": 47313,
    "v2": "import ro.isdc.wro.config.jmx.WroConfiguration;",
    "resolution": "import ro.isdc.wro.config.jmx.WroConfiguration; import ro.isdc.wro.model.group.Group;",
    "conflict": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.group.Group;"
  },
  {
    "devdecision": "Combination",
    "id": 47314,
    "v2": "final String css = IOUtils.toString(uriLocatorFactory.locate(resource.getUri()), configuration.getEncoding());",
    "resolution": "final String css = IOUtils.toString(resourceLocatorFactory.locate(resource.getUri()).getInputStream(), configuration.getEncoding());",
    "conflict": "final String css = IOUtils.toString(resourceLocatorFactory.locate(resource.getUri()).getInputStream(), Context.get().getConfig().getEncoding());"
  },
  {
    "devdecision": "Combination",
    "id": 47318,
    "v2": "implements ResourcePreProcessor { private final WroManagerFactory managerFactory = new BaseWroManagerFactory() {",
    "resolution": "implements ResourceProcessor { private final WroManagerFactory managerFactory = new BaseWroManagerFactory() {",
    "conflict": "implements ResourceProcessor { private final WroManager manager = new BaseWroManagerFactory() {"
  },
  {
    "devdecision": "Combination",
    "id": 47325,
    "v2": "implements ResourcePostProcessor, ResourcePreProcessor {",
    "resolution": "implements ResourceProcessor {",
    "conflict": "implements ResourceProcessor { private static final Logger LOG = LoggerFactory.getLogger(GoogleClosureCompressorProcessor.class);"
  },
  {
    "devdecision": "Version 1",
    "id": 47339,
    "v2": "import ro.isdc.wro.extensions.processor.support.uglify.UglifyJs; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 47346,
    "v2": "private String getResourceContent(final Resource resource) throws IOException {",
    "resolution": "private String getResourceContent(final Resource resource) throws IOException {",
    "conflict": "private String getResourceContent(final Resource resource, final List<Resource> resources) throws IOException {"
  },
  {
    "devdecision": "Version 2",
    "id": 47347,
    "v2": "* This method is visible for testing only. * @param <T> processor type. Can be {@link ResourcePreProcessor}, {@link ResourcePostProcessor} or null (any).",
    "resolution": "* This method is visible for testing only. * @param <T> processor type. Can be {@link ResourcePreProcessor}, {@link ResourcePostProcessor} or null (any).",
    "conflict": "* @param <T> processor type. Can be {@link ResourceProcessor}, {@link ResourcePostProcessor} or null (any)."
  },
  {
    "devdecision": "Version 1",
    "id": 47356,
    "v2": "",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 47358,
    "v2": "private String doPostProcess(final ResourceType resourceType, final String content, final boolean minimize)",
    "resolution": "private String doPostProcess(final Group group, final ResourceType resourceType, final String content, final boolean minimize)",
    "conflict": "private String doPostProcess(final Group group, final ResourceType resourceType, final String content, final boolean minimize)"
  },
  {
    "devdecision": "Version 2",
    "id": 47368,
    "v2": "private String doPostProcess(final ResourceType resourceType, final String content, final boolean minimize)",
    "resolution": "private String doPostProcess(final ResourceType resourceType, final String content, final boolean minimize)",
    "conflict": "private String applyPostProcessors(final Group group, final ResourceType resourceType, final String content, final boolean minimize)"
  },
  {
    "devdecision": "Combination",
    "id": 47370,
    "v2": "for (final ResourcePreProcessor processor : processors) { stopWatch.start(\"Processor: \" + processor.getClass().getSimpleName());",
    "resolution": "for (final ResourceProcessor processor : processors) { stopWatch.start(\"Processor: \" + processor.getClass().getSimpleName());",
    "conflict": "for (final ResourceProcessor processor : processors) { stopWatch.start(\"Using \" + processor.getClass().getSimpleName());"
  },
  {
    "devdecision": "Combination",
    "id": 47376,
    "v2": "manager.registerCacheChangeListener(cacheChangeCallback); manager.setUriLocatorFactory(uriLocatorFactory);",
    "resolution": "manager.registerCacheChangeListener(cacheChangeCallback); manager.setResourceLocatorFactory(resourceLocatorFactory);",
    "conflict": "manager.registerCallback(cacheChangeCallback); manager.setResourceLocatorFactory(resourceLocatorFactory);"
  },
  {
    "devdecision": "Combination",
    "id": 47378,
    "v2": "private final UriLocatorFactory uriLocatorFactory;",
    "resolution": "private final ResourceLocatorFactory resourceLocatorFactory;",
    "conflict": "private final ResourceLocatorFactory resourceLocatorFactory; private PreProcessorExecutor preProcessorExecutor;"
  },
  {
    "devdecision": "Combination",
    "id": 47381,
    "v2": "private LifecycleCallbackRegistry callbackRegistry; @Inject private UriLocatorFactory uriLocatorFactory;",
    "resolution": "private LifecycleCallbackRegistry callbackRegistry; @Inject private ResourceLocatorFactory resourceLocatorFactory;",
    "conflict": "private ResourceLocatorFactory resourceLocatorFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 47386,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.manager.WroManagerFactory;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.manager.WroManagerFactory;",
    "conflict": "import ro.isdc.wro.manager.factory.WroManagerFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 47388,
    "v2": "",
    "resolution": "getCallbackRegistry().onBeforeModelCreated();",
    "conflict": "final List<Group> groupAsList = new ArrayList<Group>();  //TODO update the context getCallbackRegistry().onBeforeModelCreated();"
  },
  {
    "devdecision": "None",
    "id": 47393,
    "v2": "import java.io.Reader; import java.io.Writer;",
    "resolution": "import java.util.Enumeration;",
    "conflict": "import java.util.ArrayList;"
  },
  {
    "devdecision": "Combination",
    "id": 47415,
    "v2": "import java.io.Reader; import java.io.Writer; import java.util.ArrayList;",
    "resolution": "import java.util.ArrayList;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 47416,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47418,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47419,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47420,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47421,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47422,
    "v2": "public class CJsonProcessor implements ResourcePreProcessor, ResourcePostProcessor {",
    "resolution": "public class CJsonProcessor implements ResourceProcessor {",
    "conflict": "public abstract class CJsonProcessor implements ResourceProcessor {"
  },
  {
    "devdecision": "Combination",
    "id": 47423,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47424,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47425,
    "v2": "public class JsonHPackProcessor implements ResourcePreProcessor, ResourcePostProcessor {",
    "resolution": "public class JsonHPackProcessor implements ResourceProcessor {",
    "conflict": "public abstract class JsonHPackProcessor implements ResourceProcessor {"
  },
  {
    "devdecision": "Combination",
    "id": 47426,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 47429,
    "v2": "import ro.isdc.wro.extensions.processor.support.csslint.CssLintException; import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.extensions.processor.support.csslint.CssLintException; import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47430,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.WroTestUtils;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.WroTestUtils;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47432,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.WroTestUtils;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.WroTestUtils;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Version 2",
    "id": 47441,
    "v2": "extends AbstractLinterProcessor {",
    "resolution": "extends AbstractLinterProcessor {",
    "conflict": "implements ResourceProcessor { private static final Logger LOG = LoggerFactory.getLogger(JsHintProcessor.class);"
  },
  {
    "devdecision": "Combination",
    "id": 47443,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.WroTestUtils;"
  },
  {
    "devdecision": "Combination",
    "id": 47450,
    "v2": "",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;",
    "conflict": "import ro.isdc.wro.config.WroConfigurationChangeListener; import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;"
  },
  {
    "devdecision": "Combination",
    "id": 47453,
    "v2": "final String baseNameFolder = computeBaseNameFolder(resource, uriLocator, expandedHandler); LOG.debug(\"baseNameFolder: {}\", baseNameFolder);",
    "resolution": "final String baseNameFolder = computeBaseNameFolder(resource, resourceLocatorFactory); LOG.debug(\"baseNameFolder: {}\", baseNameFolder);",
    "conflict": "final String baseNameFolder = computeBaseNameFolder(resource, resourceLocatorFactory);"
  },
  {
    "devdecision": "Version 1",
    "id": 47455,
    "v2": "uriLocator.locate(resourcePath);",
    "resolution": "LOG.debug(\"locating baseName using resourcePath: {}\", resourcePath); resourceLocator.getInputStream();",
    "conflict": "LOG.debug(\"locating baseName using resourcePath: {}\", resourcePath); resourceLocator.getInputStream();"
  },
  {
    "devdecision": "Combination",
    "id": 47476,
    "v2": "if (processor != null && processor instanceof ResourcePreProcessor) {",
    "resolution": "if (processor != null && processor instanceof ResourceProcessor) {",
    "conflict": "System.out.println(processor); if (processor != null && processor instanceof ResourceProcessor) {"
  },
  {
    "devdecision": "Combination",
    "id": 47477,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.extensions.processor.js.UglifyJsProcessor; import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 47478,
    "v2": "final ResourcePreProcessor decoratedProcessor = new JSMinProcessor(); final ResourcePreProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor);",
    "resolution": "final ResourceProcessor decoratedProcessor = new JSMinProcessor(); final ResourceProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor);",
    "conflict": "final ResourceProcessor decoratedProcessor = new UglifyJsProcessor(); final ResourceProcessor processor = CopyrightKeeperProcessorDecorator.decorate(decoratedProcessor);"
  },
  {
    "devdecision": "Combination",
    "id": 47479,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.impl.ExtensionsAwareProcessorDecorator;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.ExtensionsAwareProcessorDecorator;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47486,
    "v2": "import ro.isdc.wro.extensions.processor.support.jshint.JsHintException; import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.extensions.processor.support.jshint.JsHintException; import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47501,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory; import ro.isdc.wro.model.resource.processor.support.DataUriGenerator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.processor.support.DataUriGenerator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.processor.algorithm.DataUriGenerator;"
  },
  {
    "devdecision": "Combination",
    "id": 47502,
    "v2": "Validate.notNull(uriLocatorFactory); LOG.debug(\"replace url for image: {} from css: {}\", imageUrl, cssUri);",
    "resolution": "Validate.notNull(resourceLocatorFactory); LOG.debug(\"replace url for image: {} from css: {}\", imageUrl, cssUri);",
    "conflict": "Validate.notNull(resourceLocatorFactory); LOG.debug(\"replace url for image: \" + imageUrl + \", from css: \" + cssUri);"
  },
  {
    "devdecision": "Version 1",
    "id": 47510,
    "v2": "import ro.isdc.wro.extensions.processor.support.less.LessCss; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47511,
    "v2": "private ResourcePostProcessor processor; private File testFolder;",
    "resolution": "private ResourceProcessor processor; private File testFolder;",
    "conflict": "private ResourceProcessor processor;"
  },
  {
    "devdecision": "Combination",
    "id": 47512,
    "v2": "private UriLocatorFactory uriLocatorFactory;",
    "resolution": "private ResourceLocatorFactory resourceLocatorFactory;",
    "conflict": "@Inject private ResourceLocatorFactory resourceLocatorFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 47516,
    "v2": "private final WroManager wroManager; private final UriLocatorFactory uriLocatorFactory;",
    "resolution": "private final WroManager wroManager; private final UriLocatorFactory uriLocatorFactory;",
    "conflict": "private final ResourceLocatorFactory resourceLocatorFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 47519,
    "v2": "Validate.notNull(uriLocatorFactory);",
    "resolution": "Validate.notNull(resourceLocatorFactory);",
    "conflict": "if (resourceLocatorFactory == null) { throw new IllegalStateException(\"No UriLocatorFactory was injected!\"); }"
  },
  {
    "devdecision": "Version 1",
    "id": 47524,
    "v2": "import ro.isdc.wro.model.resource.locator.ClasspathUriLocator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.DefaultResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.DefaultResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;"
  },
  {
    "devdecision": "Combination",
    "id": 47536,
    "v2": "import org.apache.commons.lang3.StringUtils;",
    "resolution": "import org.apache.commons.lang3.StringUtils; import org.apache.commons.lang.Validate;",
    "conflict": "import org.apache.commons.lang.StringUtils; import org.apache.commons.lang.Validate;"
  },
  {
    "devdecision": "Version 2",
    "id": 47551,
    "v2": "private void handleFoundAllFiles(final List<File> allFiles) throws IOException {",
    "resolution": "private void handleFoundAllFiles(final List<File> allFiles) throws IOException {",
    "conflict": "protected void handleFoundFiles(final Collection<File> files) throws IOException { LOG.debug(\"wildcardExpanderHandler: {}\", wildcardExpanderHandler);"
  },
  {
    "devdecision": "Version 1",
    "id": 47560,
    "v2": "LOG.debug(\"resourcePath: {}\", resourcePath); uriLocator.locate(resourcePath);",
    "resolution": "LOG.debug(\"locating baseName using resourcePath: {}\", resourcePath); resourceLocator.getInputStream();",
    "conflict": "LOG.debug(\"locating baseName using resourcePath: {}\", resourcePath); resourceLocator.getInputStream();"
  },
  {
    "devdecision": "Combination",
    "id": 47564,
    "v2": "private final UriLocatorFactory uriLocatorFactory;",
    "resolution": "private final ResourceLocatorFactory resourceLocatorFactory;",
    "conflict": "private final DuplicateResourceDetector duplicateResourceDetector = new DuplicateResourceDetector(); private final ResourceLocatorFactory resourceLocatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 47570,
    "v2": "import ro.isdc.wro.model.resource.locator.ClasspathUriLocator;",
    "resolution": "import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.DuplicateResourceDetector; import ro.isdc.wro.model.resource.locator.support.ClasspathResourceLocator;"
  },
  {
    "devdecision": "Combination",
    "id": 47575,
    "v2": "throws Exception { final ResourcePostProcessor processor = new CssMinProcessor();",
    "resolution": "throws Exception { final ResourceProcessor processor = new CssMinProcessor();",
    "conflict": "throws IOException { final ResourceProcessor processor = new CssMinProcessor();"
  },
  {
    "devdecision": "Combination",
    "id": 47576,
    "v2": "",
    "resolution": "import java.io.Reader; import java.io.Writer;",
    "conflict": "import java.io.IOException; import java.io.Reader; import java.io.Writer;"
  },
  {
    "devdecision": "Version 1",
    "id": 47583,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return TestGroovyModelFactory.class.getResourceAsStream(\"wro.json\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"wro.json\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"wro.json\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47590,
    "v2": "throws Exception { final ResourcePreProcessor processor = new WroManagerProcessor();",
    "resolution": "throws Exception { final ResourceProcessor processor = new WroManagerProcessor();",
    "conflict": "throws Exception { final ResourceProcessor processor = new WroManagerProcessor();"
  },
  {
    "devdecision": "Version 1",
    "id": 47591,
    "v2": "Context.webContext(request, Mockito.mock(HttpServletResponse.class, Mockito.RETURNS_DEEP_STUBS), Mockito.mock(FilterConfig.class)), newConfigWithUpdatePeriodValue(0));",
    "resolution": "Context.webContext(request, Mockito.mock(HttpServletResponse.class, Mockito.RETURNS_DEEP_STUBS), Mockito.mock(FilterConfig.class)), newConfigWithUpdatePeriodValue(0));",
    "conflict": "Context.webContext(request, Mockito.mock(HttpServletResponse.class, Mockito.RETURNS_DEEP_STUBS), Mockito.mock(FilterConfig.class)), newConfigWithUpdatePeriodValue(0));"
  },
  {
    "devdecision": "Version 1",
    "id": 47594,
    "v2": "Mockito.doThrow(new RuntimeException()).when(postProcessor).process(Mockito.any(Reader.class), Mockito.any(Writer.class));",
    "resolution": "Mockito.doThrow(new RuntimeException()).when(postProcessor).process(Mockito.any(Resource.class), Mockito.any(Reader.class), Mockito.any(Writer.class));",
    "conflict": "Mockito.doThrow(new RuntimeException()).when(postProcessor).process(Mockito.any(Resource.class), Mockito.any(Reader.class), Mockito.any(Writer.class));"
  },
  {
    "devdecision": "Version 1",
    "id": 47595,
    "v2": "throws Exception {",
    "resolution": "throws Exception { Context.unset();",
    "conflict": "throws Exception { Context.unset();"
  },
  {
    "devdecision": "Version 2",
    "id": 47599,
    "v2": "import ro.isdc.wro.model.factory.AbstractWroModelFactory;",
    "resolution": "import ro.isdc.wro.model.factory.AbstractWroModelFactory;",
    "conflict": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.ServletContextResourceLocator;"
  },
  {
    "devdecision": "Combination",
    "id": 47601,
    "v2": "import ro.isdc.wro.model.factory.AbstractWroModelFactory;",
    "resolution": "import ro.isdc.wro.model.factory.AbstractWroModelFactory; import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.ServletContextResourceLocator;",
    "conflict": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.ServletContextResourceLocator;"
  },
  {
    "devdecision": "Version 2",
    "id": 47602,
    "v2": "",
    "resolution": "",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new ServletContextResourceLocator(Context.get().getServletContext(), \"/WEB-INF/\" + DEFAULT_FILE_NAME); }"
  },
  {
    "devdecision": "Version 2",
    "id": 47603,
    "v2": "if (!autoDetectWroFile) { LOG.info(\"autoDetect is \" + autoDetectWroFile + \" because wroFile: \" + context.getWroFile() + \" is not the same as the default one: \" + DEFAULT_WRO_FILE); }",
    "resolution": "if (!autoDetectWroFile) { LOG.info(\"autoDetect is \" + autoDetectWroFile + \" because wroFile: \" + context.getWroFile() + \" is not the same as the default one: \" + DEFAULT_WRO_FILE); }",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 47608,
    "v2": "//stop trying with other factories if the reason is IOException if (!autoDetectWroFile && e.getCause() instanceof IOException) { throw e; }",
    "resolution": "//stop trying with other factories if the reason is IOException if (!autoDetectWroFile && e.getCause() instanceof IOException) { throw e; }",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 47617,
    "v2": "@Override protected ProcessorsFactory newProcessorsFactory() { return new DefaultProcesorsFactory(); }",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 47621,
    "v2": "protected InputStream getModelResourceAsStream() { return getClass().getResourceAsStream(\"wro.xml\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(getClass().getResource(\"wro.xml\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(getClass().getResource(\"wro.xml\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47622,
    "v2": "protected InputStream getModelResourceAsStream() { return TestWroManager.class.getResourceAsStream(\"wro.xml\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestWroManager.class.getResource(\"wro.xml\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestWroManager.class.getResource(\"wro.xml\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47637,
    "v2": "script = new GroovyShell().parse(new InputStreamReader(getModelResourceAsStream()));",
    "resolution": "final InputStream configResource = getModelResourceLocator().getInputStream(); script = new GroovyShell().parse(new InputStreamReader(configResource));",
    "conflict": "final InputStream configResource = getModelResourceLocator().getInputStream(); script = new GroovyShell().parse(new InputStreamReader(configResource));"
  },
  {
    "devdecision": "Version 1",
    "id": 47641,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { throw new IOException();",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new ClasspathResourceLocator(\"INVALID\");",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new ClasspathResourceLocator(\"INVALID\");"
  },
  {
    "devdecision": "Version 1",
    "id": 47643,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return getClass().getResourceAsStream(\"wroWithHiphen.groovy\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroWithHiphen.groovy\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroWithHiphen.groovy\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47644,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return getClass().getResourceAsStream(\"wroGroupRefOrder.groovy\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroGroupRefOrder.groovy\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroGroupRefOrder.groovy\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47645,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return getClass().getResourceAsStream(\"wroRecursiveReference.groovy\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroRecursiveReference.groovy\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroRecursiveReference.groovy\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47646,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return getClass().getResourceAsStream(\"wroDuplicateGroupName.groovy\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroDuplicateGroupName.groovy\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"wroDuplicateGroupName.groovy\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47647,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return getClass().getResourceAsStream(\"IncompleteWro.groovy\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"IncompleteWro.groovy\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestGroovyWroModelFactory.class.getResource(\"IncompleteWro.groovy\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47650,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return TestGroovyWroModelFactory.class.getResourceAsStream(\"wro.json\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"wro.json\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"wro.json\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 47651,
    "v2": "protected InputStream getModelResourceAsStream() throws IOException { return getClass().getResourceAsStream(\"incomplete-wro.json\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"incomplete-wro.json\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"incomplete-wro.json\"));"
  },
  {
    "devdecision": "Concatenation",
    "id": 47661,
    "v2": "import org.slf4j.Logger; import org.slf4j.LoggerFactory;",
    "resolution": "import ro.isdc.wro.cache.CacheChangeCallbackAware;import org.slf4j.Logger; import org.slf4j.LoggerFactory;",
    "conflict": "import ro.isdc.wro.cache.CacheChangeCallbackAware;"
  },
  {
    "devdecision": "Version 1",
    "id": 47668,
    "v2": "protected InputStream getConfigResourceAsStream() throws IOException { return getClass().getResourceAsStream(\"incomplete-wro.json\");",
    "resolution": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"incomplete-wro.json\"));",
    "conflict": "protected ResourceLocator getModelResourceLocator() { return new UrlResourceLocator(TestJsonModelFactory.class.getResource(\"incomplete-wro.json\"));"
  },
  {
    "devdecision": "Version 2",
    "id": 47682,
    "v2": "processor.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);",
    "resolution": "processor.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);",
    "conflict": "final ResourceProcessor processor = new GoogleClosureCompressorProcessor( CompilationLevel.ADVANCED_OPTIMIZATIONS);"
  },
  {
    "devdecision": "None",
    "id": 47685,
    "v2": "import java.util.HashMap;",
    "resolution": "import java.util.Map;",
    "conflict": "import java.util.ArrayList; import java.util.HashMap; import java.util.LinkedHashMap;"
  },
  {
    "devdecision": "Combination",
    "id": 47690,
    "v2": "public Collection<ResourcePreProcessor> getPreProcessors() { return Collections.unmodifiableCollection(preProcessors);",
    "resolution": "public Collection<ResourceProcessor> getPreProcessors() { return Collections.unmodifiableCollection(preProcessors);",
    "conflict": "public Collection<ResourceProcessor> getPreProcessors() { return preProcessors;"
  },
  {
    "devdecision": "Combination",
    "id": 47691,
    "v2": "public Collection<ResourcePostProcessor> getPostProcessors() { return Collections.unmodifiableCollection(postProcessors);",
    "resolution": "public Collection<ResourceProcessor> getPostProcessors() { return Collections.unmodifiableCollection(postProcessors);",
    "conflict": "public Collection<ResourceProcessor> getPostProcessors() { return postProcessors;"
  },
  {
    "devdecision": "Manual",
    "id": 47696,
    "v2": "configureValidUriLocators(filterConfig); Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_PRE_PROCESSORS)).thenReturn(\"\");",
    "resolution": "Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_PRE_PROCESSORS)).thenReturn(\"\");",
    "conflict": "Mockito.when(filterConfig.getInitParameter(ConfigurableWroManagerFactory.PARAM_PRE_PROCESSORS)).thenReturn(\"\");"
  },
  {
    "devdecision": "Manual",
    "id": 47697,
    "v2": "configureValidUriLocators(filterConfig); Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_PRE_PROCESSORS)).thenReturn(\"INVALID1,INVALID2\");",
    "resolution": "Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_PRE_PROCESSORS)).thenReturn( \"INVALID1,INVALID2\");",
    "conflict": "Mockito.when(filterConfig.getInitParameter(ConfigurableWroManagerFactory.PARAM_PRE_PROCESSORS)).thenReturn(\"INVALID1,INVALID2\");"
  },
  {
    "devdecision": "Manual",
    "id": 47698,
    "v2": "configureValidUriLocators(filterConfig); Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_PRE_PROCESSORS)).thenReturn(\"cssUrlRewriting\");",
    "resolution": "Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_PRE_PROCESSORS)).thenReturn( \"cssUrlRewriting\");",
    "conflict": "Mockito.when(filterConfig.getInitParameter(ConfigurableWroManagerFactory.PARAM_PRE_PROCESSORS)).thenReturn(\"cssUrlRewriting\");"
  },
  {
    "devdecision": "Manual",
    "id": 47699,
    "v2": "configureValidUriLocators(filterConfig); Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_POST_PROCESSORS)).thenReturn(\"\");",
    "resolution": "Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_POST_PROCESSORS)).thenReturn(\"\");",
    "conflict": "Mockito.when(filterConfig.getInitParameter(ConfigurableWroManagerFactory.PARAM_POST_PROCESSORS)).thenReturn(\"\");"
  },
  {
    "devdecision": "Manual",
    "id": 47700,
    "v2": "configureValidUriLocators(filterConfig); Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_POST_PROCESSORS)).thenReturn(\"INVALID1,INVALID2\");",
    "resolution": "Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_POST_PROCESSORS)).thenReturn( \"INVALID1,INVALID2\");",
    "conflict": "Mockito.when(filterConfig.getInitParameter(ConfigurableWroManagerFactory.PARAM_POST_PROCESSORS)).thenReturn(\"INVALID1,INVALID2\");"
  },
  {
    "devdecision": "Manual",
    "id": 47701,
    "v2": "configureValidUriLocators(filterConfig); Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_POST_PROCESSORS)).thenReturn(\"cssMinJawr, jsMin, cssVariables\");",
    "resolution": "Mockito.when(filterConfig.getInitParameter(ConfigurableProcessorsFactory.PARAM_POST_PROCESSORS)).thenReturn( \"cssMinJawr, jsMin, cssVariables\");",
    "conflict": "Mockito.when(filterConfig.getInitParameter(ConfigurableWroManagerFactory.PARAM_POST_PROCESSORS)).thenReturn(\"cssMinJawr, jsMin, cssVariables\");"
  },
  {
    "devdecision": "Manual",
    "id": 47702,
    "v2": "protected void contributePostProcessors(final Map<String, ResourcePostProcessor> map) { pupulateMapWithExtensionsProcessors(map);",
    "resolution": "protected void contributePostProcessors(final Map<String, ResourceProcessor> map) { pupulateMapWithExtensionsProcessors(map);",
    "conflict": "protected void contributePostProcessors(final Map<String, ResourceProcessor> map) { map.putAll(createCommonProcessors());"
  },
  {
    "devdecision": "Combination",
    "id": 47704,
    "v2": "import ro.isdc.wro.model.resource.processor.ProcessorsUtils; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.model.resource.processor.factory.ConfigurableProcessorsFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ProcessorsUtils; import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.factory.ConfigurableProcessorsFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47714,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.BomStripperPreProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47722,
    "v2": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.factory.WroModelFactory; import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "None",
    "id": 47728,
    "v2": "import ro.isdc.wro.model.factory.ServletContextAwareXmlModelFactory;",
    "resolution": "import ro.isdc.wro.model.WroModel;",
    "conflict": "import ro.isdc.wro.model.factory.FallbackAwareWroModelFactory; import ro.isdc.wro.model.factory.ScheduledWroModelFactory; import ro.isdc.wro.model.factory.WildcardExpanderWroModelFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 47731,
    "v2": "* Override to provide a different or modified default factory implementation.",
    "resolution": "* Override to provide a different or modified default factory implementation.",
    "conflict": "* By default no processors are used. * Override to provide a different or modified factory."
  },
  {
    "devdecision": "Manual",
    "id": 47747,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.DefaultUriLocatorFactory; import ro.isdc.wro.model.resource.processor.factory.DefaultProcesorsFactory;",
    "resolution": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.factory.DefaultResourceLocatorFactory; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;"
  },
  {
    "devdecision": "Manual",
    "id": 47750,
    "v2": "import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream;",
    "resolution": "import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 47759,
    "v2": "throw new WroRuntimeException(\"@Inject cannot be applied field of type: \" + field.getType());",
    "resolution": "throw new WroRuntimeException(\"@Inject cannot be applied field of type: \" + field.getType());",
    "conflict": "throw new WroRuntimeException(\"@Inject can be applied only on these types \" + ResourceLocatorFactory.class.getName() + \" type\");"
  },
  {
    "devdecision": "Version 1",
    "id": 47783,
    "v2": "import ro.isdc.wro.model.resource.Resource; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47789,
    "v2": "implements ResourcePreProcessor, ResourcePostProcessor { public static final String ALIAS = \"cssMin\";",
    "resolution": "implements ResourceProcessor {  public static final String ALIAS = \"cssMin\";",
    "conflict": "implements ResourceProcessor {"
  },
  {
    "devdecision": "Version 1",
    "id": 47794,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.CssDataUriPreProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.model.resource.processor.impl.css.CssDataUriPreProcessor;"
  },
  {
    "devdecision": "Version 1",
    "id": 47795,
    "v2": "protected void contributePostProcessors(final Map<String, ResourcePostProcessor> map) { pupulateMap(map);",
    "resolution": "protected void contributePostProcessors(final Map<String, ResourceProcessor> map) { map.putAll(createCommonProcessors());",
    "conflict": "protected void contributePostProcessors(final Map<String, ResourceProcessor> map) { map.putAll(createCommonProcessors());"
  },
  {
    "devdecision": "Combination",
    "id": 47804,
    "v2": "final ResourcePreProcessor processor = new PlaceholderProcessor().setPropertiesFactory(WroUtil.simpleObjectFactory(properties)); final URL url = getClass().getResource(\"placeholder\");",
    "resolution": "final ResourceProcessor processor = new PlaceholderInterpolationProcessor().setPropertiesFactory(WroUtil.simpleObjectFactory(properties)); final URL url = getClass().getResource(\"placeholder\");",
    "conflict": "final ResourceProcessor processor = new PlaceholderInterpolationProcessor().setPropertiesFactory(WroUtil.simpleObjectFactory(properties)); final URL url = getClass().getResource(\"placeholderInterpolation\");"
  },
  {
    "devdecision": "Combination",
    "id": 47805,
    "v2": "final ResourcePreProcessor processor = new PlaceholderProcessor().setIgnoreMissingVariables(false); final URL url = getClass().getResource(\"placeholder\");",
    "resolution": "final ResourceProcessor processor = new PlaceholderInterpolationProcessor().setIgnoreMissingVariables(false); final URL url = getClass().getResource(\"placeholder\");",
    "conflict": "final ResourceProcessor processor = new PlaceholderInterpolationProcessor().setIgnoreMissingVariables(false); final URL url = getClass().getResource(\"placeholderInterpolation\");"
  },
  {
    "devdecision": "Version 1",
    "id": 47818,
    "v2": "public void process(final Resource resource, final Reader reader, final Writer writer) throws IOException {",
    "resolution": "public void process(final Resource resource, final Reader reader, final Writer writer) throws IOException {",
    "conflict": "public void process(final Resource resource, final Reader reader, final Writer writer) throws IOException {"
  },
  {
    "devdecision": "Combination",
    "id": 47827,
    "v2": "Mockito.when(config.getInitParameter(ConfigConstants.managerFactoryClassName.name())).thenReturn( ServletContextAwareWroManagerFactory.class.getName());",
    "resolution": "Mockito.when(config.getInitParameter(ConfigConstants.managerFactoryClassName.name())).thenReturn( BaseWroManagerFactory.class.getName());",
    "conflict": "Mockito.when(config.getInitParameter(WroFilter.PARAM_MANAGER_FACTORY)).thenReturn( BaseWroManagerFactory.class.getName());"
  },
  {
    "devdecision": "Manual",
    "id": 47828,
    "v2": "map.put(\"jsHint\", new JsHintProcessor()); map.put(\"cssLint\", new CssLintProcessor());",
    "resolution": "map.put(\"jsHint\", new JsHintProcessor()); map.put(\"cssLint\", new CssLintProcessor());  return map;",
    "conflict": "return map;"
  },
  {
    "devdecision": "Version 1",
    "id": 47829,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47838,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePostProcessor; import ro.isdc.wro.model.resource.processor.ResourcePreProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourceProcessor; import ro.isdc.wro.util.ObjectFactory;",
    "conflict": "import ro.isdc.wro.model.resource.processor.ResourceProcessor;"
  },
  {
    "devdecision": "Manual",
    "id": 47840,
    "v2": "final ResourcePreProcessor processor = new PlaceholderInterpolationProcessor().setPropertiesFactory(WroUtil.simpleObjectFactory(properties));",
    "resolution": "final ResourceProcessor processor = new PlaceholderInterpolationProcessor().setPropertiesFactory(WroUtil.simpleObjectFactory(properties));",
    "conflict": "final ResourceProcessor processor = new PlaceholderInterpolationProcessor().setProperties(properties);"
  },
  {
    "devdecision": "Manual",
    "id": 47847,
    "v2": "@Test public void testFromFolder() throws IOException { final ResourcePostProcessor processor = new CssCompressorProcessor();",
    "resolution": "@Test public void testFromFolder() throws IOException { final ResourceProcessor processor = new CssCompressorProcessor();",
    "conflict": "private final ResourceProcessor processor = new CssCompressorProcessor();"
  },
  {
    "devdecision": "Combination",
    "id": 47867,
    "v2": "",
    "resolution": "import ro.isdc.wro.model.resource.SupportedResourceType; import ro.isdc.wro.model.resource.processor.ProcessorsUtils;",
    "conflict": "import ro.isdc.wro.model.resource.SupportedResourceType; import ro.isdc.wro.model.resource.processor.ProcessorsUtils; import ro.isdc.wro.model.resource.processor.ResourcePostProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47870,
    "v2": "final InputStream is = uriLocatorFactory.locate(resource.getUri()); final String result = IOUtils.toString(is, config.getEncoding());",
    "resolution": "final InputStream is = resourceLocatorFactory.locate(resource.getUri()).getInputStream(); final String result = IOUtils.toString(is, config.getEncoding());",
    "conflict": "final InputStream is = resourceLocatorFactory.locate(resource.getUri()).getInputStream(); final String result = IOUtils.toString(is, Context.get().getConfig().getEncoding());"
  },
  {
    "devdecision": "Version 2",
    "id": 47873,
    "v2": "",
    "resolution": "",
    "conflict": "@Test public void testWhiteSpaceOnly() throws IOException { final ResourcePostProcessor processor = new GoogleClosureCompressorProcessor(CompilationLevel.WHITESPACE_ONLY); final URL url = getClass().getResource(\"google\");"
  },
  {
    "devdecision": "Combination",
    "id": 47881,
    "v2": "final InputStream is = uriLocatorFactory.locate(resource.getUri()); final String result = IOUtils.toString(is, Context.get().getConfig().getEncoding());",
    "resolution": "final InputStream is = resourceLocatorFactory.locate(resource.getUri()).getInputStream(); final String result = IOUtils.toString(is, Context.get().getConfig().getEncoding());",
    "conflict": "final InputStream is = resourceLocatorFactory.locate(resource.getUri()).getInputStream(); final String result = IOUtils.toString(new SmartEncodingInputStream(is));"
  },
  {
    "devdecision": "Version 2",
    "id": 47882,
    "v2": "final String css = IOUtils.toString(uriLocatorFactory.locate(resource.getUri()), Context.get().getConfig().getEncoding());",
    "resolution": "final String css = IOUtils.toString(uriLocatorFactory.locate(resource.getUri()), Context.get().getConfig().getEncoding());",
    "conflict": "final String css = IOUtils.toString(resourceLocatorFactory.locate(resource.getUri()).getInputStream());"
  },
  {
    "devdecision": "Combination",
    "id": 47884,
    "v2": "import ro.isdc.wro.manager.factory.ServletContextAwareWroManagerFactory; import ro.isdc.wro.model.WroModel; import ro.isdc.wro.model.factory.WroModelFactoryDecorator;",
    "resolution": "import ro.isdc.wro.model.WroModel; import ro.isdc.wro.model.factory.WroModelFactoryDecorator;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 47885,
    "v2": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "resolution": "import ro.isdc.wro.model.resource.processor.ResourcePreProcessor;",
    "conflict": "import ro.isdc.wro.model.resource.locator.ResourceLocator; import ro.isdc.wro.model.resource.locator.support.UrlResourceLocator;"
  },
  {
    "devdecision": "Manual",
    "id": 47887,
    "v2": "final JSSourceFile input = JSSourceFile.fromInputStream(\"\", new ByteArrayInputStream(content.getBytes(Context.get().getConfig().getEncoding())));",
    "resolution": "final String fileName = resource == null ? \"wro4j-processed-file.js\" : resource.getUri(); final JSSourceFile input = JSSourceFile.fromInputStream(fileName, new ByteArrayInputStream(content.getBytes(Context.get().getConfig().getEncoding())));",
    "conflict": "final String fileName = resource == null ? \"wro4j-processed-file.js\" : resource.getUri(); final JSSourceFile input = JSSourceFile.fromInputStream(fileName, new ByteArrayInputStream(content.getBytes()));"
  },
  {
    "devdecision": "Combination",
    "id": 47888,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.extensions.processor.js.CoffeScriptProcessor;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.extensions.processor.js.CoffeeScriptProcessor;",
    "conflict": "import ro.isdc.wro.extensions.processor.js.CoffeeScriptProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47889,
    "v2": "Context.set(Context.standaloneContext()); processor = new CoffeScriptProcessor();",
    "resolution": "Context.set(Context.standaloneContext()); processor = new CoffeeScriptProcessor();",
    "conflict": "processor = new CoffeeScriptProcessor();"
  },
  {
    "devdecision": "Manual",
    "id": 47897,
    "v2": "final JSSourceFile input = JSSourceFile.fromInputStream(\"\", new ByteArrayInputStream(content.getBytes(Context.get().getConfig().getEncoding())));",
    "resolution": "final String fileName = resource == null ? \"wro4j-processed-file.js\" : resource.getUri(); final JSSourceFile input = JSSourceFile.fromInputStream(fileName, new ByteArrayInputStream(content.getBytes(Context.get().getConfig().getEncoding())));",
    "conflict": "final String fileName = resource == null ? \"wro4j-processed-file.js\" : resource.getUri(); final JSSourceFile input = JSSourceFile.fromInputStream(fileName, new ByteArrayInputStream(content.getBytes()));"
  },
  {
    "devdecision": "Combination",
    "id": 47898,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.extensions.processor.js.CoffeScriptProcessor;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.extensions.processor.js.CoffeeScriptProcessor;",
    "conflict": "import ro.isdc.wro.extensions.processor.js.CoffeeScriptProcessor;"
  },
  {
    "devdecision": "Combination",
    "id": 47899,
    "v2": "Context.set(Context.standaloneContext()); processor = new CoffeScriptProcessor();",
    "resolution": "Context.set(Context.standaloneContext()); processor = new CoffeeScriptProcessor();",
    "conflict": "processor = new CoffeeScriptProcessor();"
  },
  {
    "devdecision": "Version 1",
    "id": 47903,
    "v2": "protected UriLocatorFactory newUriLocatorFactory() { return new DefaultUriLocatorFactory();",
    "resolution": "protected ResourceLocatorFactory newResourceLocatorFactory() { return DefaultResourceLocatorFactory.contextAwareFactory();",
    "conflict": "protected ResourceLocatorFactory newResourceLocatorFactory() { return DefaultResourceLocatorFactory.contextAwareFactory();"
  },
  {
    "devdecision": "Version 1",
    "id": 47912,
    "v2": "import ro.isdc.wro.model.resource.locator.factory.InjectorUriLocatorFactoryDecorator; import ro.isdc.wro.model.resource.locator.factory.UriLocatorFactory;",
    "resolution": "import ro.isdc.wro.model.resource.locator.factory.InjectorResourceLocatorFactoryDecorator; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;",
    "conflict": "import ro.isdc.wro.model.resource.locator.factory.InjectorResourceLocatorFactoryDecorator; import ro.isdc.wro.model.resource.locator.factory.ResourceLocatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 47928,
    "v2": "import ro.isdc.wro.config.Context; import ro.isdc.wro.config.WroConfigurationChangeListener; import ro.isdc.wro.model.ModelBuilder;",
    "resolution": "import ro.isdc.wro.config.Context; import ro.isdc.wro.model.ModelBuilder;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 47933,
    "v2": "* @return A new {@link ModelBuilder} bound to this model factory.",
    "resolution": "* @return A new {@link ModelBuilder} bound to this model factory.",
    "conflict": "* @return stream of the xml representation of the model. * @throws IOException if the stream couldn't be read."
  },
  {
    "devdecision": "Combination",
    "id": 47938,
    "v2": "public InputStream getConfigResourceAsStream() { return WroTestUtils.getClassRelativeResource(TestWroFilter.class, \"wro.xml\");",
    "resolution": "public InputStream getConfigResourceAsStream() { return getClass().getResourceAsStream(\"wro.xml\");",
    "conflict": "protected InputStream getConfigResourceAsStream() { return getClass().getResourceAsStream(\"wro.xml\");"
  },
  {
    "devdecision": "Combination",
    "id": 47939,
    "v2": "public InputStream getConfigResourceAsStream() { return WroTestUtils.getClassRelativeResource(TestWroModel.class, \"wro.xml\");",
    "resolution": "public InputStream getConfigResourceAsStream() { return getClass().getResourceAsStream(\"wro.xml\");",
    "conflict": "protected InputStream getConfigResourceAsStream() { return getClass().getResourceAsStream(\"wro.xml\");"
  },
  {
    "devdecision": "Version 1",
    "id": 47949,
    "v2": "",
    "resolution": "import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream;",
    "conflict": "import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream;"
  },
  {
    "devdecision": "Version 1",
    "id": 47960,
    "v2": "return TestWroModel.class.getResourceAsStream(\"wro.xml\"); //return WroTestUtils.getClassRelativeResource(TestWroModel.class, \"wro.xml\");",
    "resolution": "return getClass().getResourceAsStream(\"wro.xml\");",
    "conflict": "return getClass().getResourceAsStream(\"wro.xml\");"
  },
  {
    "devdecision": "Version 1",
    "id": 47961,
    "v2": "return TestWroModel.class.getResourceAsStream(\"wro.xml\"); //return WroTestUtils.getClassRelativeResource(TestWroModel.class, \"wro.xml\");",
    "resolution": "return getClass().getResourceAsStream(\"wro.xml\");",
    "conflict": "return getClass().getResourceAsStream(\"wro.xml\");"
  },
  {
    "devdecision": "Version 1",
    "id": 47966,
    "v2": "uriLocatorFactory = new UriLocatorFactory(new DuplicateResourceDetector()); // use locators with wildcard disabled - to avoid invalid xml parsing error",
    "resolution": "uriLocatorFactory = new SimpleUriLocatorFactory(); //use locators with wildcard disabled - to avoid invalid xml parsing error",
    "conflict": "uriLocatorFactory = new SimpleUriLocatorFactory(); //use locators with wildcard disabled - to avoid invalid xml parsing error"
  },
  {
    "devdecision": "Version 1",
    "id": 47994,
    "v2": "//TODO: hold a list of processed resources in order to avoid duplicates",
    "resolution": "// TODO: hold a list of processed resources in order to avoid duplicates",
    "conflict": "// TODO: hold a list of processed resources in order to avoid duplicates"
  },
  {
    "devdecision": "Combination",
    "id": 47999,
    "v2": "public class TestYUIJsCompressorProcessor extends AbstractWroTest { private final ResourcePostProcessor processor = YUIJsCompressorProcessor.doMungeCompressor();",
    "resolution": "public class TestYUIJsCompressorProcessor { private final ResourcePostProcessor processor = YUIJsCompressorProcessor.doMungeCompressor();",
    "conflict": "public class TestYUIJsCompressorProcessor { private final ResourcePostProcessor processor = new YUIJsCompressorProcessor();"
  },
  {
    "devdecision": "Version 1",
    "id": 48013,
    "v2": "import ro.isdc.wro.model.group.processor.GroupsProcessor; import ro.isdc.wro.model.resource.factory.UriLocatorFactory; import ro.isdc.wro.util.WroTestUtils;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 48027,
    "v2": "//because we cannot return null, return a stream containing nothing. return EMPTY_STREAM;",
    "resolution": "//because we cannot return null, return a stream containing nothing. return EMPTY_STREAM;",
    "conflict": "// because we cannot return null, return a stream containing nothing. return new ByteArrayInputStream(new byte[] {});"
  },
  {
    "devdecision": "Combination",
    "id": 48028,
    "v2": "public class TestWroManager extends AbstractWroTest { private static final Logger LOG = LoggerFactory.getLogger(TestWroManager.class);",
    "resolution": "public class TestWroManager { private static final Logger LOG = LoggerFactory.getLogger(TestWroManager.class);",
    "conflict": "public class TestWroManager {"
  },
  {
    "devdecision": "Combination",
    "id": 48029,
    "v2": "WroTestUtils.compare(IOUtils.toString(expectedInputStream, encoding), IOUtils.toString(actualInputStream, encoding)); expectedInputStream.close(); actualInputStream.close();",
    "resolution": "WroTestUtils.compare(expectedInputStream, actualInputStream); expectedInputStream.close(); actualInputStream.close();",
    "conflict": "WroTestUtils.compare(expectedInputStream, actualInputStream);"
  },
  {
    "devdecision": "Combination",
    "id": 48054,
    "v2": "LOG.debug(\"Content to fingerprint: [\" + StringUtils.abbreviate(content, 40) + \"]\"); hash = fingerprintCreator.create(new ByteArrayInputStream(content.getBytes()));",
    "resolution": "LOG.debug(\"Content to fingerprint: [\" + StringUtils.abbreviate(content, 40) + \"]\"); hash = hashBuilder.getHash(new ByteArrayInputStream(content.getBytes()));",
    "conflict": "hash = hashBuilder.getHash(new ByteArrayInputStream(content.getBytes()));"
  }
]
}