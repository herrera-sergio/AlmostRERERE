{"conflicts":[
  {
    "devdecision": "Concatenation",
    "id": 74429,
    "v2": "import org.elasticsearch.core.Nullable; import org.elasticsearch.core.Tuple;",
    "resolution": "import org.elasticsearch.test.ESTestCase;import org.elasticsearch.core.Nullable; import org.elasticsearch.core.Tuple;",
    "conflict": "import org.elasticsearch.test.ESTestCase;"
  },
  {
    "devdecision": "Version 2",
    "id": 74435,
    "v2": "if (context.isShadowed(fieldPath)) { return NO_OP_FIELDMAPPER;",
    "resolution": "if (context.isShadowed(fieldPath)) { return NO_OP_FIELDMAPPER;",
    "conflict": "if (context.isShadowedPath(fieldPath)) { return new NoOpFieldMapper(subfields[subfields.length - 1], fieldPath);"
  },
  {
    "devdecision": "Manual",
    "id": 74449,
    "v2": "protected final RuntimeField createRuntimeField(MappingParserContext parserContext) {",
    "resolution": "protected final RuntimeField createRuntimeField(MappingParserContext parserContext, Function<SearchLookup, ObjectFieldScript.LeafFactory> parentScriptFactory) {",
    "conflict": "protected final RuntimeField createRuntimeField(Mapper.TypeParser.ParserContext parserContext, Function<SearchLookup, ObjectFieldScript.LeafFactory> parentScriptFactory) {"
  },
  {
    "devdecision": "Manual",
    "id": 74453,
    "v2": "RuntimeField parse(String name, Map<String, Object> node, MappingParserContext parserContext)",
    "resolution": "RuntimeField parse(String name, Map<String, Object> node, MappingParserContext parserContext, Function<SearchLookup, ObjectFieldScript.LeafFactory> parentScriptFactory)",
    "conflict": "RuntimeField parse(String name, Map<String, Object> node, Mapper.TypeParser.ParserContext parserContext, Function<SearchLookup, ObjectFieldScript.LeafFactory> parentScriptFactory)"
  },
  {
    "devdecision": "Combination",
    "id": 74454,
    "v2": "MappingParserContext parserContext,",
    "resolution": "MappingParserContext parserContext, Function<SearchLookup, ObjectFieldScript.LeafFactory> parentScriptFactory,",
    "conflict": "Mapper.TypeParser.ParserContext parserContext, Function<SearchLookup, ObjectFieldScript.LeafFactory> parentScriptFactory,"
  },
  {
    "devdecision": "Concatenation",
    "id": 74455,
    "v2": "import org.elasticsearch.index.mapper.FieldMapper.Parameter;",
    "resolution": "import org.elasticsearch.script.ObjectFieldScript; import org.elasticsearch.search.lookup.SearchLookup;import org.elasticsearch.index.mapper.FieldMapper.Parameter;",
    "conflict": "import org.elasticsearch.script.ObjectFieldScript; import org.elasticsearch.search.lookup.SearchLookup;"
  },
  {
    "devdecision": "Combination",
    "id": 74458,
    "v2": "return builder.createRuntimeField(parserContext);",
    "resolution": "return builder.createRuntimeField(parserContext, parentScriptFactory);",
    "conflict": "builder.validate(); return builder.createRuntimeField(parserContext, parentScriptFactory);"
  },
  {
    "devdecision": "Version 2",
    "id": 74461,
    "v2": "import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnboundedGeoTileGridTiler; import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnboundedGeoHashGridTiler; import org.elasticsearch.xpack.spatial.search.aggregations.metrics.GeoShapeCentroidAggregator;",
    "resolution": "import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnboundedGeoTileGridTiler; import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnboundedGeoHashGridTiler; import org.elasticsearch.xpack.spatial.search.aggregations.metrics.GeoShapeCentroidAggregator;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 74462,
    "v2": "import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnBoundedGeoTileGridTiler; import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnboundedGeoHashGridTiler; import org.elasticsearch.xpack.spatial.search.aggregations.metrics.GeoShapeCentroidAggregator;",
    "resolution": "import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnBoundedGeoTileGridTiler; import org.elasticsearch.xpack.spatial.search.aggregations.bucket.geogrid.UnboundedGeoHashGridTiler;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 74469,
    "v2": "return (IFD) indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName(), () -> this.lookup().forkAndTrackFieldReferences(fieldType.name()));",
    "resolution": "return (IFD) indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName(), () -> this.lookup().forkAndTrackFieldReferences(fieldType.name()));",
    "conflict": "return (IFD) indexFieldDataService.apply(fieldType, fullyQualifiedIndex.getName(), this::lookup);"
  },
  {
    "devdecision": "Version 2",
    "id": 74471,
    "v2": "",
    "resolution": "",
    "conflict": "import org.apache.lucene.search.Query; import org.elasticsearch.Version; import org.elasticsearch.cluster.metadata.IndexMetadata;"
  },
  {
    "devdecision": "Version 2",
    "id": 74472,
    "v2": "",
    "resolution": "",
    "conflict": "import java.io.IOException; import java.util.Collections;"
  },
  {
    "devdecision": "Version 2",
    "id": 74473,
    "v2": "() -> disabledMapper.fieldType(\"field\").fielddataBuilder(\"test\", () -> { throw new UnsupportedOperationException(); })",
    "resolution": "() -> disabledMapper.fieldType(\"field\").fielddataBuilder(\"test\", () -> { throw new UnsupportedOperationException(); })",
    "conflict": "() -> disabledMapper.fieldType(\"field\").fielddataBuilder(\"test\", null)"
  },
  {
    "devdecision": "Version 2",
    "id": 74474,
    "v2": "enabledMapper.fieldType(\"field\").fielddataBuilder(\"test\", () -> { throw new UnsupportedOperationException(); }); // no exception this time",
    "resolution": "enabledMapper.fieldType(\"field\").fielddataBuilder(\"test\", () -> { throw new UnsupportedOperationException(); }); // no exception this time",
    "conflict": "enabledMapper.fieldType(\"field\").fielddataBuilder(\"test\", null); // no exception this time"
  },
  {
    "devdecision": "Version 2",
    "id": 74480,
    "v2": "",
    "resolution": "",
    "conflict": "FieldMapper.Builder<?> builder = new KeywordFieldMapper.Builder(\"foo\"); Mapper.TypeParser.ParserContext parserContext = new Mapper.TypeParser.ParserContext(null, null, null, null, null, null, null);"
  },
  {
    "devdecision": "Manual",
    "id": 74485,
    "v2": "indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), systemIndices); clusterService.addListener(new SystemIndexMetadataUpgradeService(systemIndices, clusterService));",
    "resolution": "indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), systemIndices, scriptService); clusterService.addListener(new SystemIndexMetadataUpgradeService(systemIndices, clusterService));",
    "conflict": "indicesModule.getMapperRegistry(), settingsModule.getIndexScopedSettings(), scriptService);"
  },
  {
    "devdecision": "Manual",
    "id": 74486,
    "v2": "IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, new SystemIndices(Map.of(\"system-plugin\", List.of(new SystemIndexDescriptor(\".system\", \"a system index\")))) );",
    "resolution": "IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, new SystemIndices(Map.of(\"system-plugin\", List.of(new SystemIndexDescriptor(\".system\", \"a system index\")))),",
    "conflict": "IndexScopedSettings.DEFAULT_SCOPED_SETTINGS, null);"
  },
  {
    "devdecision": "Manual",
    "id": 74488,
    "v2": "indexScopedSettings, new SystemIndices(Map.of())),",
    "resolution": "indexScopedSettings, new SystemIndices(Map.of()),",
    "conflict": "indexScopedSettings, null),"
  },
  {
    "devdecision": "Concatenation",
    "id": 74490,
    "v2": "import org.elasticsearch.action.DocWriteRequest;",
    "resolution": "import org.elasticsearch.Version; import org.elasticsearch.action.ActionListener; import org.elasticsearch.action.ActionRequestValidationException;import org.elasticsearch.action.DocWriteRequest;",
    "conflict": "import org.elasticsearch.Version; import org.elasticsearch.action.ActionListener; import org.elasticsearch.action.ActionRequestValidationException;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74492,
    "v2": "case INGEST_ORIGIN: case STACK_ORIGIN:",
    "resolution": "case REINDEX_ORIGIN:case INGEST_ORIGIN: case STACK_ORIGIN:",
    "conflict": "case REINDEX_ORIGIN:"
  },
  {
    "devdecision": "Combination",
    "id": 74495,
    "v2": "import java.util.List; import java.util.function.BiFunction;",
    "resolution": "import java.util.function.Supplier;",
    "conflict": "import java.util.function.Supplier;"
  },
  {
    "devdecision": "Combination",
    "id": 74500,
    "v2": "new GetAsyncSearchAction.Request(response.getId()) .setWaitForCompletionTimeout(TimeValue.timeValueMillis(10))).get();",
    "resolution": "new GetAsyncResultRequest(response.getId()) .setWaitForCompletionTimeout(TimeValue.timeValueMillis(10))).get();",
    "conflict": "new GetAsyncResultRequest(response.getId()) .setWaitForCompletion(TimeValue.timeValueMillis(10))).get();"
  },
  {
    "devdecision": "Combination",
    "id": 74515,
    "v2": "import java.util.List;",
    "resolution": "import java.util.HashMap; import java.util.List; import java.util.Map;",
    "conflict": "import java.util.HashMap; import java.util.Map;"
  },
  {
    "devdecision": "Manual",
    "id": 74517,
    "v2": "action = new RestReindexAction(); controller().registerHandler(action);",
    "resolution": "action = new RestReindexAction(null); controller().registerHandler(action);",
    "conflict": "action = new RestReindexAction(controller(), null);"
  },
  {
    "devdecision": "Manual",
    "id": 74519,
    "v2": "HandshakingTransportAddressConnector.PROBE_CONNECT_TIMEOUT_SETTING, HandshakingTransportAddressConnector.PROBE_HANDSHAKE_TIMEOUT_SETTING);",
    "resolution": "HandshakingTransportAddressConnector.PROBE_CONNECT_TIMEOUT_SETTING, HandshakingTransportAddressConnector.PROBE_HANDSHAKE_TIMEOUT_SETTING, ReindexHeaders.REINDEX_INCLUDED_HEADERS);",
    "conflict": "ReindexHeaders.REINDEX_INCLUDED_HEADERS);"
  },
  {
    "devdecision": "Combination",
    "id": 74521,
    "v2": "",
    "resolution": "import org.elasticsearch.search.sort.FieldSortBuilder; import org.elasticsearch.search.sort.SortBuilder; import org.elasticsearch.search.sort.SortOrder;",
    "conflict": "import org.elasticsearch.search.sort.FieldSortBuilder; import org.elasticsearch.search.sort.SortBuilder; import org.elasticsearch.search.sort.SortOrder; import org.elasticsearch.search.builder.SearchSourceBuilder;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74522,
    "v2": "import org.elasticsearch.search.builder.SearchSourceBuilder;",
    "resolution": "import org.elasticsearch.search.builder.SearchSourceBuilder;import org.elasticsearch.search.sort.FieldSortBuilder; import org.elasticsearch.search.sort.SortBuilder; import org.elasticsearch.search.sort.SortOrder;",
    "conflict": "import org.elasticsearch.search.sort.FieldSortBuilder; import org.elasticsearch.search.sort.SortBuilder; import org.elasticsearch.search.sort.SortOrder;"
  },
  {
    "devdecision": "Combination",
    "id": 74523,
    "v2": "client.validateRequest(SearchAction.INSTANCE, (SearchRequest r) -> assertTrue(r.allowPartialSearchResults() == Boolean.FALSE)); SearchResponse searchResponse = createSearchResponse();",
    "resolution": "client.validateRequest(SearchAction.INSTANCE, (SearchRequest r) -> assertTrue(r.allowPartialSearchResults() == Boolean.FALSE)); SearchResponse searchResponse = createSearchResponse(seqNoGenerator);",
    "conflict": "SearchResponse searchResponse = createSearchResponse(seqNoGenerator);"
  },
  {
    "devdecision": "Manual",
    "id": 74532,
    "v2": "// 29 system roles plus the three we created assertThat(roles.size(), equalTo(32));",
    "resolution": "// 29 system roles plus the three we created assertThat(roles.size(), equalTo(33));",
    "conflict": "// 27 system roles plus the three we created assertThat(roles.size(), equalTo(31));"
  },
  {
    "devdecision": "Manual",
    "id": 74535,
    "v2": "// 29 system roles plus the three we created assertThat(roles.size(), equalTo(32));",
    "resolution": "// 29 system roles plus the three we created assertThat(roles.size(), equalTo(33));",
    "conflict": "// 27 system roles plus the three we created assertThat(roles.size(), equalTo(31));"
  },
  {
    "devdecision": "Combination",
    "id": 74540,
    "v2": "private final TransformClient transformClient = new TransformClient(this);",
    "resolution": "private final TransformClient transformClient = new TransformClient(this); private final EnrichClient enrichClient = new EnrichClient(this);",
    "conflict": "private final DataFrameClient dataFrameClient = new DataFrameClient(this); private final EnrichClient enrichClient = new EnrichClient(this);"
  },
  {
    "devdecision": "Combination",
    "id": 74541,
    "v2": "apiName.startsWith(\"transform.\") == false &&",
    "resolution": "apiName.startsWith(\"enrich.\") == false && apiName.startsWith(\"transform.\") == false &&",
    "conflict": "apiName.startsWith(\"enrich.\") == false && apiName.startsWith(\"data_frame\") == false &&"
  },
  {
    "devdecision": "Combination",
    "id": 74544,
    "v2": "private final TransformClient transformClient = new TransformClient(this);",
    "resolution": "private final TransformClient transformClient = new TransformClient(this); private final EnrichClient enrichClient = new EnrichClient(this);",
    "conflict": "private final DataFrameClient dataFrameClient = new DataFrameClient(this); private final EnrichClient enrichClient = new EnrichClient(this);"
  },
  {
    "devdecision": "Combination",
    "id": 74545,
    "v2": "apiName.startsWith(\"transform.\") == false &&",
    "resolution": "apiName.startsWith(\"enrich.\") == false && apiName.startsWith(\"transform.\") == false &&",
    "conflict": "apiName.startsWith(\"enrich.\") == false && apiName.startsWith(\"data_frame\") == false &&"
  },
  {
    "devdecision": "Combination",
    "id": 74554,
    "v2": "public static final String TRANSFORM_ORIGIN = \"transform\";",
    "resolution": "public static final String TRANSFORM_ORIGIN = \"transform\"; public static final String REINDEX_ORIGIN = \"reindex\";",
    "conflict": "public static final String DATA_FRAME_ORIGIN = \"data_frame\"; public static final String REINDEX_ORIGIN = \"reindex\";"
  },
  {
    "devdecision": "Combination",
    "id": 74555,
    "v2": "import static org.elasticsearch.xpack.core.ClientHelper.TRANSFORM_ORIGIN;",
    "resolution": "import static org.elasticsearch.xpack.core.ClientHelper.TRANSFORM_ORIGIN; import static org.elasticsearch.xpack.core.ClientHelper.REINDEX_ORIGIN;",
    "conflict": "import static org.elasticsearch.xpack.core.ClientHelper.REINDEX_ORIGIN; import static org.elasticsearch.xpack.core.ClientHelper.DATA_FRAME_ORIGIN;"
  },
  {
    "devdecision": "Version 1",
    "id": 74557,
    "v2": "), this, client ) );",
    "resolution": "), this, client));",
    "conflict": "), this, client));"
  },
  {
    "devdecision": "Version 1",
    "id": 74559,
    "v2": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);",
    "resolution": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);",
    "conflict": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);"
  },
  {
    "devdecision": "Version 1",
    "id": 74564,
    "v2": "), this, client ) );",
    "resolution": "), this, client));",
    "conflict": "), this, client));"
  },
  {
    "devdecision": "Version 1",
    "id": 74566,
    "v2": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);",
    "resolution": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);",
    "conflict": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);"
  },
  {
    "devdecision": "Combination",
    "id": 74571,
    "v2": "indexRequest.source(ingestDocument.getSourceAndMetadata(), indexRequest.getContentType());",
    "resolution": "indexRequest.source(ingestDocument.getSourceAndMetadata(), indexRequest.getContentType()); handler.accept(null);",
    "conflict": "indexRequest.source(ingestDocument.getSourceAndMetadata()); handler.accept(null);"
  },
  {
    "devdecision": "Manual",
    "id": 74574,
    "v2": "DELEGATE_PKI, MANAGE_OWN_API_KEY).collect(Collectors.toMap(cp -> cp.name(), cp -> cp)));",
    "resolution": "DELEGATE_PKI, MANAGE_OWN_API_KEY, MANAGE_ENRICH).collect(Collectors.toMap(cp -> cp.name(), cp -> cp)));",
    "conflict": "MANAGE_ENRICH).collect(Collectors.toMap(cp -> cp.name(), cp -> cp)));"
  },
  {
    "devdecision": "Combination",
    "id": 74576,
    "v2": "indexRequest.source(ingestDocument.getSourceAndMetadata(), indexRequest.getContentType());",
    "resolution": "indexRequest.source(ingestDocument.getSourceAndMetadata(), indexRequest.getContentType()); handler.accept(null);",
    "conflict": "indexRequest.source(ingestDocument.getSourceAndMetadata()); handler.accept(null);"
  },
  {
    "devdecision": "Manual",
    "id": 74579,
    "v2": "DELEGATE_PKI, MANAGE_OWN_API_KEY).collect(Collectors.toUnmodifiableMap(NamedClusterPrivilege::name, Function.identity()));",
    "resolution": "DELEGATE_PKI, MANAGE_OWN_API_KEY, MANAGE_ENRICH).collect(Collectors.toUnmodifiableMap(NamedClusterPrivilege::name, Function.identity()));",
    "conflict": "MANAGE_ENRICH).collect(Collectors.toUnmodifiableMap(NamedClusterPrivilege::name, Function.identity()));"
  },
  {
    "devdecision": "Combination",
    "id": 74592,
    "v2": "import java.util.function.Consumer; import java.util.function.LongSupplier;",
    "resolution": "import java.util.function.IntConsumer; import java.util.function.LongSupplier;",
    "conflict": "import java.util.function.IntConsumer;"
  },
  {
    "devdecision": "Combination",
    "id": 74599,
    "v2": "import java.util.function.Consumer; import java.util.function.LongSupplier;",
    "resolution": "import java.util.function.IntConsumer; import java.util.function.LongSupplier;",
    "conflict": "import java.util.function.IntConsumer;"
  },
  {
    "devdecision": "None",
    "id": 74604,
    "v2": "l.onResponse(new SimulatePipelineResponse(request.getPipeline().getId(), request.isVerbose(), responses)); }));",
    "resolution": "} }));",
    "conflict": "} });"
  },
  {
    "devdecision": "None",
    "id": 74606,
    "v2": "l.onResponse(new SimulatePipelineResponse(request.getPipeline().getId(), request.isVerbose(), responses)); }));",
    "resolution": "} }));",
    "conflict": "} });"
  },
  {
    "devdecision": "Concatenation",
    "id": 74608,
    "v2": "private static final Automaton MANAGE_SLM_AUTOMATON = patterns(\"cluster:admin/slm/*\", StartILMAction.NAME, StopILMAction.NAME, GetStatusAction.NAME); private static final Automaton READ_SLM_AUTOMATON = patterns(GetSnapshotLifecycleAction.NAME, GetStatusAction.NAME);",
    "resolution": "private static final Automaton MANAGE_ENRICH_AUTOMATON = patterns(\"cluster:admin/xpack/enrich/*\");private static final Automaton MANAGE_SLM_AUTOMATON = patterns(\"cluster:admin/slm/*\", StartILMAction.NAME, StopILMAction.NAME, GetStatusAction.NAME); private static final Automaton READ_SLM_AUTOMATON = patterns(GetSnapshotLifecycleAction.NAME, GetStatusAction.NAME);",
    "conflict": "private static final Automaton MANAGE_ENRICH_AUTOMATON = patterns(\"cluster:admin/xpack/enrich/*\");"
  },
  {
    "devdecision": "Concatenation",
    "id": 74609,
    "v2": "public static final ClusterPrivilege MANAGE_SLM =            new ClusterPrivilege(\"manage_slm\", MANAGE_SLM_AUTOMATON); public static final ClusterPrivilege READ_SLM =              new ClusterPrivilege(\"read_slm\", READ_SLM_AUTOMATON);",
    "resolution": "public static final ClusterPrivilege MANAGE_ENRICH =         new ClusterPrivilege(\"manage_enrich\", MANAGE_ENRICH_AUTOMATON);public static final ClusterPrivilege MANAGE_SLM =            new ClusterPrivilege(\"manage_slm\", MANAGE_SLM_AUTOMATON); public static final ClusterPrivilege READ_SLM =              new ClusterPrivilege(\"read_slm\", READ_SLM_AUTOMATON);",
    "conflict": "public static final ClusterPrivilege MANAGE_ENRICH =         new ClusterPrivilege(\"manage_enrich\", MANAGE_ENRICH_AUTOMATON);"
  },
  {
    "devdecision": "Manual",
    "id": 74610,
    "v2": "entry(\"manage_slm\", MANAGE_SLM), entry(\"read_slm\", READ_SLM));",
    "resolution": "entry(\"manage_slm\", MANAGE_SLM), entry(\"read_slm\", READ_SLM), entry(\"manage_enrich\", MANAGE_ENRICH));",
    "conflict": "entry(\"manage_enrich\", MANAGE_ENRICH));"
  },
  {
    "devdecision": "Concatenation",
    "id": 74613,
    "v2": "private static final Automaton MANAGE_SLM_AUTOMATON = patterns(\"cluster:admin/slm/*\", StartILMAction.NAME, StopILMAction.NAME, GetStatusAction.NAME); private static final Automaton READ_SLM_AUTOMATON = patterns(GetSnapshotLifecycleAction.NAME, GetStatusAction.NAME);",
    "resolution": "private static final Automaton MANAGE_ENRICH_AUTOMATON = patterns(\"cluster:admin/xpack/enrich/*\");private static final Automaton MANAGE_SLM_AUTOMATON = patterns(\"cluster:admin/slm/*\", StartILMAction.NAME, StopILMAction.NAME, GetStatusAction.NAME); private static final Automaton READ_SLM_AUTOMATON = patterns(GetSnapshotLifecycleAction.NAME, GetStatusAction.NAME);",
    "conflict": "private static final Automaton MANAGE_ENRICH_AUTOMATON = patterns(\"cluster:admin/xpack/enrich/*\");"
  },
  {
    "devdecision": "Concatenation",
    "id": 74614,
    "v2": "public static final ClusterPrivilege MANAGE_SLM =            new ClusterPrivilege(\"manage_slm\", MANAGE_SLM_AUTOMATON); public static final ClusterPrivilege READ_SLM =              new ClusterPrivilege(\"read_slm\", READ_SLM_AUTOMATON);",
    "resolution": "public static final ClusterPrivilege MANAGE_ENRICH =         new ClusterPrivilege(\"manage_enrich\", MANAGE_ENRICH_AUTOMATON);public static final ClusterPrivilege MANAGE_SLM =            new ClusterPrivilege(\"manage_slm\", MANAGE_SLM_AUTOMATON); public static final ClusterPrivilege READ_SLM =              new ClusterPrivilege(\"read_slm\", READ_SLM_AUTOMATON);",
    "conflict": "public static final ClusterPrivilege MANAGE_ENRICH =         new ClusterPrivilege(\"manage_enrich\", MANAGE_ENRICH_AUTOMATON);"
  },
  {
    "devdecision": "Concatenation",
    "id": 74615,
    "v2": ".put(\"manage_slm\", MANAGE_SLM) .put(\"read_slm\", READ_SLM)",
    "resolution": ".put(\"manage_enrich\", MANAGE_ENRICH).put(\"manage_slm\", MANAGE_SLM) .put(\"read_slm\", READ_SLM)",
    "conflict": ".put(\"manage_enrich\", MANAGE_ENRICH)"
  },
  {
    "devdecision": "Combination",
    "id": 74618,
    "v2": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class)); final LazilyInitializedRerouteService lazilyInitializedRerouteService = new LazilyInitializedRerouteService();",
    "resolution": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);",
    "conflict": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);"
  },
  {
    "devdecision": "Combination",
    "id": 74620,
    "v2": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class)); final LazilyInitializedRerouteService lazilyInitializedRerouteService = new LazilyInitializedRerouteService();",
    "resolution": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);",
    "conflict": "scriptModule.getScriptService(), analysisModule.getAnalysisRegistry(), pluginsService.filterPlugins(IngestPlugin.class), client);"
  },
  {
    "devdecision": "Combination",
    "id": 74623,
    "v2": "Collections.emptyList()), client, actionFilters, indexNameExpressionResolver,",
    "resolution": "Collections.emptyList(), client), client, actionFilters, indexNameExpressionResolver,",
    "conflict": "Collections.emptyList(), client), transportShardBulkAction, client, actionFilters, indexNameExpressionResolver,"
  },
  {
    "devdecision": "Combination",
    "id": 74624,
    "v2": "CloseIndexAction.NAME); private static final Automaton MANAGE_ILM_AUTOMATON = patterns(\"indices:admin/ilm/*\");",
    "resolution": "CloseIndexAction.NAME + \"*\"); private static final Automaton MANAGE_ILM_AUTOMATON = patterns(\"indices:admin/ilm/*\");",
    "conflict": "CloseIndexAction.NAME + \"*\");"
  },
  {
    "devdecision": "Concatenation",
    "id": 74625,
    "v2": "import org.elasticsearch.test.disruption.BusyMasterServiceDisruption; import org.elasticsearch.test.disruption.ServiceDisruptionScheme;",
    "resolution": "import org.elasticsearch.test.disruption.BusyMasterServiceDisruption; import org.elasticsearch.test.disruption.ServiceDisruptionScheme;import org.elasticsearch.test.discovery.TestZenDiscovery;",
    "conflict": "import org.elasticsearch.test.discovery.TestZenDiscovery;"
  },
  {
    "devdecision": "Combination",
    "id": 74631,
    "v2": "import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger; import org.elasticsearch.Version;",
    "resolution": "import org.apache.logging.log4j.LogManager; import org.apache.logging.log4j.Logger;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 74642,
    "v2": "this.nodeJoinController = new NodeJoinController(masterService, allocationService, electMaster); this.nodeRemovalExecutor = new NodeRemovalClusterStateTaskExecutor(allocationService, electMaster, this::submitRejoin, logger);",
    "resolution": "this.nodeJoinController = new NodeJoinController(masterService, allocationService, electMaster); this.nodeRemovalExecutor = new ZenNodeRemovalClusterStateTaskExecutor(allocationService, electMaster, this::submitRejoin, logger);",
    "conflict": "this.nodeJoinController = new NodeJoinController(masterService, allocationService, electMaster, settings); this.nodeRemovalExecutor = new ZenNodeRemovalClusterStateTaskExecutor(allocationService, electMaster, this::submitRejoin, logger);"
  },
  {
    "devdecision": "Combination",
    "id": 74643,
    "v2": "",
    "resolution": "import org.elasticsearch.common.io.stream.StreamInput; import org.elasticsearch.common.io.stream.StreamOutput;",
    "conflict": "import org.elasticsearch.common.io.stream.StreamInput; import org.elasticsearch.common.io.stream.StreamOutput; import org.elasticsearch.common.settings.Settings;"
  },
  {
    "devdecision": "None",
    "id": 74644,
    "v2": "import org.elasticsearch.discovery.Discovery;",
    "resolution": "import org.elasticsearch.index.shard.ShardId;",
    "conflict": "import org.elasticsearch.common.settings.Settings; import org.elasticsearch.cluster.coordination.FailedToCommitClusterStateException;"
  },
  {
    "devdecision": "Combination",
    "id": 74646,
    "v2": "if (USE_MOCK_PINGS.get(settings)) { return new MockZenPing(this);",
    "resolution": "if (USE_MOCK_PINGS.get(settings) && USE_ZEN2.get(settings) == false) { return new MockZenPing(this);",
    "conflict": "if (USE_MOCK_PINGS.get(settings) && USE_ZEN2.get(settings) == false) { return new MockZenPing(settings, this);"
  },
  {
    "devdecision": "Combination",
    "id": 74648,
    "v2": "private final String nodeName;  private BiConsumer<ClusterChangedEvent, Discovery.AckListener> clusterStatePublisher;",
    "resolution": "protected ClusterStatePublisher clusterStatePublisher;  private final String nodeName;",
    "conflict": "protected ClusterStatePublisher clusterStatePublisher;"
  },
  {
    "devdecision": "Version 1",
    "id": 74653,
    "v2": "protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) throws Exception {",
    "resolution": "protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) {",
    "conflict": "protected void masterOperation(Task task, Request request, ClusterState state, ActionListener<Response> listener) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74693,
    "v2": "protected boolean nodeConnected(DiscoveryNode discoveryNode) { return true; }",
    "resolution": "protected boolean nodeConnected(DiscoveryNode discoveryNode) { return true; }",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 74707,
    "v2": "",
    "resolution": "import org.elasticsearch.client.indexlifecycle.LifecyclePolicy; import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest;",
    "conflict": "import org.elasticsearch.client.indexlifecycle.LifecyclePolicy; import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest; import org.elasticsearch.cluster.health.ClusterHealthStatus;"
  },
  {
    "devdecision": "Combination",
    "id": 74712,
    "v2": "",
    "resolution": "import org.elasticsearch.client.indexlifecycle.LifecyclePolicy; import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest;",
    "conflict": "import org.elasticsearch.client.indexlifecycle.LifecyclePolicy; import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest; import org.elasticsearch.cluster.health.ClusterHealthStatus;"
  },
  {
    "devdecision": "Version 2",
    "id": 74720,
    "v2": "public static NumericDocValuesField newSoftDeletesField() { return new NumericDocValuesField(SOFT_DELETES_FIELD, 1);",
    "resolution": "public static NumericDocValuesField newSoftDeletesField() { return new NumericDocValuesField(SOFT_DELETES_FIELD, 1);",
    "conflict": "public static NumericDocValuesField newSoftDeleteField() { return new NumericDocValuesField(SOFT_DELETE_FIELD, 1);"
  },
  {
    "devdecision": "Version 2",
    "id": 74728,
    "v2": "for (ParseContext.Document doc : docs) { doc.add(softDeletesField); // soft-deleted every document before adding to Lucene }",
    "resolution": "for (ParseContext.Document doc : docs) { doc.add(softDeletesField); // soft-deleted every document before adding to Lucene }",
    "conflict": "docs.forEach(d -> d.add(softDeleteField));"
  },
  {
    "devdecision": "Version 1",
    "id": 74740,
    "v2": "Mapper.BuilderContext builderContext = new Mapper.BuilderContext(context.indexSettings().getSettings(), context.path());                        mapper = (ObjectMapper) builder.build(builderContext);",
    "resolution": "Mapper.BuilderContext builderContext = new Mapper.BuilderContext(context.indexSettings().getSettings(), context.path()); mapper = (ObjectMapper) builder.build(builderContext);",
    "conflict": "Mapper.BuilderContext builderContext = new Mapper.BuilderContext(context.indexSettings().getSettings(), context.path()); mapper = (ObjectMapper) builder.build(builderContext);"
  },
  {
    "devdecision": "Version 2",
    "id": 74748,
    "v2": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "resolution": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "conflict": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETE_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETE_FIELD, MatchAllDocsQuery::new, newMergePolicy()));"
  },
  {
    "devdecision": "Version 2",
    "id": 74750,
    "v2": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "resolution": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "conflict": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETE_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETE_FIELD, MatchAllDocsQuery::new, newMergePolicy()));"
  },
  {
    "devdecision": "Version 2",
    "id": 74758,
    "v2": "//norelease - AwaitsFix: https://github.com/elastic/elasticsearch/issues/33321 .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false)",
    "resolution": "//norelease - AwaitsFix: https://github.com/elastic/elasticsearch/issues/33321 .put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false)",
    "conflict": ".put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())"
  },
  {
    "devdecision": "Version 2",
    "id": 74765,
    "v2": "//norelease - AwaitsFix: https://github.com/elastic/elasticsearch/issues/33321 builder.put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false);",
    "resolution": "//norelease - AwaitsFix: https://github.com/elastic/elasticsearch/issues/33321 builder.put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false);",
    "conflict": "builder.put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean());"
  },
  {
    "devdecision": "Version 2",
    "id": 74766,
    "v2": "//norelease - AwaitsFix: https://github.com/elastic/elasticsearch/issues/33321 .setSettings(Settings.builder().put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false)",
    "resolution": "//norelease - AwaitsFix: https://github.com/elastic/elasticsearch/issues/33321 .setSettings(Settings.builder().put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), false)",
    "conflict": ".setSettings(Settings.builder().put(IndexSettings.INDEX_SOFT_DELETES_SETTING.getKey(), randomBoolean())"
  },
  {
    "devdecision": "Concatenation",
    "id": 74768,
    "v2": "import org.elasticsearch.client.security.RefreshPolicy;",
    "resolution": "import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest;import org.elasticsearch.client.security.RefreshPolicy;",
    "conflict": "import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest;"
  },
  {
    "devdecision": "Version 2",
    "id": 74773,
    "v2": "public static NumericDocValuesField newSoftDeletesField() { return new NumericDocValuesField(SOFT_DELETES_FIELD, 1);",
    "resolution": "public static NumericDocValuesField newSoftDeletesField() { return new NumericDocValuesField(SOFT_DELETES_FIELD, 1);",
    "conflict": "public static NumericDocValuesField newSoftDeleteField() { return new NumericDocValuesField(SOFT_DELETE_FIELD, 1);"
  },
  {
    "devdecision": "Version 2",
    "id": 74781,
    "v2": "for (ParseContext.Document doc : docs) { doc.add(softDeletesField); // soft-deleted every document before adding to Lucene }",
    "resolution": "for (ParseContext.Document doc : docs) { doc.add(softDeletesField); // soft-deleted every document before adding to Lucene }",
    "conflict": "docs.forEach(d -> d.add(softDeleteField));"
  },
  {
    "devdecision": "Version 2",
    "id": 74799,
    "v2": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "resolution": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "conflict": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETE_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETE_FIELD, MatchAllDocsQuery::new, newMergePolicy()));"
  },
  {
    "devdecision": "Version 2",
    "id": 74801,
    "v2": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "resolution": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETES_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD, MatchAllDocsQuery::new, newMergePolicy()));",
    "conflict": "IndexWriterConfig config = newIndexWriterConfig().setSoftDeletesField(Lucene.SOFT_DELETE_FIELD) .setMergePolicy(new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETE_FIELD, MatchAllDocsQuery::new, newMergePolicy()));"
  },
  {
    "devdecision": "Concatenation",
    "id": 74809,
    "v2": "import org.elasticsearch.client.security.RefreshPolicy;",
    "resolution": "import org.elasticsearch.client.security.RefreshPolicy;import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest;",
    "conflict": "import org.elasticsearch.client.indexlifecycle.PutLifecyclePolicyRequest; import org.elasticsearch.client.indexlifecycle.DeleteLifecyclePolicyRequest;"
  },
  {
    "devdecision": "Manual",
    "id": 74810,
    "v2": "location = translog.add(new Translog.NoOp(indexResult.getSeqNo(), index.primaryTerm(), indexResult.getFailure().toString()));",
    "resolution": "final NoOp noOp = new NoOp(indexResult.getSeqNo(), index.primaryTerm(), index.origin(), index.startTime(), indexResult.getFailure().toString()); location = innerNoOp(noOp).getTranslogLocation();",
    "conflict": "final NoOp noOp = new NoOp(indexResult.getSeqNo(), index.primaryTerm(), index.origin(), index.startTime(), indexResult.getFailure().getMessage()); location = innerNoOp(noOp).getTranslogLocation();"
  },
  {
    "devdecision": "Manual",
    "id": 74813,
    "v2": "location = translog.add(new Translog.NoOp(indexResult.getSeqNo(), index.primaryTerm(), indexResult.getFailure().toString()));",
    "resolution": "final NoOp noOp = new NoOp(indexResult.getSeqNo(), index.primaryTerm(), index.origin(), index.startTime(), indexResult.getFailure().toString()); location = innerNoOp(noOp).getTranslogLocation();",
    "conflict": "final NoOp noOp = new NoOp(indexResult.getSeqNo(), index.primaryTerm(), index.origin(), index.startTime(), indexResult.getFailure().getMessage()); location = innerNoOp(noOp).getTranslogLocation();"
  },
  {
    "devdecision": "Combination",
    "id": 74816,
    "v2": "apiName.startsWith(\"graph.\") == false && apiName.startsWith(\"migration.\") == false) {",
    "resolution": "apiName.startsWith(\"graph.\") == false && apiName.startsWith(\"migration.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) {",
    "conflict": "apiName.startsWith(\"migration.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) {"
  },
  {
    "devdecision": "Combination",
    "id": 74817,
    "v2": "apiName.startsWith(\"graph.\") == false && apiName.startsWith(\"migration.\") == false) {",
    "resolution": "apiName.startsWith(\"graph.\") == false && apiName.startsWith(\"migration.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) {",
    "conflict": "apiName.startsWith(\"migration.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) {"
  },
  {
    "devdecision": "Combination",
    "id": 74825,
    "v2": "new ReplicationTracker(shardId, allocationId.getId(), indexSettings, SequenceNumbers.NO_OPS_PERFORMED, update -> {}) : globalCheckpointSupplier, primaryTerm::get);",
    "resolution": "new ReplicationTracker(shardId, allocationId.getId(), indexSettings, SequenceNumbers.NO_OPS_PERFORMED, update -> {}) : globalCheckpointSupplier, primaryTerm::get, tombstoneDocSupplier());",
    "conflict": "new ReplicationTracker(shardId, allocationId.getId(), indexSettings, SequenceNumbers.NO_OPS_PERFORMED) : globalCheckpointSupplier, primaryTerm::get, tombstoneDocSupplier());"
  },
  {
    "devdecision": "Combination",
    "id": 74828,
    "v2": "new ReplicationTracker(shardId, allocationId.getId(), indexSettings, SequenceNumbers.NO_OPS_PERFORMED, update -> {}) : globalCheckpointSupplier, primaryTerm::get);",
    "resolution": "new ReplicationTracker(shardId, allocationId.getId(), indexSettings, SequenceNumbers.NO_OPS_PERFORMED, update -> {}) : globalCheckpointSupplier, primaryTerm::get, tombstoneDocSupplier());",
    "conflict": "new ReplicationTracker(shardId, allocationId.getId(), indexSettings, SequenceNumbers.NO_OPS_PERFORMED) : globalCheckpointSupplier, primaryTerm::get, tombstoneDocSupplier());"
  },
  {
    "devdecision": "Version 1",
    "id": 74833,
    "v2": "",
    "resolution": "import org.elasticsearch.protocol.xpack.indexlifecycle.ExplainLifecycleRequest; import org.elasticsearch.protocol.xpack.indexlifecycle.SetIndexLifecyclePolicyRequest; import org.elasticsearch.protocol.xpack.indexlifecycle.StartILMRequest; import org.elasticsearch.protocol.xpack.indexlifecycle.StopILMRequest;",
    "conflict": "import org.elasticsearch.protocol.xpack.indexlifecycle.ExplainLifecycleRequest; import org.elasticsearch.protocol.xpack.indexlifecycle.SetIndexLifecyclePolicyRequest; import org.elasticsearch.protocol.xpack.indexlifecycle.StartILMRequest; import org.elasticsearch.protocol.xpack.indexlifecycle.StopILMRequest;"
  },
  {
    "devdecision": "Combination",
    "id": 74835,
    "v2": "apiName.startsWith(\"machine_learning.\") == false && apiName.startsWith(\"watcher.\") == false) {",
    "resolution": "apiName.startsWith(\"machine_learning.\") == false && apiName.startsWith(\"watcher.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) {",
    "conflict": "apiName.startsWith(\"watcher.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) {"
  },
  {
    "devdecision": "Combination",
    "id": 74838,
    "v2": "final DeleteResult deleteResult = new DeleteResult(e, currentVersion, term, unassignedSeqNo, currentlyDeleted == false); return new DeletionStrategy(false, currentlyDeleted, unassignedSeqNo, Versions.NOT_FOUND, deleteResult);",
    "resolution": "final DeleteResult deleteResult = new DeleteResult(e, currentVersion, term, unassignedSeqNo, currentlyDeleted == false); return new DeletionStrategy(false, false, currentlyDeleted, unassignedSeqNo, Versions.NOT_FOUND, deleteResult);",
    "conflict": "final DeleteResult deleteResult = new DeleteResult(e, currentVersion, unassignedSeqNo, currentlyDeleted == false); return new DeletionStrategy(false, false, currentlyDeleted, unassignedSeqNo, Versions.NOT_FOUND, deleteResult);"
  },
  {
    "devdecision": "Combination",
    "id": 74843,
    "v2": "final DeleteResult deleteResult = new DeleteResult(e, currentVersion, term, unassignedSeqNo, currentlyDeleted == false); return new DeletionStrategy(false, currentlyDeleted, unassignedSeqNo, Versions.NOT_FOUND, deleteResult);",
    "resolution": "final DeleteResult deleteResult = new DeleteResult(e, currentVersion, term, unassignedSeqNo, currentlyDeleted == false); return new DeletionStrategy(false, false, currentlyDeleted, unassignedSeqNo, Versions.NOT_FOUND, deleteResult);",
    "conflict": "final DeleteResult deleteResult = new DeleteResult(e, currentVersion, unassignedSeqNo, currentlyDeleted == false); return new DeletionStrategy(false, false, currentlyDeleted, unassignedSeqNo, Versions.NOT_FOUND, deleteResult);"
  },
  {
    "devdecision": "Manual",
    "id": 74858,
    "v2": "public static final Version V_6_4_0 = new Version(V_6_4_0_ID, org.apache.lucene.util.Version.LUCENE_7_4_0); public static final int V_6_5_0_ID = 6050099; public static final Version V_6_5_0 = new Version(V_6_5_0_ID, org.apache.lucene.util.Version.LUCENE_7_4_0);",
    "resolution": "public static final Version V_6_4_0 = new Version(V_6_4_0_ID, org.apache.lucene.util.Version.LUCENE_7_4_0); public static final int V_6_5_0_ID = 6050099; public static final Version V_6_5_0 = new Version(V_6_5_0_ID, org.apache.lucene.util.Version.LUCENE_7_5_0);",
    "conflict": "public static final Version V_6_4_0 = new Version(V_6_4_0_ID, org.apache.lucene.util.Version.LUCENE_7_5_0);"
  },
  {
    "devdecision": "Combination",
    "id": 74868,
    "v2": "orgReplica.applyDeleteOperationOnReplica(1, 2, \"type\", \"id\"); getTranslog(orgReplica).rollGeneration(); // isolate the delete in it's own generation",
    "resolution": "orgReplica.applyDeleteOperationOnReplica(1, 2, \"type\", \"id\"); orgReplica.flush(new FlushRequest().force(true)); // isolate delete#1 in its own translog generation and lucene segment",
    "conflict": "orgReplica.applyDeleteOperationOnReplica(1, 2, \"type\", \"id\", VersionType.EXTERNAL); orgReplica.flush(new FlushRequest().force(true)); // isolate delete#1 in its own translog generation and lucene segment"
  },
  {
    "devdecision": "Version 2",
    "id": 74870,
    "v2": "return new Engine.Delete(\"test\", id, newUid(id), seqNo, 1, version, null, Engine.Operation.Origin.REPLICA, startTime);",
    "resolution": "return new Engine.Delete(\"test\", id, newUid(id), seqNo, 1, version, null, Engine.Operation.Origin.REPLICA, startTime);",
    "conflict": "return new Engine.Delete(\"test\", id, newUid(id), seqNo, primaryTerm.get(), version, VersionType.EXTERNAL, Engine.Operation.Origin.REPLICA, startTime);"
  },
  {
    "devdecision": "Manual",
    "id": 74884,
    "v2": "public abstract Translog.Snapshot newTranslogSnapshotFromMinSeqNo(long minSeqNo) throws IOException;",
    "resolution": "public abstract Translog.Snapshot newTranslogSnapshotBetween(long minSeqNo, long maxSeqNo) throws IOException;",
    "conflict": "public Translog.Snapshot newTranslogSnapshotBetween(long minSeqNo, long maxSeqNo) throws IOException { return getTranslog().getSnapshotBetween(minSeqNo, maxSeqNo); }"
  },
  {
    "devdecision": "Version 2",
    "id": 74887,
    "v2": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, LUCENE_7_2_1);",
    "resolution": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, LUCENE_7_2_1);",
    "conflict": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, org.apache.lucene.util.Version.LUCENE_7_2_1); public static final int V_6_2_5_ID = 6020599; public static final Version V_6_2_5 = new Version(V_6_2_5_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);"
  },
  {
    "devdecision": "Manual",
    "id": 74888,
    "v2": "public abstract Translog.Snapshot newTranslogSnapshotFromMinSeqNo(long minSeqNo) throws IOException;",
    "resolution": "public abstract Translog.Snapshot newTranslogSnapshotBetween(long minSeqNo, long maxSeqNo) throws IOException;",
    "conflict": "public Translog.Snapshot newTranslogSnapshotBetween(long minSeqNo, long maxSeqNo) throws IOException { return getTranslog().getSnapshotBetween(minSeqNo, maxSeqNo); }"
  },
  {
    "devdecision": "Version 2",
    "id": 74897,
    "v2": "assert t.isPresent(); return \"[\" + t.get().getClass().getName() + \"]\";",
    "resolution": "assert t.isPresent(); return \"[\" + t.get().getClass().getName() + \"]\";",
    "conflict": "assert t.v2().isPresent(); return \"[\" + t.v1().getClass().getName() + \"/\" + t.v2().get().getClass().getName() + \"]\";"
  },
  {
    "devdecision": "Version 2",
    "id": 74899,
    "v2": "scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders);",
    "resolution": "scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders);",
    "conflict": "scriptModule.getScriptService(), client, metaStateService, enginePlugins);"
  },
  {
    "devdecision": "Version 2",
    "id": 74902,
    "v2": "\".*multiple engine factories provided for \\\\[foobar/.*\\\\]: \\\\[.*FooEngineFactory\\\\],\\\\[.*BarEngineFactory\\\\].*\";",
    "resolution": "\".*multiple engine factories provided for \\\\[foobar/.*\\\\]: \\\\[.*FooEngineFactory\\\\],\\\\[.*BarEngineFactory\\\\].*\";",
    "conflict": "\".*multiple plugins provided engine factories for \\\\[foobar/.*\\\\]: \" + \"\\\\[.*FooEnginePlugin/.*FooEngineFactory\\\\],\\\\[.*BarEnginePlugin/.*BarEngineFactory\\\\].*\";"
  },
  {
    "devdecision": "Version 2",
    "id": 74912,
    "v2": "assert t.isPresent(); return \"[\" + t.get().getClass().getName() + \"]\";",
    "resolution": "assert t.isPresent(); return \"[\" + t.get().getClass().getName() + \"]\";",
    "conflict": "assert t.v2().isPresent(); return \"[\" + t.v1().getClass().getName() + \"/\" + t.v2().get().getClass().getName() + \"]\";"
  },
  {
    "devdecision": "Version 2",
    "id": 74914,
    "v2": "scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders);",
    "resolution": "scriptModule.getScriptService(), client, metaStateService, engineFactoryProviders);",
    "conflict": "scriptModule.getScriptService(), client, metaStateService, enginePlugins);"
  },
  {
    "devdecision": "Version 2",
    "id": 74917,
    "v2": "\".*multiple engine factories provided for \\\\[foobar/.*\\\\]: \\\\[.*FooEngineFactory\\\\],\\\\[.*BarEngineFactory\\\\].*\";",
    "resolution": "\".*multiple engine factories provided for \\\\[foobar/.*\\\\]: \\\\[.*FooEngineFactory\\\\],\\\\[.*BarEngineFactory\\\\].*\";",
    "conflict": "\".*multiple plugins provided engine factories for \\\\[foobar/.*\\\\]: \" + \"\\\\[.*FooEnginePlugin/.*FooEngineFactory\\\\],\\\\[.*BarEnginePlugin/.*BarEngineFactory\\\\].*\";"
  },
  {
    "devdecision": "Combination",
    "id": 74944,
    "v2": "assert indexResult.getResultType() == Result.Type.FAILURE : indexResult.getResultType(); } else if (plan.indexIntoLucene) {",
    "resolution": "assert indexResult.getResultType() == Result.Type.FAILURE : indexResult.getResultType(); } else if (plan.indexIntoLucene || plan.addStaleOpToLucene) {",
    "conflict": "assert indexResult.hasFailure(); } else if (plan.indexIntoLucene || plan.addStaleOpToLucene) {"
  },
  {
    "devdecision": "Version 1",
    "id": 74946,
    "v2": "",
    "resolution": "import org.elasticsearch.index.mapper.Mapping; import org.elasticsearch.index.mapper.ParseContext; import org.elasticsearch.index.mapper.ParsedDocument; import org.elasticsearch.index.mapper.SeqNoFieldMapper;",
    "conflict": "import org.elasticsearch.index.mapper.Mapping; import org.elasticsearch.index.mapper.ParseContext; import org.elasticsearch.index.mapper.ParsedDocument; import org.elasticsearch.index.mapper.SeqNoFieldMapper;"
  },
  {
    "devdecision": "Manual",
    "id": 74949,
    "v2": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, LUCENE_7_2_1); public static final int V_6_2_5_ID = 6020599; public static final Version V_6_2_5 = new Version(V_6_2_5_ID, LUCENE_7_2_1);",
    "resolution": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, org.apache.lucene.util.Version.LUCENE_7_2_1); public static final int V_6_3_0_ID = 6030099; public static final int V_6_2_5_ID = 6020599;",
    "conflict": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);"
  },
  {
    "devdecision": "Manual",
    "id": 74955,
    "v2": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, LUCENE_7_2_1); public static final int V_6_2_5_ID = 6020599; public static final Version V_6_2_5 = new Version(V_6_2_5_ID, LUCENE_7_2_1);",
    "resolution": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, org.apache.lucene.util.Version.LUCENE_7_2_1); public static final int V_6_2_5_ID = 6020599; public static final Version V_6_2_5 = new Version(V_6_2_5_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);",
    "conflict": "public static final Version V_6_2_4 = new Version(V_6_2_4_ID, org.apache.lucene.util.Version.LUCENE_7_2_1);"
  },
  {
    "devdecision": "Manual",
    "id": 74963,
    "v2": "shard = newShard(shardRouting, shard.shardPath(), shard.indexSettings().getIndexMetaData(), null, null, () -> {}, EMPTY_EVENT_LISTENER);",
    "resolution": "shard = newShard(shardRouting, shard.shardPath(), shard.indexSettings().getIndexMetaData(), null, new InternalEngineFactory(), () -> {}, EMPTY_EVENT_LISTENER);",
    "conflict": "shard = newShard(shardRouting, shard.shardPath(), shard.indexSettings().getIndexMetaData(), null, new InternalEngineFactory(), () -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 74966,
    "v2": "shard = newShard(shardRouting, shard.shardPath(), shard.indexSettings().getIndexMetaData(), null, null, () -> {}, EMPTY_EVENT_LISTENER);",
    "resolution": "shard = newShard(shardRouting, shard.shardPath(), shard.indexSettings().getIndexMetaData(), null, new InternalEngineFactory(), () -> {}, EMPTY_EVENT_LISTENER);",
    "conflict": "shard = newShard(shardRouting, shard.shardPath(), shard.indexSettings().getIndexMetaData(), null, new InternalEngineFactory(), () -> {});"
  },
  {
    "devdecision": "Version 2",
    "id": 74986,
    "v2": "import static org.elasticsearch.xpack.core.security.SecurityField.setting; import static org.elasticsearch.xpack.core.security.support.Exceptions.authorizationError;",
    "resolution": "import static org.elasticsearch.xpack.core.security.SecurityField.setting; import static org.elasticsearch.xpack.core.security.support.Exceptions.authorizationError;",
    "conflict": "import static org.elasticsearch.xpack.security.SecurityField.setting; import static org.elasticsearch.xpack.security.support.Exceptions.authorizationError;"
  },
  {
    "devdecision": "Combination",
    "id": 75001,
    "v2": "final long localCheckpoint = localCheckpointTracker.getCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {",
    "resolution": "final long localCheckpoint = localCheckpointTracker.getCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {",
    "conflict": "final long localCheckpoint = seqNoService.getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {"
  },
  {
    "devdecision": "Combination",
    "id": 75002,
    "v2": "protected long doGenerateSeqNoForOperation(final Operation operation) { return localCheckpointTracker.generateSeqNo();",
    "resolution": "long doGenerateSeqNoForOperation(final Operation operation) { return localCheckpointTracker.generateSeqNo();",
    "conflict": "long doGenerateSeqNoForOperation(final Operation operation) { return seqNoService.generateSeqNo();"
  },
  {
    "devdecision": "Combination",
    "id": 75003,
    "v2": "import org.elasticsearch.index.mapper.Uid; import org.elasticsearch.index.seqno.GlobalCheckpointTracker; import org.elasticsearch.index.seqno.LocalCheckpointTracker;",
    "resolution": "import org.elasticsearch.index.seqno.GlobalCheckpointTracker; import org.elasticsearch.index.seqno.LocalCheckpointTracker;",
    "conflict": "import org.elasticsearch.index.seqno.SeqNoStats;"
  },
  {
    "devdecision": "Combination",
    "id": 75004,
    "v2": "final long localCheckpoint = localCheckpointTracker.getCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {",
    "resolution": "final long localCheckpoint = localCheckpointTracker.getCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {",
    "conflict": "final long localCheckpoint = seqNoService.getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {"
  },
  {
    "devdecision": "Combination",
    "id": 75005,
    "v2": "protected long doGenerateSeqNoForOperation(final Operation operation) { return localCheckpointTracker.generateSeqNo();",
    "resolution": "long doGenerateSeqNoForOperation(final Operation operation) { return localCheckpointTracker.generateSeqNo();",
    "conflict": "long doGenerateSeqNoForOperation(final Operation operation) { return seqNoService.generateSeqNo();"
  },
  {
    "devdecision": "Combination",
    "id": 75006,
    "v2": "import org.elasticsearch.index.mapper.Uid; import org.elasticsearch.index.seqno.GlobalCheckpointTracker; import org.elasticsearch.index.seqno.LocalCheckpointTracker;",
    "resolution": "import org.elasticsearch.index.seqno.GlobalCheckpointTracker; import org.elasticsearch.index.seqno.LocalCheckpointTracker;",
    "conflict": "import org.elasticsearch.index.seqno.SeqNoStats;"
  },
  {
    "devdecision": "Combination",
    "id": 75007,
    "v2": "final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, indexScopedSettings); final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry);",
    "resolution": "final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, indexScopedSettings); final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry, getEngineFactory(idxSettings));",
    "conflict": "final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, indexScopeSetting); final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry, getEngineFactory(idxSettings));"
  },
  {
    "devdecision": "Combination",
    "id": 75008,
    "v2": "try(Translog.Snapshot snapshot = translog.newSnapshotFromMinSeqNo(startingSeqNo)) { targetLocalCheckpoint = phase2(startingSeqNo, requiredSeqNoRangeStart, endingSeqNo, snapshot);",
    "resolution": "try(Translog.Snapshot snapshot = translog.newSnapshotFrom(startingSeqNo)) { targetLocalCheckpoint = phase2(startingSeqNo, requiredSeqNoRangeStart, endingSeqNo, snapshot);",
    "conflict": "try(Translog.Snapshot snapshot = translog.newSnapshotFrom(startingSeqNo)) { targetLocalCheckpoint = phase2(startingSeqNo, snapshot);"
  },
  {
    "devdecision": "Concatenation",
    "id": 75009,
    "v2": "import org.elasticsearch.index.engine.InternalEngine; import org.elasticsearch.index.engine.SegmentsStats;",
    "resolution": "import org.elasticsearch.index.engine.InternalEngine; import org.elasticsearch.index.engine.SegmentsStats;import org.elasticsearch.index.engine.InternalEngineFactory;",
    "conflict": "import org.elasticsearch.index.engine.InternalEngineFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 75012,
    "v2": "final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, indexScopedSettings); final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry);",
    "resolution": "final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, indexScopedSettings); final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry, getEngineFactory(idxSettings));",
    "conflict": "final IndexSettings idxSettings = new IndexSettings(indexMetaData, this.settings, indexScopeSetting); final IndexModule indexModule = new IndexModule(idxSettings, analysisRegistry, getEngineFactory(idxSettings));"
  },
  {
    "devdecision": "Combination",
    "id": 75013,
    "v2": "try(Translog.Snapshot snapshot = translog.newSnapshotFromMinSeqNo(startingSeqNo)) { targetLocalCheckpoint = phase2(startingSeqNo, requiredSeqNoRangeStart, endingSeqNo, snapshot);",
    "resolution": "try(Translog.Snapshot snapshot = translog.newSnapshotFrom(startingSeqNo)) { targetLocalCheckpoint = phase2(startingSeqNo, requiredSeqNoRangeStart, endingSeqNo, snapshot);",
    "conflict": "try(Translog.Snapshot snapshot = translog.newSnapshotFrom(startingSeqNo)) { targetLocalCheckpoint = phase2(startingSeqNo, snapshot);"
  },
  {
    "devdecision": "Concatenation",
    "id": 75015,
    "v2": "import org.elasticsearch.index.engine.InternalEngine; import org.elasticsearch.index.engine.SegmentsStats;",
    "resolution": "import org.elasticsearch.index.engine.InternalEngine; import org.elasticsearch.index.engine.SegmentsStats;import org.elasticsearch.index.engine.InternalEngineFactory;",
    "conflict": "import org.elasticsearch.index.engine.InternalEngineFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 75037,
    "v2": "putTransientIfNonExisting(INDICES_PERMISSIONS_KEY, IndicesAccessControl.ALLOW_NO_INDICES); grant(authentication, action, request, permission.names());",
    "resolution": "putTransientIfNonExisting(INDICES_PERMISSIONS_KEY, IndicesAccessControl.ALLOW_NO_INDICES); grant(authentication, action, request, permission.names(), null);",
    "conflict": "setIndicesAccessControl(IndicesAccessControl.ALLOW_NO_INDICES); grant(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75047,
    "v2": "private void grant(Authentication authentication, String action, TransportRequest request, String[] roleNames) { auditTrail.accessGranted(authentication.getUser(), action, request, roleNames);",
    "resolution": "private void grant(Authentication authentication, String action, TransportRequest request, String[] roleNames, @Nullable Set<String> specificIndices) { auditTrail.accessGranted(authentication.getUser(), action, request, roleNames, specificIndices);",
    "conflict": "private void grant(Authentication authentication, String action, TransportRequest request, @Nullable Set<String> specificIndices) { auditTrail.accessGranted(authentication.getUser(), action, request, specificIndices);"
  },
  {
    "devdecision": "Manual",
    "id": 75054,
    "v2": "String role = randomAlphaOfLengthBetween(1, 6); auditor.accessGranted(user, \"_action\", message, new String[] { role });",
    "resolution": "Set<String> specificIndices = randomBoolean() ? randomSpecificIndices() : null; String role = randomAlphaOfLengthBetween(1, 6); auditor.accessGranted(user, \"_action\", message, new String[] { role }, specificIndices);",
    "conflict": "Set<String> specificIndices = randomBoolean() ? randomSpecificIndices() : null; auditor.accessGranted(user, \"_action\", message, specificIndices);"
  },
  {
    "devdecision": "Manual",
    "id": 75056,
    "v2": "String role = randomAlphaOfLengthBetween(1, 6); auditor.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, new String[] { role });",
    "resolution": "String role = randomAlphaOfLengthBetween(1, 6); auditor.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, new String[] { role }, null);",
    "conflict": "auditor.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75057,
    "v2": "String role = randomAlphaOfLengthBetween(1, 6); auditor.accessDenied(user, \"_action\", message, new String[] { role });",
    "resolution": "Set<String> specificIndices = randomBoolean() ? randomSpecificIndices() : null; String role = randomAlphaOfLengthBetween(1, 6); auditor.accessDenied(user, \"_action\", message, new String[] { role }, specificIndices);",
    "conflict": "Set<String> specificIndices = randomBoolean() ? randomSpecificIndices() : null; auditor.accessDenied(user, \"_action\", message, specificIndices);"
  },
  {
    "devdecision": "Manual",
    "id": 75061,
    "v2": "String role = randomAlphaOfLengthBetween(1, 6); auditTrail.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, new String[] { role });",
    "resolution": "String role = randomAlphaOfLengthBetween(1, 6); auditTrail.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, new String[] { role }, null);",
    "conflict": "String origins = LoggingAuditTrail.originAttributes(message, localNode, threadContext); auditTrail.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75062,
    "v2": "String origins = LoggingAuditTrail.originAttributes(threadContext, message, auditTrail.localNodeInfo); auditTrail.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, new String[] { role });",
    "resolution": "String origins = LoggingAuditTrail.originAttributes(threadContext, message, auditTrail.localNodeInfo); auditTrail.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, new String[] { role }, null);",
    "conflict": "auditTrail.accessGranted(SystemUser.INSTANCE, \"internal:_action\", message, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75070,
    "v2": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"cluster:admin/snapshot/status\", request, new String[] { SystemUser.ROLE_NAME });",
    "resolution": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"cluster:admin/snapshot/status\", request, new String[] { SystemUser.ROLE_NAME }, null);",
    "conflict": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"cluster:admin/snapshot/status\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75091,
    "v2": "verify(auditTrail).runAsGranted(user, \"indices:a\", request, new String[] { runAsRole.getName() }); verify(auditTrail).accessGranted(user, \"indices:a\", request, new String[] { bRole.getName() });",
    "resolution": "verify(auditTrail).runAsGranted(user, \"indices:a\", request, new String[] { runAsRole.getName() }); verify(auditTrail).accessGranted(user, \"indices:a\", request, new String[] { bRole.getName() }, null);",
    "conflict": "verify(auditTrail).runAsGranted(user, \"indices:a\", request); verify(auditTrail).accessGranted(user, \"indices:a\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75093,
    "v2": "verify(auditTrail).accessGranted(user, ClusterHealthAction.NAME, request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessGranted(user, ClusterHealthAction.NAME, request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessGranted(user, ClusterHealthAction.NAME, request, null); verifyNoMoreInteractions(auditTrail);"
  },
  {
    "devdecision": "Manual",
    "id": 75106,
    "v2": "verify(auditTrailService).accessDenied(authentication.getUser(), \"action\", request, authentication.getUser().roles());",
    "resolution": "verify(auditTrailService).accessDenied(authentication.getUser(), \"action\", request, authentication.getUser().roles(), null);",
    "conflict": "verify(auditTrailService) .accessDenied(authentication.getUser(), \"action\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75107,
    "v2": "verify(auditTrailService).accessDenied(authentication.getUser(), \"action\", request, authentication.getUser().roles());",
    "resolution": "verify(auditTrailService).accessDenied(authentication.getUser(), \"action\", request, authentication.getUser().roles(), null);",
    "conflict": "verify(auditTrailService) .accessDenied(authentication.getUser(), \"action\", request, null);"
  },
  {
    "devdecision": "Version 1",
    "id": 75115,
    "v2": "",
    "resolution": "import javax.security.auth.DestroyFailedException;  import static org.elasticsearch.xpack.watcher.Watcher.ENCRYPT_SENSITIVE_DATA_SETTING;",
    "conflict": "import javax.security.auth.DestroyFailedException;  import static org.elasticsearch.xpack.watcher.Watcher.ENCRYPT_SENSITIVE_DATA_SETTING;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75116,
    "v2": "entries.addAll(Monitoring.getNamedWriteables()); entries.addAll(Graph.getNamedWriteables());",
    "resolution": "entries.addAll(Monitoring.getNamedWriteables()); entries.addAll(Graph.getNamedWriteables());entries.addAll(SqlPlugin.getNamedWriteables());",
    "conflict": "entries.addAll(SqlPlugin.getNamedWriteables());"
  },
  {
    "devdecision": "Combination",
    "id": 75121,
    "v2": "",
    "resolution": "import org.elasticsearch.xpack.sql.plugin.sql.action.SqlAction; import org.elasticsearch.xpack.sql.plugin.sql.action.SqlRequest;",
    "conflict": "import org.elasticsearch.xpack.sql.plugin.sql.action.SqlAction; import org.elasticsearch.xpack.sql.plugin.sql.action.SqlRequest; import org.joda.time.Instant; import org.joda.time.format.DateTimeFormat;"
  },
  {
    "devdecision": "Combination",
    "id": 75123,
    "v2": "final LocalCheckpointTracker tracker = new LocalCheckpointTracker(startingSeqNo, startingSeqNo - 1); try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFromMinSeqNo(startingSeqNo)) {",
    "resolution": "final LocalCheckpointTracker tracker = new LocalCheckpointTracker(startingSeqNo, startingSeqNo - 1); try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFrom(startingSeqNo)) {",
    "conflict": "final LocalCheckpointTracker tracker = new LocalCheckpointTracker(shard.indexSettings(), startingSeqNo, startingSeqNo - 1); try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFrom(startingSeqNo)) {"
  },
  {
    "devdecision": "Combination",
    "id": 75124,
    "v2": "final LocalCheckpointTracker tracker = new LocalCheckpointTracker(startingSeqNo, startingSeqNo - 1); try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFromMinSeqNo(startingSeqNo)) {",
    "resolution": "final LocalCheckpointTracker tracker = new LocalCheckpointTracker(startingSeqNo, startingSeqNo - 1); try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFrom(startingSeqNo)) {",
    "conflict": "final LocalCheckpointTracker tracker = new LocalCheckpointTracker(shard.indexSettings(), startingSeqNo, startingSeqNo - 1); try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFrom(startingSeqNo)) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 75129,
    "v2": "import org.joda.time.Instant; import org.joda.time.format.DateTimeFormat;",
    "resolution": "import org.joda.time.Instant; import org.joda.time.format.DateTimeFormat;import org.elasticsearch.xpack.sql.plugin.sql.action.SqlAction; import org.elasticsearch.xpack.sql.plugin.sql.action.SqlRequest;",
    "conflict": "import org.elasticsearch.xpack.sql.plugin.sql.action.SqlAction; import org.elasticsearch.xpack.sql.plugin.sql.action.SqlRequest;"
  },
  {
    "devdecision": "Combination",
    "id": 75131,
    "v2": "final long localCheckpoint = seqNoService.getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {",
    "resolution": "final long localCheckpoint = seqNoService.getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {",
    "conflict": "final long localCheckpoint = seqNoService().getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {"
  },
  {
    "devdecision": "Combination",
    "id": 75132,
    "v2": "final long localCheckpoint = seqNoService.getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFromMinSeqNo(localCheckpoint + 1)) {",
    "resolution": "final long localCheckpoint = seqNoService.getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {",
    "conflict": "final long localCheckpoint = seqNoService().getLocalCheckpoint(); try (Translog.Snapshot snapshot = getTranslog().newSnapshotFrom(localCheckpoint + 1)) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 75146,
    "v2": "protected Deprecation deprecation; protected Upgrade upgrade;",
    "resolution": "protected SqlPlugin sql;protected Deprecation deprecation; protected Upgrade upgrade;",
    "conflict": "protected SqlPlugin sql;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75147,
    "v2": "this.deprecation = new Deprecation(); this.upgrade = new Upgrade(settings);",
    "resolution": "this.sql = new SqlPlugin();this.deprecation = new Deprecation(); this.upgrade = new Upgrade(settings);",
    "conflict": "this.sql = new SqlPlugin();"
  },
  {
    "devdecision": "Concatenation",
    "id": 75148,
    "v2": "components.addAll(upgrade.createComponents(internalClient, clusterService, threadPool, resourceWatcherService, scriptService, xContentRegistry));",
    "resolution": "components.addAll( sql.createComponents(internalClient, clusterService, threadPool, resourceWatcherService, scriptService, xContentRegistry));components.addAll(upgrade.createComponents(internalClient, clusterService, threadPool, resourceWatcherService, scriptService, xContentRegistry));",
    "conflict": "components.addAll( sql.createComponents(internalClient, clusterService, threadPool, resourceWatcherService, scriptService, xContentRegistry));"
  },
  {
    "devdecision": "Concatenation",
    "id": 75149,
    "v2": "actions.addAll(deprecation.getActions()); actions.addAll(upgrade.getActions());",
    "resolution": "actions.addAll(sql.getActions());actions.addAll(deprecation.getActions()); actions.addAll(upgrade.getActions());",
    "conflict": "actions.addAll(sql.getActions());"
  },
  {
    "devdecision": "Concatenation",
    "id": 75150,
    "v2": "handlers.addAll(deprecation.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster)); handlers.addAll(upgrade.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter,",
    "resolution": "handlers.addAll(sql.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter,handlers.addAll(deprecation.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter, indexNameExpressionResolver, nodesInCluster)); handlers.addAll(upgrade.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter,",
    "conflict": "handlers.addAll(sql.getRestHandlers(settings, restController, clusterSettings, indexScopedSettings, settingsFilter,"
  },
  {
    "devdecision": "Combination",
    "id": 75152,
    "v2": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase;",
    "resolution": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75153,
    "v2": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase;",
    "resolution": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75154,
    "v2": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase;",
    "resolution": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75155,
    "v2": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase;",
    "resolution": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75156,
    "v2": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase;",
    "resolution": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75157,
    "v2": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase;",
    "resolution": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;"
  },
  {
    "devdecision": "Manual",
    "id": 75159,
    "v2": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase;",
    "resolution": "import org.elasticsearch.search.aggregations.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregationTestCase; import org.elasticsearch.search.aggregations.bucket.ParsedSingleBucketAggregation;"
  },
  {
    "devdecision": "Manual",
    "id": 75161,
    "v2": "return new InternalHistogram(name, buckets, BucketOrder.key(true), 1, null, format, keyed, pipelineAggregators, metaData);",
    "resolution": "BucketOrder order = BucketOrder.key(randomBoolean()); return new InternalHistogram(name, buckets, order, 1, null, format, keyed, pipelineAggregators, metaData);",
    "conflict": "InternalOrder order = (InternalOrder) randomFrom(InternalHistogram.Order.KEY_ASC, InternalHistogram.Order.KEY_DESC); return new InternalHistogram(name, buckets, order, 1, null, format, keyed, pipelineAggregators, metaData);"
  },
  {
    "devdecision": "Combination",
    "id": 75166,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation; import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStats.Bounds;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation; import org.elasticsearch.search.aggregations.metrics.stats.extended.ExtendedStats.Bounds;"
  },
  {
    "devdecision": "Combination",
    "id": 75167,
    "v2": "",
    "resolution": "import org.elasticsearch.search.DocValueFormat; import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.DocValueFormat; import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75169,
    "v2": "",
    "resolution": "import org.elasticsearch.search.DocValueFormat; import org.elasticsearch.search.aggregations.InternalAggregationTestCase;",
    "conflict": "import org.elasticsearch.search.DocValueFormat; import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75173,
    "v2": "",
    "resolution": "import org.elasticsearch.search.DocValueFormat; import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.DocValueFormat; import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75174,
    "v2": "import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator; import org.elasticsearch.test.InternalAggregationTestCase; import org.junit.Before;",
    "resolution": "import org.elasticsearch.search.aggregations.pipeline.PipelineAggregator; import org.elasticsearch.test.InternalAggregationTestCase; import org.junit.Before;import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75179,
    "v2": "import org.elasticsearch.test.InternalAggregationTestCase;",
    "resolution": "import org.elasticsearch.test.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Manual",
    "id": 75195,
    "v2": "return new InternalMax(name, randomDouble(), randomNumericDocValueFormat(), pipelineAggregators, metaData);",
    "resolution": "double value = frequently() ? randomDouble() : randomFrom(new Double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY }); DocValueFormat formatter = randomNumericDocValueFormat(); return new InternalMax(name, value, formatter, pipelineAggregators, metaData);",
    "conflict": "double value = frequently() ? randomDouble() : randomFrom(new Double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY }); DocValueFormat formatter = randomFrom(new DocValueFormat.Decimal(\"###.##\"), DocValueFormat.BOOLEAN, DocValueFormat.RAW); return new InternalMax(name, value, formatter, pipelineAggregators, metaData);"
  },
  {
    "devdecision": "Manual",
    "id": 75197,
    "v2": "return new InternalMin(name, randomDouble(), randomNumericDocValueFormat(), pipelineAggregators, metaData);",
    "resolution": "double value = frequently() ? randomDouble() : randomFrom(new Double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY }); DocValueFormat formatter = randomNumericDocValueFormat(); return new InternalMin(name, value, formatter, pipelineAggregators, metaData);",
    "conflict": "double value = frequently() ? randomDouble() : randomFrom(new Double[] { Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY }); DocValueFormat formatter = randomFrom(new DocValueFormat.Decimal(\"###.##\"), DocValueFormat.BOOLEAN, DocValueFormat.RAW); return new InternalMin(name, value, formatter, pipelineAggregators, metaData);"
  },
  {
    "devdecision": "Version 2",
    "id": 75198,
    "v2": "import java.util.ArrayList; import java.util.Collections; import java.util.List;",
    "resolution": "import java.util.ArrayList; import java.util.Collections; import java.util.List;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75201,
    "v2": "import org.elasticsearch.action.bulk.BulkRequest; import org.elasticsearch.action.bulk.BulkResponse;",
    "resolution": "import org.elasticsearch.action.bulk.BulkRequest; import org.elasticsearch.action.bulk.BulkResponse;import org.elasticsearch.action.delete.DeleteRequest; import org.elasticsearch.action.delete.DeleteResponse;",
    "conflict": "import org.elasticsearch.action.delete.DeleteRequest; import org.elasticsearch.action.delete.DeleteResponse;"
  },
  {
    "devdecision": "Manual",
    "id": 75218,
    "v2": "DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.shardTarget().getNodeId()); sendReleaseSearchContext(entry.value.id(), node);",
    "resolution": "Transport.Connection connection = nodeIdToConnection.apply(entry.value.shardTarget().getNodeId()); sendReleaseSearchContext(entry.value.id(), connection);",
    "conflict": "Transport.Connection connection = nodeIdToConnection.apply(entry.value.shardTarget().nodeId()); sendReleaseSearchContext(entry.value.id(), connection);"
  },
  {
    "devdecision": "Manual",
    "id": 75219,
    "v2": "DiscoveryNode node = nodeIdToDiscoveryNode.apply(entry.value.queryResult().shardTarget().getNodeId()); sendReleaseSearchContext(entry.value.queryResult().id(), node);",
    "resolution": "Transport.Connection connection = nodeIdToConnection.apply(entry.value.queryResult().shardTarget().getNodeId()); sendReleaseSearchContext(entry.value.queryResult().id(), connection);",
    "conflict": "Transport.Connection connection = nodeIdToConnection.apply(entry.value.queryResult().shardTarget().nodeId()); sendReleaseSearchContext(entry.value.queryResult().id(), connection);"
  },
  {
    "devdecision": "Combination",
    "id": 75229,
    "v2": "long startTime, ClusterState state,  Map<String, AliasFilter> aliasFilter, Map<String, Float> concreteIndexBoosts,",
    "resolution": "long startTime, Function<String, DiscoveryNode> nodesLookup, long clusterStateVersion, Map<String, AliasFilter> aliasFilter, Map<String, Float> concreteIndexBoosts,",
    "conflict": "long startTime, Function<String, DiscoveryNode> nodesLookup, long clusterStateVersion, Map<String, AliasFilter> aliasFilter,"
  },
  {
    "devdecision": "Version 1",
    "id": 75238,
    "v2": "import org.apache.logging.log4j.message.ParameterizedMessage; import org.apache.logging.log4j.util.Supplier; import org.elasticsearch.ExceptionsHelper; import org.elasticsearch.ResourceAlreadyExistsException;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 75247,
    "v2": "TransportIndexAction action = new TransportIndexAction(settings, transportService, clusterService, indicesService, null, THREAD_POOL, shardStateAction, null, null, actionFilters, indexNameExpressionResolver, autoCreateIndex);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 75255,
    "v2": "",
    "resolution": "import org.elasticsearch.index.seqno.GlobalCheckpointService; import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction; import org.elasticsearch.index.shard.IndexEventListener; import org.elasticsearch.index.shard.IndexShard; import org.elasticsearch.index.shard.IndexShardRelocatedException;",
    "conflict": "import org.elasticsearch.index.IndexShardAlreadyExistsException; import org.elasticsearch.index.seqno.GlobalCheckpointService; import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction;"
  },
  {
    "devdecision": "Manual",
    "id": 75268,
    "v2": "",
    "resolution": "primary.updateLocalCheckpointForShard(primaryRouting.allocationId().getId(), primary.localCheckpoint()); final ReplicaRequest replicaRequest = primaryResult.replicaRequest(); if (replicaRequest != null) { assert replicaRequest.primaryTerm() > 0 : \"replicaRequest doesn't have a primary term\";",
    "conflict": "primary.updateLocalCheckpointForShard(primaryRouting.allocationId().getId(), primary.localCheckpoint()); final ReplicaRequest replicaRequest = primaryResult.replicaRequest(); assert replicaRequest.primaryTerm() > 0 : \"replicaRequest doesn't have a primary term\";"
  },
  {
    "devdecision": "Manual",
    "id": 75273,
    "v2": "final IndexService indexService = indicesService.createIndex(tmpImd, Collections.emptyList());",
    "resolution": "final IndexService indexService = indicesService.createIndex(tmpImd, Collections.emptyList(), shardId -> {}); createdIndex = indexService.index();",
    "conflict": "final IndexService indexService = indicesService.createIndex(nodeServicesProvider, tmpImd, Collections.emptyList(), shardId -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 75278,
    "v2": "IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList());",
    "resolution": "IndexService indexService = indicesService.createIndex(indexMetaData, Collections.emptyList(), shardId -> {});",
    "conflict": "IndexService indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList(), shardId -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 75283,
    "v2": "private final long version;",
    "resolution": "private final long version; private final long seqNo;",
    "conflict": "private long version; private long seqNo;"
  },
  {
    "devdecision": "Manual",
    "id": 75286,
    "v2": "public Delete(String type, String id, Term uid, long version, VersionType versionType, Origin origin, long startTime) { super(uid, version, versionType, origin, startTime);",
    "resolution": "public Delete(String type, String id, Term uid, long seqNo, long version, VersionType versionType, Origin origin, long startTime) { super(uid, seqNo, version, versionType, origin, startTime);",
    "conflict": "public Delete(String type, String id, Term uid, long seqNo, long version, VersionType versionType, Origin origin, long startTime, boolean found) { super(uid, seqNo, version, versionType, origin, startTime);"
  },
  {
    "devdecision": "Manual",
    "id": 75293,
    "v2": "final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), origin, System.nanoTime());",
    "resolution": "final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.seqNo(), delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), origin, System.nanoTime());",
    "conflict": "final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.seqNo(), delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), origin, System.nanoTime(), false);"
  },
  {
    "devdecision": "Manual",
    "id": 75294,
    "v2": "this.version = indexResult.getVersion();",
    "resolution": "this.seqNo = indexResult.getSeqNo(); this.version = indexResult.getVersion();",
    "conflict": "this.seqNo = index.seqNo(); this.version = index.version();"
  },
  {
    "devdecision": "Version 1",
    "id": 75296,
    "v2": "",
    "resolution": "import org.elasticsearch.indices.recovery.PeerRecoverySourceService; import org.elasticsearch.indices.recovery.PeerRecoveryTargetService; import org.elasticsearch.indices.recovery.RecoverySettings;",
    "conflict": "import org.elasticsearch.indices.recovery.PeerRecoverySourceService; import org.elasticsearch.indices.recovery.PeerRecoveryTargetService; import org.elasticsearch.indices.recovery.RecoverySettings;"
  },
  {
    "devdecision": "Combination",
    "id": 75297,
    "v2": "",
    "resolution": "bind(GlobalCheckpointSyncAction.class).asEagerSingleton();",
    "conflict": "bind(UpdateHelper.class).asEagerSingleton(); bind(MetaDataIndexUpgradeService.class).asEagerSingleton(); bind(NodeServicesProvider.class).asEagerSingleton(); bind(GlobalCheckpointSyncAction.class).asEagerSingleton();"
  },
  {
    "devdecision": "Manual",
    "id": 75300,
    "v2": "final IndexService indexService = createIndexService(\"create index\", indexMetaData, indicesQueryCache, indicesFieldDataCache, finalListeners, indexingMemoryController);",
    "resolution": "final IndexService indexService = createIndexService( \"create index\", indexMetaData, indicesQueryCache, indicesFieldDataCache, finalListeners, globalCheckpointSyncer, indexingMemoryController);",
    "conflict": "final IndexService indexService = createIndexService(\"create index\", nodeServicesProvider, indexMetaData, indicesQueryCache, indicesFieldDataCache, finalListeners, globalCheckpointSyncer, indexingMemoryController);"
  },
  {
    "devdecision": "Manual",
    "id": 75302,
    "v2": "return indexModule.newIndexService(nodeEnv, this, circuitBreakerService, bigArrays, threadPool, scriptService, indicesQueriesRegistry, clusterService, client, indicesQueryCache, mapperRegistry, indicesFieldDataCache);",
    "resolution": "return indexModule.newIndexService( nodeEnv, this, circuitBreakerService, bigArrays, threadPool, scriptService, indicesQueriesRegistry, clusterService, client, indicesQueryCache, mapperRegistry, globalCheckpointSyncer, indicesFieldDataCache);",
    "conflict": "return indexModule.newIndexService(nodeEnv, this, nodeServicesProvider, indicesQueryCache, mapperRegistry, globalCheckpointSyncer, indicesFieldDataCache);"
  },
  {
    "devdecision": "Combination",
    "id": 75304,
    "v2": "",
    "resolution": "import org.elasticsearch.index.seqno.GlobalCheckpointService; import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction;",
    "conflict": "import org.elasticsearch.index.NodeServicesProvider; import org.elasticsearch.index.seqno.GlobalCheckpointService; import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction;"
  },
  {
    "devdecision": "Manual",
    "id": 75307,
    "v2": "PeerRecoverySourceService peerRecoverySourceService, SnapshotShardsService snapshotShardsService) {",
    "resolution": "PeerRecoverySourceService peerRecoverySourceService, SnapshotShardsService snapshotShardsService, Consumer<ShardId> globalCheckpointSyncer) {",
    "conflict": "PeerRecoverySourceService peerRecoverySourceService, NodeServicesProvider nodeServicesProvider, Consumer<ShardId> globalCheckpointSyncer) {"
  },
  {
    "devdecision": "Manual",
    "id": 75309,
    "v2": "indexService = indicesService.createIndex(indexMetaData, buildInIndexListener);",
    "resolution": "indexService = indicesService.createIndex(indexMetaData, buildInIndexListener, globalCheckpointSyncer);",
    "conflict": "indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, buildInIndexListener, globalCheckpointSyncer);"
  },
  {
    "devdecision": "Manual",
    "id": 75310,
    "v2": "U createIndex(IndexMetaData indexMetaData, List<IndexEventListener> builtInIndexListener) throws IOException;",
    "resolution": "U createIndex(IndexMetaData indexMetaData, List<IndexEventListener> builtInIndexListener, Consumer<ShardId> globalCheckpointSyncer) throws IOException;",
    "conflict": "U createIndex(NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInIndexListener, Consumer<ShardId> globalCheckpointSyncer) throws IOException;"
  },
  {
    "devdecision": "Combination",
    "id": 75311,
    "v2": "IndexResponse indexResponse = new IndexResponse(new ShardId(\"index\", \"_na_\", 0), indexRequest.type(), indexRequest.id(), 1, true); originalResponses.add(new BulkItemResponse(Integer.parseInt(indexRequest.id()), indexRequest.opType(), indexResponse));",
    "resolution": "IndexResponse indexResponse = new IndexResponse(new ShardId(\"index\", \"_na_\", 0), indexRequest.type(), indexRequest.id(), 1, 1, true); originalResponses.add(new BulkItemResponse(Integer.parseInt(indexRequest.id()), indexRequest.opType(), indexResponse));",
    "conflict": "IndexResponse indexResponse = new IndexResponse(new ShardId(\"index\", \"_na_\", 0), indexRequest.type(), indexRequest.id(), 1, 1, true); originalResponses.add(new BulkItemResponse(Integer.parseInt(indexRequest.id()), indexRequest.opType().lowercase(), indexResponse));"
  },
  {
    "devdecision": "Version 2",
    "id": 75313,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {} ,new IndicesFieldDataCache(settings, listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75314,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75315,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, this.listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75316,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75317,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, this.listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75318,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, this.listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75319,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75322,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75323,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, listener));"
  },
  {
    "devdecision": "Version 2",
    "id": 75324,
    "v2": "IndexService indexService = newIndexService(module);",
    "resolution": "IndexService indexService = newIndexService(module);",
    "conflict": "IndexService indexService = module.newIndexService(nodeEnvironment, deleter, nodeServicesProvider, indicesQueryCache, mapperRegistry, shardId -> {}, new IndicesFieldDataCache(settings, listener));"
  },
  {
    "devdecision": "Concatenation",
    "id": 75325,
    "v2": "import org.apache.lucene.index.IndexWriter;",
    "resolution": "import org.apache.lucene.index.IndexWriter;import org.apache.lucene.index.IndexCommit; import org.apache.lucene.index.IndexReader;",
    "conflict": "import org.apache.lucene.index.IndexCommit; import org.apache.lucene.index.IndexReader;"
  },
  {
    "devdecision": "Combination",
    "id": 75352,
    "v2": "Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false); Engine.IndexResult result = engine.index(idxRequest);",
    "resolution": "Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false); Engine.IndexResult result = engine.index(idxRequest);",
    "conflict": "Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false); engine.index(idxRequest);"
  },
  {
    "devdecision": "Manual",
    "id": 75363,
    "v2": "IndexService index = indicesService.createIndex(metaData, Arrays.asList(countingListener));",
    "resolution": "IndexService index = indicesService.createIndex(metaData, Arrays.asList(countingListener), s -> {});",
    "conflict": "NodeServicesProvider nodeServicesProvider = getInstanceFromNode(NodeServicesProvider.class); IndexService index = indicesService.createIndex(nodeServicesProvider, metaData, Arrays.asList(countingListener), s -> {});"
  },
  {
    "devdecision": "Concatenation",
    "id": 75365,
    "v2": "private volatile long term;",
    "resolution": "private volatile long term;private volatile Set<String> activeAllocationIds; private volatile Set<String> initializingAllocationIds;",
    "conflict": "private volatile Set<String> activeAllocationIds; private volatile Set<String> initializingAllocationIds;"
  },
  {
    "devdecision": "Manual",
    "id": 75367,
    "v2": "when(indicesService.createIndex(any(IndexMetaData.class), anyList()))",
    "resolution": "@SuppressWarnings(\"unchecked\") final List<IndexEventListener> listeners = anyList(); @SuppressWarnings(\"unchecked\") final Consumer<ShardId> globalCheckpointSyncer = any(Consumer.class); when(indicesService.createIndex(any(IndexMetaData.class), listeners, globalCheckpointSyncer))",
    "conflict": "@SuppressWarnings(\"unchecked\") final List<IndexEventListener> listeners = anyList(); @SuppressWarnings(\"unchecked\") final Consumer<ShardId> globalCheckpointSyncer = any(Consumer.class); when(indicesService.createIndex(any(NodeServicesProvider.class), any(IndexMetaData.class), listeners, globalCheckpointSyncer))"
  },
  {
    "devdecision": "Version 2",
    "id": 75368,
    "v2": "private static final AtomicInteger nodeIdGenerator = new AtomicInteger();  protected DiscoveryNode createNode(DiscoveryNode.Role... mustHaveRoles) {",
    "resolution": "private static final AtomicInteger nodeIdGenerator = new AtomicInteger();  protected DiscoveryNode createNode(DiscoveryNode.Role... mustHaveRoles) {",
    "conflict": "private DiscoveryNode createNode(DiscoveryNode.Role... mustHaveRoles) {"
  },
  {
    "devdecision": "Version 1",
    "id": 75380,
    "v2": "",
    "resolution": "/** * Groups bulk request items by shard, optionally creating non-existent indices and * delegates to {@link TransportShardBulkAction} for shard-level bulk execution */",
    "conflict": "/** * Groups bulk request items by shard, optionally creating non-existent indices and * delegates to {@link TransportShardBulkAction} for shard-level bulk execution */"
  },
  {
    "devdecision": "Manual",
    "id": 75382,
    "v2": "BulkItemRequest item = request.items()[requestIndex]; location = handleItem(metaData, request, primary, preVersions, preVersionTypes, location, requestIndex, item);",
    "resolution": "location = executeBulkItemRequest(metaData, primary, request, preVersions, preVersionTypes, location, requestIndex);",
    "conflict": "location = executeBulkItemRequest(metaData, indexShard, request, preVersions, preVersionTypes, location, requestIndex);"
  },
  {
    "devdecision": "Version 1",
    "id": 75384,
    "v2": "AggregationContext context, AggregatorFactory<?> parent, AggregatorFactories.Builder subFactories, Map<String, Object> metaData) throws IOException {",
    "resolution": "AggregationContext context, AggregatorFactory<?> parent, AggregatorFactories.Builder subFactories, Map<String, Object> metaData) throws IOException {",
    "conflict": "AggregationContext context, AggregatorFactory<?> parent, AggregatorFactories.Builder subFactories, Map<String, Object> metaData) throws IOException {"
  },
  {
    "devdecision": "Combination",
    "id": 75407,
    "v2": "pendingActions.incrementAndGet(); replicasProxy.performOn(shard, replicaRequest, new ActionListener<TransportResponse.Empty>() {",
    "resolution": "pendingActions.incrementAndGet(); replicasProxy.performOn(shard, replicaRequest, new ActionListener<ReplicaResponse>() {",
    "conflict": "pendingShards.incrementAndGet(); replicasProxy.performOn(shard, replicaRequest, new ActionListener<ReplicaResponse>() {"
  },
  {
    "devdecision": "Manual",
    "id": 75412,
    "v2": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());",
    "resolution": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.getResult());",
    "conflict": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.isCreated());"
  },
  {
    "devdecision": "Manual",
    "id": 75413,
    "v2": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());",
    "resolution": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.getResult());",
    "conflict": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), false);"
  },
  {
    "devdecision": "Combination",
    "id": 75417,
    "v2": "this.indexAnalyzers = registry.build(indexSettings);",
    "resolution": "this.globalCheckpointSyncer = globalCheckpointSyncer; this.indexAnalyzers = registry.build(indexSettings);",
    "conflict": "this.globalCheckpointSyncer = globalCheckpointSyncer; this.analysisService = registry.build(indexSettings);"
  },
  {
    "devdecision": "Manual",
    "id": 75420,
    "v2": "Index(Term uid, ParsedDocument doc, long version) { this(uid, doc, version, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Index(Term uid, ParsedDocument doc, long version) { this(uid, doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "public Index(Term uid, ParsedDocument doc, long version) { this(uid, doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, VersionType.INTERNAL, Origin.PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Combination",
    "id": 75421,
    "v2": "import org.elasticsearch.Version; import org.elasticsearch.action.index.IndexRequest;",
    "resolution": "import org.elasticsearch.Version; import org.elasticsearch.action.fieldstats.FieldStats; import org.elasticsearch.action.index.IndexRequest;",
    "conflict": "import org.elasticsearch.action.fieldstats.FieldStats;"
  },
  {
    "devdecision": "Combination",
    "id": 75425,
    "v2": "private final String id, type; private final BytesRef uid;",
    "resolution": "private final String id, type; private final BytesRef uid; private final Field seqNo;",
    "conflict": "private final Field version; private final Field seqNo;"
  },
  {
    "devdecision": "Version 1",
    "id": 75426,
    "v2": "public ParsedDocument(Field version, String id, String type, String routing, long timestamp, long ttl, List<Document> documents, BytesReference source, Mapping dynamicMappingsUpdate) {",
    "resolution": "public ParsedDocument(Field version, Field seqNo, String id, String type, String routing, long timestamp, long ttl, List<Document> documents, BytesReference source, Mapping dynamicMappingsUpdate) {",
    "conflict": "public ParsedDocument(Field version, Field seqNo, String id, String type, String routing, long timestamp, long ttl, List<Document> documents, BytesReference source, Mapping dynamicMappingsUpdate) {"
  },
  {
    "devdecision": "Manual",
    "id": 75427,
    "v2": "return prepareIndex(docMapper(source.type()), source, version, versionType, Engine.Operation.Origin.PRIMARY, autoGeneratedIdTimestamp, isRetry);",
    "resolution": "return prepareIndex(docMapper(source.type()), source, seqNo, version, versionType, Engine.Operation.Origin.PRIMARY, autoGeneratedIdTimestamp, isRetry);",
    "conflict": "return prepareIndex(docMapper(source.type()), source, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, versionType, Engine.Operation.Origin.PRIMARY);"
  },
  {
    "devdecision": "Manual",
    "id": 75429,
    "v2": "static Engine.Index prepareIndex(DocumentMapperForType docMapper, SourceToParse source, long version, VersionType versionType, Engine.Operation.Origin origin, long autoGeneratedIdTimestamp, boolean isRetry) {",
    "resolution": "static Engine.Index prepareIndex(DocumentMapperForType docMapper, SourceToParse source, long seqNo, long version, VersionType versionType, Engine.Operation.Origin origin, long autoGeneratedIdTimestamp, boolean isRetry) {",
    "conflict": "static Engine.Index prepareIndex(DocumentMapperForType docMapper, SourceToParse source, long seqNo, long version, VersionType versionType, Engine.Operation.Origin origin) {"
  },
  {
    "devdecision": "Manual",
    "id": 75430,
    "v2": "return new Engine.Index(uid, doc, version, versionType, origin, startTime, autoGeneratedIdTimestamp, isRetry);",
    "resolution": "return new Engine.Index(uid, doc, seqNo, version, versionType, origin, startTime, autoGeneratedIdTimestamp, isRetry);",
    "conflict": "doc.seqNo().setLongValue(seqNo); return new Engine.Index(uid, doc, seqNo, version, versionType, origin, startTime);"
  },
  {
    "devdecision": "Combination",
    "id": 75432,
    "v2": ".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl()), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), origin, index.getAutoGeneratedIdTimestamp(), true);",
    "resolution": ".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl()), index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), origin, index.getAutoGeneratedIdTimestamp(), true);",
    "conflict": ".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl()), index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), origin);"
  },
  {
    "devdecision": "Version 2",
    "id": 75437,
    "v2": "import org.elasticsearch.cluster.routing.RecoverySource.SnapshotRecoverySource; import org.elasticsearch.cluster.routing.RecoverySource.Type;",
    "resolution": "import org.elasticsearch.cluster.routing.RecoverySource.SnapshotRecoverySource; import org.elasticsearch.cluster.routing.RecoverySource.Type;",
    "conflict": "import org.elasticsearch.cluster.routing.IndexShardRoutingTable;"
  },
  {
    "devdecision": "Manual",
    "id": 75440,
    "v2": "public void finalizeRecovery() { transportService.submitRequest(targetNode, PeerRecoveryTargetService.Actions.FINALIZE,",
    "resolution": "public FinalizeResponse finalizeRecovery() { return transportService.submitRequest(targetNode, PeerRecoveryTargetService.Actions.FINALIZE,",
    "conflict": "public FinalizeResponse finalizeRecovery() { return transportService.submitRequest(targetNode, RecoveryTargetService.Actions.FINALIZE,"
  },
  {
    "devdecision": "Manual",
    "id": 75452,
    "v2": "engine.index(new Engine.Index(newUid(\"3\"), doc, Versions.MATCH_ANY, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime() - engine.engineConfig.getFlushMergesAfter().nanos(), -1, false));",
    "resolution": "engine.index(new Engine.Index(newUid(\"3\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime() - engine.engineConfig.getFlushMergesAfter().nanos(), -1, false));",
    "conflict": "engine.index(new Engine.Index(newUid(\"3\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime() - engine.engineConfig.getFlushMergesAfter().nanos()));"
  },
  {
    "devdecision": "Combination",
    "id": 75472,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2L , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2L , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Combination",
    "id": 75473,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1L , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1L , VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75478,
    "v2": "ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), \"test\", null, -1, -1, testDocument(), new BytesArray(\"{}\"), null); Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), \"test\", null, -1, -1, testDocument(), new BytesArray(\"{}\"), null); Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "ParsedDocument doc = testParsedDocument(Integer.toString(i), Integer.toString(i), \"test\", null, SequenceNumbersService.UNASSIGNED_SEQ_NO, -1, testDocument(), new BytesArray(\"{}\"), null); Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75479,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false); engine.index(firstIndexRequest);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75481,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false); engine.index(firstIndexRequest);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75484,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false); engine.index(firstIndexRequest);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Version 2",
    "id": 75509,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.threadpool.ThreadPool; import org.elasticsearch.threadpool.ThreadPool.Cancellable; import org.elasticsearch.threadpool.ThreadPool.Names;"
  },
  {
    "devdecision": "Manual",
    "id": 75515,
    "v2": "public void registerIndexTemplateFilter(Class<? extends IndexTemplateFilter> indexTemplateFilter) { indexTemplateFilters.registerExtension(indexTemplateFilter);",
    "resolution": "public IndexNameExpressionResolver getIndexNameExpressionResolver() {",
    "conflict": "public void registerShardsAllocator(String name, Class<? extends ShardsAllocator> clazz) { shardsAllocators.registerExtension(name, clazz);"
  },
  {
    "devdecision": "Combination",
    "id": 75532,
    "v2": "import org.elasticsearch.env.NodeEnvironment; import org.elasticsearch.license.XPackLicenseState;",
    "resolution": "import org.elasticsearch.license.XPackLicenseState;",
    "conflict": "import org.elasticsearch.common.unit.RatioValue; import org.elasticsearch.license.plugin.core.XPackLicenseState;"
  },
  {
    "devdecision": "Manual",
    "id": 75537,
    "v2": "ThreadContext threadContext, SecurityLicenseState securityLicenseState, ScriptService scriptService) { this.scriptService = scriptService;",
    "resolution": "ThreadContext threadContext, XPackLicenseState licenseState, ScriptService scriptService) { this.scriptService = scriptService;",
    "conflict": "ThreadContext threadContext, XPackLicenseState licenseState) {"
  },
  {
    "devdecision": "Combination",
    "id": 75538,
    "v2": "import org.elasticsearch.script.ScriptService; import org.elasticsearch.xpack.security.SecurityLicenseState;",
    "resolution": "import org.elasticsearch.license.plugin.core.XPackLicenseState; import org.elasticsearch.script.ScriptService;",
    "conflict": "import org.elasticsearch.license.plugin.core.XPackLicenseState;"
  },
  {
    "devdecision": "Manual",
    "id": 75541,
    "v2": "public class GceComputeServiceImpl extends AbstractLifecycleComponent implements GceComputeService {",
    "resolution": "public class GceInstancesServiceImpl extends AbstractLifecycleComponent implements GceInstancesService {",
    "conflict": "public class GceInstancesServiceImpl extends AbstractLifecycleComponent<GceInstancesService> implements GceInstancesService {"
  },
  {
    "devdecision": "Combination",
    "id": 75542,
    "v2": "public Collection<Module> createGuiceModules() { return Collections.singletonList(new GceModule());",
    "resolution": "public Collection<Module> createGuiceModules() { return Collections.singletonList(new GceModule(settings));",
    "conflict": "public Collection<Module> nodeModules() { return Collections.singletonList(new GceModule(settings));"
  },
  {
    "devdecision": "Combination",
    "id": 75544,
    "v2": "import java.util.ArrayList; import java.util.Collection; import java.util.Collections;",
    "resolution": "import java.util.ArrayList; import java.util.Collection;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 75546,
    "v2": "import java.util.ArrayList; import java.util.Collection; import java.util.Collections;",
    "resolution": "import java.util.ArrayList; import java.util.Collection;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 75549,
    "v2": "import org.elasticsearch.watcher.ResourceWatcherService;  import java.util.Map;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 75554,
    "v2": "when(proxy.compile(new Script(templateText, type, lang, merged), Collections.singletonMap(\"content_type\", \"text/plain\")))",
    "resolution": "when(service.compile(new Script(templateText, type, lang, merged), WatcherScript.CTX, Collections.singletonMap(\"content_type\", \"text/plain\"))).thenReturn(compiledScript);",
    "conflict": "when(service.compile(new Template(templateText, type, lang, null, merged), WatcherScript.CTX, Collections.singletonMap(\"content_type\", \"text/plain\")))"
  },
  {
    "devdecision": "Manual",
    "id": 75555,
    "v2": "when(proxy.compile(new Script(templateText, scriptType, lang, model),",
    "resolution": "when(service.compile(new Script(templateText, scriptType, lang, model), WatcherScript.CTX,",
    "conflict": "when(service.compile(new Template(templateText, scriptType, lang, null, model), WatcherScript.CTX,"
  },
  {
    "devdecision": "Manual",
    "id": 75556,
    "v2": "when(proxy.compile(new Script(templateText, ScriptType.INLINE, lang, model),",
    "resolution": "when(service.compile(new Script(templateText, ScriptType.INLINE, lang, model), WatcherScript.CTX,",
    "conflict": "when(service.compile(new Template(templateText, ScriptType.INLINE, lang, null, model), WatcherScript.CTX,"
  },
  {
    "devdecision": "Concatenation",
    "id": 75557,
    "v2": "public boolean isEnabled() { return enabled;",
    "resolution": "public boolean isEnabled() { return enabled;public SecurityLicenseState getSecurityLicenseState() { return securityLicenseState;",
    "conflict": "public SecurityLicenseState getSecurityLicenseState() { return securityLicenseState;"
  },
  {
    "devdecision": "None",
    "id": 75573,
    "v2": "/** */",
    "resolution": "public class ExecutionService extends AbstractComponent {",
    "conflict": "import static org.elasticsearch.common.logging.LoggerMessageFormat.format;"
  },
  {
    "devdecision": "Combination",
    "id": 75576,
    "v2": "} catch (Exception e) {",
    "resolution": "} catch (Exception e) { // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed. // some operations were already perform and have a seqno assigned. we shouldn't just reindex them",
    "conflict": "} catch (Throwable e) { // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed. // some operations were already perform and have a seqno assigned. we shouldn't just reindex them"
  },
  {
    "devdecision": "Combination",
    "id": 75577,
    "v2": "} catch (Exception e) {",
    "resolution": "} catch (Exception e) { // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed. // some operations were already perform and have a seqno assigned. we shouldn't just reindex them",
    "conflict": "} catch (Throwable e) { // nocommit: since we now have RetryOnPrimaryException, retrying doesn't always mean the shard is closed. // some operations were already perform and have a seqno assigned. we shouldn't just reindex them"
  },
  {
    "devdecision": "Version 2",
    "id": 75586,
    "v2": "default void onFailedEngine(String reason, @Nullable Exception e) {}",
    "resolution": "default void onFailedEngine(String reason, @Nullable Exception e) {}",
    "conflict": "default void onFailedEngine(String reason, @Nullable Throwable t) { }"
  },
  {
    "devdecision": "Combination",
    "id": 75588,
    "v2": "",
    "resolution": "private Field seqNo;",
    "conflict": "private Field seqNo;  private StringBuilder stringBuilder = new StringBuilder();"
  },
  {
    "devdecision": "Manual",
    "id": 75592,
    "v2": "metaData, indicesQueryCache, indicesFieldDataCache, Collections.emptyList()); closeables.add(() -> service.close(\"metadata verification\", false));",
    "resolution": "metaData, indicesQueryCache, indicesFieldDataCache, Collections.emptyList(), s -> { }); closeables.add(() -> service.close(\"metadata verification\", false));",
    "conflict": "metaData, indicesQueryCache, indicesFieldDataCache, Collections.emptyList(), s -> {});"
  },
  {
    "devdecision": "Version 1",
    "id": 75597,
    "v2": "indexService.getThreadPool(), indexService.getBigArrays(), null, Collections.emptyList(), Arrays.asList(listeners));",
    "resolution": "indexService.getThreadPool(), indexService.getBigArrays(), null, shard.getGlobalCheckpointSyncer(), Collections.emptyList(), Arrays.asList(listeners) );",
    "conflict": "indexService.getThreadPool(), indexService.getBigArrays(), null, shard.getGlobalCheckpointSyncer(), Collections.emptyList(), Arrays.asList(listeners) );"
  },
  {
    "devdecision": "Combination",
    "id": 75604,
    "v2": "public class LicensesService extends AbstractLifecycleComponent implements ClusterStateListener, LicensesManagerService, LicenseeRegistry {",
    "resolution": "public class LicensesService extends AbstractLifecycleComponent implements ClusterStateListener, LicensesManagerService, LicenseeRegistry, SchedulerEngine.Listener {",
    "conflict": "public class LicensesService extends AbstractLifecycleComponent<LicensesService> implements ClusterStateListener, LicensesManagerService, LicenseeRegistry, SchedulerEngine.Listener {"
  },
  {
    "devdecision": "Combination",
    "id": 75606,
    "v2": "public void onFailure(Exception throwable) { latch.countDown();",
    "resolution": "public void onFailure(Exception throwable) {",
    "conflict": "public void onFailure(Throwable throwable) {"
  },
  {
    "devdecision": "Version 2",
    "id": 75612,
    "v2": "",
    "resolution": "",
    "conflict": "import static java.util.Collections.emptyMap; import static java.util.Collections.unmodifiableMap;"
  },
  {
    "devdecision": "Manual",
    "id": 75613,
    "v2": "PluginsService pluginService, CircuitBreakerService circuitBreakerService, HttpServer httpServer, ProcessorsRegistry.Builder processorsRegistryBuilder, ClusterService clusterService, SettingsFilter settingsFilter) {",
    "resolution": "CircuitBreakerService circuitBreakerService, ScriptService scriptService, HttpServer httpServer, IngestService ingestService, ClusterService clusterService, SettingsFilter settingsFilter) {",
    "conflict": "PluginsService pluginService, CircuitBreakerService circuitBreakerService, ScriptService scriptService, IngestService ingestService, ClusterService clusterService, SettingsFilter settingsFilter) {"
  },
  {
    "devdecision": "Manual",
    "id": 75625,
    "v2": "public AppendProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public AppendProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public AppendProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75630,
    "v2": "public FailProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public FailProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public FailProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75633,
    "v2": "public GrokProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public GrokProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public GrokProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75637,
    "v2": "public RemoveProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public RemoveProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public RemoveProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75640,
    "v2": "public ScriptProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public ScriptProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public ScriptProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75642,
    "v2": "public SetProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public SetProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public SetProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75645,
    "v2": "AppendProcessor appendProcessor = factory.create(processorTag, config);",
    "resolution": "config.put(\"value\", value); String processorTag = randomAsciiOfLength(10); AppendProcessor appendProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); AppendProcessor appendProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75646,
    "v2": "ConvertProcessor convertProcessor = factory.create(processorTag, config);",
    "resolution": "ConvertProcessor convertProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); ConvertProcessor convertProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75647,
    "v2": "ConvertProcessor convertProcessor = factory.create(processorTag, config);",
    "resolution": "ConvertProcessor convertProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); ConvertProcessor convertProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75648,
    "v2": "DateProcessor processor = factory.create(processorTag, config);",
    "resolution": "DateProcessor processor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); DateProcessor processor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75649,
    "v2": "FailProcessor failProcessor = factory.create(processorTag, config);",
    "resolution": "FailProcessor failProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); FailProcessor failProcessor = (FailProcessor)factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75654,
    "v2": "GrokProcessor processor = factory.create(processorTag, config);",
    "resolution": "GrokProcessor processor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); GrokProcessor processor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75660,
    "v2": "GsubProcessor gsubProcessor = factory.create(processorTag, config);",
    "resolution": "GsubProcessor gsubProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); GsubProcessor gsubProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75661,
    "v2": "JoinProcessor joinProcessor = factory.create(processorTag, config);",
    "resolution": "JoinProcessor joinProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); JoinProcessor joinProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75662,
    "v2": "LowercaseProcessor uppercaseProcessor = (LowercaseProcessor)factory.create(processorTag, config);",
    "resolution": "LowercaseProcessor uppercaseProcessor = (LowercaseProcessor)factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); LowercaseProcessor uppercaseProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75663,
    "v2": "RemoveProcessor removeProcessor = factory.create(processorTag, config);",
    "resolution": "RemoveProcessor removeProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); RemoveProcessor removeProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75664,
    "v2": "RenameProcessor renameProcessor = factory.create(processorTag, config);",
    "resolution": "RenameProcessor renameProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); RenameProcessor renameProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75667,
    "v2": "SetProcessor setProcessor = factory.create(processorTag, config);",
    "resolution": "SetProcessor setProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); SetProcessor setProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75668,
    "v2": "SetProcessor setProcessor = factory.create(processorTag, config);",
    "resolution": "SetProcessor setProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); SetProcessor setProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75669,
    "v2": "SplitProcessor splitProcessor = factory.create(processorTag, config);",
    "resolution": "SplitProcessor splitProcessor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); SplitProcessor splitProcessor = (SplitProcessor)factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75671,
    "v2": "TrimProcessor uppercaseProcessor = (TrimProcessor)factory.create(processorTag, config);",
    "resolution": "TrimProcessor uppercaseProcessor = (TrimProcessor)factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); TrimProcessor uppercaseProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75672,
    "v2": "UppercaseProcessor uppercaseProcessor = (UppercaseProcessor)factory.create(processorTag, config);",
    "resolution": "UppercaseProcessor uppercaseProcessor = (UppercaseProcessor)factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); UppercaseProcessor uppercaseProcessor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75674,
    "v2": "public AttachmentProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public AttachmentProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public AttachmentProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75676,
    "v2": "AttachmentProcessor processor = factory.create(processorTag, config);",
    "resolution": "config.put(\"indexed_chars\", indexedChars);  String processorTag = randomAsciiOfLength(10); AttachmentProcessor processor = factory.create(null, processorTag, config);",
    "conflict": "config.put(AbstractProcessorFactory.TAG_KEY, processorTag); AttachmentProcessor processor = factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75679,
    "v2": "public GeoIpProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public GeoIpProcessor create(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {",
    "conflict": "public GeoIpProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Manual",
    "id": 75690,
    "v2": "RestCountPercolateExistingDocHandler countExistingDocHandler = new RestCountPercolateExistingDocHandler(settings, controller, client);",
    "resolution": "RestCountPercolateExistingDocHandler countExistingDocHandler = new RestCountPercolateExistingDocHandler(settings);",
    "conflict": "RestCountPercolateExistingDocHandler countExistingDocHandler = new RestCountPercolateExistingDocHandler(settings, controller);"
  },
  {
    "devdecision": "Manual",
    "id": 75691,
    "v2": "void parseExistingDocPercolate(PercolateRequest percolateRequest, RestRequest restRequest, RestChannel restChannel, final Client client) {",
    "resolution": "void parseExistingDocPercolate(PercolateRequest percolateRequest, RestRequest restRequest, RestChannel restChannel, NodeClient client) {",
    "conflict": "void parseExistingDocPercolate(PercolateRequest percolateRequest, RestRequest restRequest, RestChannel restChannel) {"
  },
  {
    "devdecision": "Combination",
    "id": 75704,
    "v2": "new IndicesModule(namedWriteableRegistry) {",
    "resolution": "new IndicesModule(namedWriteableRegistry, Collections.emptyList()) {",
    "conflict": "scriptModule, new IndicesModule(namedWriteableRegistry, Collections.emptyList()) {"
  },
  {
    "devdecision": "Version 2",
    "id": 75706,
    "v2": "",
    "resolution": "",
    "conflict": "successfulShards.incrementAndGet(); // mark primary as successful decPendingAndFinishIfNeeded();"
  },
  {
    "devdecision": "Combination",
    "id": 75710,
    "v2": "",
    "resolution": "import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction;",
    "conflict": "import org.elasticsearch.index.mapper.DocumentMapper; import org.elasticsearch.index.mapper.MapperService; import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction;"
  },
  {
    "devdecision": "Combination",
    "id": 75715,
    "v2": "boolean transport, boolean http, boolean plugin, boolean ingest) { return new NodeInfo(Version.CURRENT, Build.CURRENT, discovery.localNode(), serviceAttributes,",
    "resolution": "boolean transport, boolean http, boolean plugin, boolean ingest, boolean indices) { return new NodeInfo(Version.CURRENT, Build.CURRENT, discovery.localNode(), serviceAttributes,",
    "conflict": "boolean transport, boolean http, boolean plugin, boolean ingest, boolean indices) { return new NodeInfo(version, Build.CURRENT, discovery.localNode(), serviceAttributes,"
  },
  {
    "devdecision": "Version 2",
    "id": 75718,
    "v2": "public class GraphWithSecurityIT extends ESRestTestCase {",
    "resolution": "public class GraphWithSecurityIT extends ESRestTestCase {",
    "conflict": "public class GraphWithShieldIT extends ESRestTestCase {"
  },
  {
    "devdecision": "Combination",
    "id": 75719,
    "v2": "import org.elasticsearch.xpack.security.authc.support.SecuredString; import org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken;",
    "resolution": "import org.elasticsearch.xpack.security.authc.support.SecuredString;",
    "conflict": "import org.elasticsearch.shield.authc.support.SecuredString;"
  },
  {
    "devdecision": "Combination",
    "id": 75721,
    "v2": "import org.elasticsearch.xpack.security.authc.support.SecuredString; import org.elasticsearch.test.rest.client.http.HttpRequestBuilder; import org.elasticsearch.test.rest.client.http.HttpResponse;",
    "resolution": "import org.elasticsearch.xpack.security.authc.support.SecuredString;",
    "conflict": "import org.elasticsearch.shield.authc.support.SecuredString;"
  },
  {
    "devdecision": "Combination",
    "id": 75728,
    "v2": "import org.elasticsearch.test.SecuritySettingsSource; import org.elasticsearch.test.rest.client.http.HttpResponse;",
    "resolution": "import org.elasticsearch.test.SecuritySettingsSource;",
    "conflict": "import org.elasticsearch.test.ShieldSettingsSource;"
  },
  {
    "devdecision": "Combination",
    "id": 75732,
    "v2": "import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue; import static org.hamcrest.Matchers.allOf;",
    "resolution": "import static org.elasticsearch.xpack.security.authc.support.UsernamePasswordToken.basicAuthHeaderValue;",
    "conflict": "import static org.elasticsearch.shield.authc.support.UsernamePasswordToken.basicAuthHeaderValue;"
  },
  {
    "devdecision": "Version 2",
    "id": 75735,
    "v2": "\"  run_as: [ '\" + SecuritySettingsSource.DEFAULT_USER_NAME + \"', 'idontexist' ]\\n\";",
    "resolution": "\"  run_as: [ '\" + SecuritySettingsSource.DEFAULT_USER_NAME + \"', 'idontexist' ]\\n\";",
    "conflict": "\"  run_as: [ '\" + ShieldSettingsSource.DEFAULT_USER_NAME + \"', 'idontexist' ]\\n\";"
  },
  {
    "devdecision": "None",
    "id": 75749,
    "v2": "import org.elasticsearch.xpack.security.authc.support.SecuredString;",
    "resolution": "import org.elasticsearch.test.rest.ESRestTestCase;",
    "conflict": "import org.elasticsearch.shield.authc.esnative.ReservedRealm; import org.elasticsearch.shield.authc.support.SecuredString; import org.elasticsearch.shield.authz.store.ReservedRolesStore;"
  },
  {
    "devdecision": "Combination",
    "id": 75754,
    "v2": "args.add(DefBootstrap.METHOD_CALL); args.add(recipe.toString());",
    "resolution": "args.add(recipe.toString());",
    "conflict": "args.add(recipe);"
  },
  {
    "devdecision": "Combination",
    "id": 75755,
    "v2": "import java.util.Objects; import java.util.Set;  import static org.elasticsearch.painless.WriterConstants.DEF_BOOTSTRAP_HANDLE;",
    "resolution": "import java.util.Objects; import java.util.Set;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 75757,
    "v2": "DefBootstrap.METHOD_CALL, \"\");",
    "resolution": "0, DefBootstrap.METHOD_CALL, \"\");",
    "conflict": "0, DefBootstrap.METHOD_CALL, 0L);"
  },
  {
    "devdecision": "Combination",
    "id": 75758,
    "v2": "DefBootstrap.METHOD_CALL, \"\");",
    "resolution": "0, DefBootstrap.METHOD_CALL, \"\");",
    "conflict": "0, DefBootstrap.METHOD_CALL, 0L);"
  },
  {
    "devdecision": "Combination",
    "id": 75759,
    "v2": "DefBootstrap.METHOD_CALL, \"\");",
    "resolution": "0, DefBootstrap.METHOD_CALL, \"\");",
    "conflict": "0, DefBootstrap.METHOD_CALL, 0L);"
  },
  {
    "devdecision": "Combination",
    "id": 75760,
    "v2": "DefBootstrap.METHOD_CALL, \"\");",
    "resolution": "0, DefBootstrap.METHOD_CALL, \"\");",
    "conflict": "0, DefBootstrap.METHOD_CALL, 0L);"
  },
  {
    "devdecision": "Combination",
    "id": 75761,
    "v2": "modules.add(new ClusterModule(this.settings, clusterService)); modules.add(new IndicesModule());",
    "resolution": "modules.add(new ClusterModule(this.settings, clusterService)); modules.add(new IndicesModule(namedWriteableRegistry));",
    "conflict": "modules.add(new ClusterModule(this.settings)); modules.add(new IndicesModule(namedWriteableRegistry));"
  },
  {
    "devdecision": "Manual",
    "id": 75770,
    "v2": "new IndicesModule() {",
    "resolution": "new EnvironmentModule(new Environment(settings), threadPool), settingsModule, new IndicesModule(namedWriteableRegistry) {",
    "conflict": "new ThreadPoolModule(threadPool), new IndicesModule(namedWriteableRegistry) {"
  },
  {
    "devdecision": "Version 1",
    "id": 75803,
    "v2": "setState(415); switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {",
    "resolution": "setState(412); switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {",
    "conflict": "setState(412); switch ( getInterpreter().adaptivePredict(_input,33,_ctx) ) {"
  },
  {
    "devdecision": "Manual",
    "id": 75811,
    "v2": "setState(228); switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {",
    "resolution": "setState(232); switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {",
    "conflict": "setState(201); switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {"
  },
  {
    "devdecision": "Manual",
    "id": 75816,
    "v2": "setState(287); switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {",
    "resolution": "setState(291); switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {",
    "conflict": "setState(260); switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {"
  },
  {
    "devdecision": "Manual",
    "id": 75834,
    "v2": "setState(321); switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {",
    "resolution": "setState(325); switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {",
    "conflict": "setState(294); switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {"
  },
  {
    "devdecision": "Manual",
    "id": 75846,
    "v2": "setState(357); switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {",
    "resolution": "setState(361); switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {",
    "conflict": "setState(330); switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {"
  },
  {
    "devdecision": "Manual",
    "id": 75858,
    "v2": "setState(377); switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {",
    "resolution": "setState(381); switch ( getInterpreter().adaptivePredict(_input,29,_ctx) ) {",
    "conflict": "setState(348); switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {"
  },
  {
    "devdecision": "Manual",
    "id": 75866,
    "v2": "setState(390); switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {",
    "resolution": "setState(394); switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {",
    "conflict": "setState(361); switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {"
  },
  {
    "devdecision": "Combination",
    "id": 75883,
    "v2": "IndexResponse indexResponse = result.getResponse(); UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getVersion(), indexResponse.isCreated());",
    "resolution": "IndexResponse indexResponse = result.getResponse(); UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getSeqNo(), indexResponse.getVersion(), indexResponse.isCreated());",
    "conflict": "IndexResponse indexResponse = result.response(); UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getSeqNo(), indexResponse.getVersion(), indexResponse.isCreated());"
  },
  {
    "devdecision": "Manual",
    "id": 75885,
    "v2": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created); return new WriteResult<>(response, operation.getTranslogLocation());",
    "resolution": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), created); return new WriteResult<>(response, operation.getTranslogLocation());",
    "conflict": "return new WriteResult<>(new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), created), operation.getTranslogLocation());"
  },
  {
    "devdecision": "Version 2",
    "id": 75888,
    "v2": "final List<ShardRouting> shards = getShards(primaryId, clusterStateSupplier.get()); final String localNodeId = primary.routingEntry().currentNodeId();",
    "resolution": "final List<ShardRouting> shards = getShards(primaryId, clusterStateSupplier.get()); final String localNodeId = primary.routingEntry().currentNodeId();",
    "conflict": "List<ShardRouting> shards = getShards(shardId, clusterStateSupplier.get()); final String localNodeId = primaryRouting.currentNodeId();"
  },
  {
    "devdecision": "Version 2",
    "id": 75889,
    "v2": "* * @param replica        {@link ShardRouting} of the shard this request should be executed on",
    "resolution": "* * @param replica        {@link ShardRouting} of the shard this request should be executed on",
    "conflict": "* @param replica {@link ShardRouting} of the shard this request should be executed on"
  },
  {
    "devdecision": "Concatenation",
    "id": 75894,
    "v2": "IndexSettings.MAX_REFRESH_LISTENERS_PER_SHARD,",
    "resolution": "IndexSettings.MAX_REFRESH_LISTENERS_PER_SHARD,IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL, LocalCheckpointService.SETTINGS_BIT_ARRAYS_SIZE,",
    "conflict": "IndexSettings.INDEX_SEQ_NO_CHECKPOINT_SYNC_INTERVAL, LocalCheckpointService.SETTINGS_BIT_ARRAYS_SIZE,"
  },
  {
    "devdecision": "Version 2",
    "id": 75909,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75911,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75912,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75913,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75914,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75915,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75916,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75917,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75918,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75919,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75920,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75921,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75922,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75923,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75924,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75925,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75926,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75927,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75928,
    "v2": "writer.writeDebugInfo(location);",
    "resolution": "writer.writeDebugInfo(location);",
    "conflict": "writer.writeDebugInfo(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75929,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75930,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75931,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75932,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75933,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75934,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Manual",
    "id": 75936,
    "v2": "public STry(Location location, SBlock block, List<SCatch> traps) { super(location);",
    "resolution": "public STry(Location location, SBlock block, List<SCatch> catches) { super(location);",
    "conflict": "public STry(int line, int offset, String location, SBlock block, List<SCatch> catches) { super(line, offset, location);"
  },
  {
    "devdecision": "Version 2",
    "id": 75937,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75938,
    "v2": "writer.writeStatementOffset(location);",
    "resolution": "writer.writeStatementOffset(location);",
    "conflict": "writer.writeStatementOffset(offset);"
  },
  {
    "devdecision": "Version 2",
    "id": 75943,
    "v2": "if (!index.origin().isRecovery()) {",
    "resolution": "if (!index.origin().isRecovery()) {",
    "conflict": "if (index.origin() == Operation.Origin.RECOVERY) { return false; } else {"
  },
  {
    "devdecision": "Manual",
    "id": 75947,
    "v2": ".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl()), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), origin);",
    "resolution": ".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl()), index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), origin);",
    "conflict": ".routing(index.routing()).parent(index.parent()).timestamp(index.timestamp()).ttl(index.ttl()), index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), Engine.Operation.Origin.RECOVERY);"
  },
  {
    "devdecision": "Manual",
    "id": 75948,
    "v2": "final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), origin, System.nanoTime(), false);",
    "resolution": "final Engine.Delete engineDelete = new Engine.Delete(uid.type(), uid.id(), delete.uid(), delete.seqNo(), delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), origin, System.nanoTime(), false);",
    "conflict": "final Engine.Delete engineDelete = IndexShard.prepareDelete(uid.type(), uid.id(), delete.uid(), delete.seqNo(), delete.version(), delete.versionType().versionTypeForReplicationAndRecovery(), Engine.Operation.Origin.RECOVERY);"
  },
  {
    "devdecision": "Version 1",
    "id": 75953,
    "v2": "this.uid = delete.uid(); this.version = delete.version(); this.versionType = delete.versionType();",
    "resolution": "this(delete.uid(), delete.seqNo(), delete.version(), delete.versionType());",
    "conflict": "this(delete.uid(), delete.seqNo(), delete.version(), delete.versionType());"
  },
  {
    "devdecision": "Combination",
    "id": 75959,
    "v2": "import java.util.concurrent.TimeUnit; import java.util.concurrent.atomic.AtomicInteger;",
    "resolution": "import java.util.concurrent.TimeUnit; import java.util.stream.Collectors;",
    "conflict": "import java.util.stream.Collectors;"
  },
  {
    "devdecision": "Combination",
    "id": 75968,
    "v2": "if (java.lang.reflect.Modifier.isStatic(method.reflect.getModifiers())) { writer.invokeStatic(method.owner.type, method.method);",
    "resolution": "if (java.lang.reflect.Modifier.isStatic(method.modifiers)) { writer.invokeStatic(method.owner.type, method.method);",
    "conflict": "if (java.lang.reflect.Modifier.isStatic(method.modifiers)) { adapter.invokeStatic(method.owner.type, method.method);"
  },
  {
    "devdecision": "Manual",
    "id": 75972,
    "v2": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats());",
    "resolution": "return new ShardStats( indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());",
    "conflict": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());"
  },
  {
    "devdecision": "Manual",
    "id": 75976,
    "v2": "1 + randomInt(100000), randomFrom(VersionType.values()));",
    "resolution": "new Term(\"_uid\", threadId + \"_\" + opCount), opCount, 1 + randomInt(100000), randomFrom(VersionType.values()));",
    "conflict": "opCount, 1 + randomInt(100000), randomFrom(VersionType.values()));"
  },
  {
    "devdecision": "Version 1",
    "id": 75997,
    "v2": "this.structsMap = Collections.unmodifiableMap(structs); this.runtimeMap = Collections.unmodifiableMap(definition.runtimeMap); this.simpleTypesMap = Collections.unmodifiableMap(definition.simpleTypesMap);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 76001,
    "v2": "AExpression cast(final CompilerSettings settings, final Definition definition, final Variables variables) { final Cast cast = AnalyzerCaster.getLegalCast(definition, location, actual, expected, explicit, internal);",
    "resolution": "AExpression cast(Variables variables) { final Cast cast = AnalyzerCaster.getLegalCast(location, actual, expected, explicit, internal);",
    "conflict": "AExpression cast(Variables variables) { final Cast cast = AnalyzerCaster.getLegalCast(location, actual, expected, explicit);"
  },
  {
    "devdecision": "Manual",
    "id": 76013,
    "v2": "there = AnalyzerCaster.getLegalCast(definition, location, last.after, promote, false, false); back = AnalyzerCaster.getLegalCast(definition, location, promote, last.after, true, false);",
    "resolution": "there = AnalyzerCaster.getLegalCast(location, last.after, promote, false, false); back = AnalyzerCaster.getLegalCast(location, promote, last.after, true, false);",
    "conflict": "there = AnalyzerCaster.getLegalCast(location, last.after, promote, false); back = AnalyzerCaster.getLegalCast(location, promote, last.after, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76022,
    "v2": "} else if (!left.isNull && (operation == Operation.EQ || operation == Operation.NE)) { adapter.invokeStatic(DEF_TYPE, DEF_EQ_CALL);",
    "resolution": "} else if (!left.isNull && (operation == Operation.EQ || operation == Operation.NE)) { adapter.invokeStatic(DEF_UTIL_TYPE, DEF_EQ_CALL);",
    "conflict": "} else if (!left.isNull && operation == Operation.NE) { adapter.invokeStatic(Definition.DEF_UTIL_TYPE.type, DEF_EQ_CALL);"
  },
  {
    "devdecision": "Version 2",
    "id": 76024,
    "v2": "} else if (operation == Operation.EQ || operation == Operation.NE) { adapter.invokeStatic(UTILITY_TYPE, CHECKEQUALS);",
    "resolution": "} else if (operation == Operation.EQ || operation == Operation.NE) { adapter.invokeStatic(UTILITY_TYPE, CHECKEQUALS);",
    "conflict": "} else if (operation == Operation.EQ) { adapter.invokeStatic(Definition.UTILITY_TYPE.type, CHECKEQUALS);"
  },
  {
    "devdecision": "Version 2",
    "id": 76025,
    "v2": "} else if (operation == Operation.EQ || operation == Operation.NE) { adapter.invokeStatic(UTILITY_TYPE, CHECKEQUALS);",
    "resolution": "} else if (operation == Operation.EQ || operation == Operation.NE) { adapter.invokeStatic(UTILITY_TYPE, CHECKEQUALS);",
    "conflict": "} else if (operation == Operation.NE) { adapter.invokeStatic(Definition.UTILITY_TYPE.type, CHECKEQUALS);"
  },
  {
    "devdecision": "Combination",
    "id": 76033,
    "v2": "expression.internal = true; expression.analyze(settings, definition, variables);",
    "resolution": "expression.internal = true; expression.analyze(variables);",
    "conflict": "expression.analyze(variables);"
  },
  {
    "devdecision": "Manual",
    "id": 76049,
    "v2": "public Engine recoverFromTranslog() throws IOException { throw new UnsupportedOperationException(\"can't recover on a shadow engine\");",
    "resolution": "public SeqNoStats seqNoStats() { throw new UnsupportedOperationException(\"ShadowEngine doesn't track sequence numbers\");",
    "conflict": "public SeqNoStats seqNoStats() { throw new UnsupportedOperationException(\"ShadowEngine doesn't track sequence numbers\");"
  },
  {
    "devdecision": "Manual",
    "id": 76053,
    "v2": "public ParsedDocument(Field version, String id, String type, String routing, long timestamp, long ttl, List<Document> documents, BytesReference source, Mapping dynamicMappingsUpdate) {",
    "resolution": "public ParsedDocument(Field version, Field seqNo, String id, String type, String routing, long timestamp, long ttl, List<Document> documents, BytesReference source, Mapping dynamicMappingsUpdate) { this.version = version;",
    "conflict": "public ParsedDocument(Field uid, Field version, Field seqNo, String id, String type, String routing, long timestamp, long ttl, List<Document> documents, BytesReference source, Mapping dynamicMappingsUpdate) { this.uid = uid;"
  },
  {
    "devdecision": "Version 2",
    "id": 76054,
    "v2": "public String uid() { return uid;",
    "resolution": "public String uid() { return uid;",
    "conflict": "public Field seqNo() { return seqNo;"
  },
  {
    "devdecision": "Manual",
    "id": 76063,
    "v2": "ParsedDocument pd = new ParsedDocument(new NumericDocValuesField(\"version\", 1), \"id\",",
    "resolution": "ParsedDocument pd = new ParsedDocument(new NumericDocValuesField(\"version\", 1), new NumericDocValuesField(\"seqNo\", 1), \"id\", \"test\", null, 0, -1, null, source, null);",
    "conflict": "ParsedDocument pd = new ParsedDocument(new StringField(\"uid\", \"test:id\", Store.YES), new LegacyIntField(\"version\", 1, Store.YES), new LegacyIntField(\"seqNo\", 1, Store.YES) , \"id\","
  },
  {
    "devdecision": "Manual",
    "id": 76065,
    "v2": "document.add(new LongPoint(\"point_field\", 42)); // so that points report memory/disk usage return new ParsedDocument(versionField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingsUpdate);",
    "resolution": "document.add(new LongPoint(\"point_field\", 42)); // so that points report memory/disk usage return new ParsedDocument(versionField, seqNoField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingsUpdate);",
    "conflict": "return new ParsedDocument(uidField, versionField, seqNoField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingsUpdate);"
  },
  {
    "devdecision": "Combination",
    "id": 76081,
    "v2": "private Settings loadFromClasspath(String path) { return Settings.builder().loadFromStream(path, getClass().getResourceAsStream(path))",
    "resolution": "private Settings loadFromClasspath(String path) throws IOException { return Settings.builder().loadFromStream(path, getClass().getResourceAsStream(path))",
    "conflict": "private Settings loadFromClasspath(String path) throws IOException { return settingsBuilder().loadFromStream(path, getClass().getResourceAsStream(path))"
  },
  {
    "devdecision": "Version 2",
    "id": 76084,
    "v2": "TransportService masterTranspotService = internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName());",
    "resolution": "TransportService masterTranspotService = internalCluster().getInstance(TransportService.class, discoveryNodes.getMasterNode().getName());",
    "conflict": "TransportService masterTranspotService = internalCluster().getInstance(TransportService.class, discoveryNodes.masterNode() .getName());"
  },
  {
    "devdecision": "Manual",
    "id": 76096,
    "v2": "return IndexShardReferenceImpl.createOnPrimary(indexShard);",
    "resolution": "IndexShardReference ref = IndexShardReferenceImpl.createOnPrimary(indexShard); assert addShardReference(ref, \"primary: \" + request.toString() + \" \" + ref.routingEntry()); return ref;",
    "conflict": "IndexShardReference ref = new IndexShardReferenceImpl(indexShard, true); assert addShardReference(ref, \"primary: \" + request.toString() + \" \" + ref.routingEntry()); return ref;"
  },
  {
    "devdecision": "Version 2",
    "id": 76107,
    "v2": "/** returns the primary term of the current operation */",
    "resolution": "/** returns the primary term of the current operation */",
    "conflict": "/** returns the primary term of the current opration */"
  },
  {
    "devdecision": "Version 2",
    "id": 76111,
    "v2": "import org.elasticsearch.cluster.routing.RoutingTable; import org.elasticsearch.cluster.routing.allocation.AllocationService;",
    "resolution": "import org.elasticsearch.cluster.routing.RoutingTable; import org.elasticsearch.cluster.routing.allocation.AllocationService;",
    "conflict": "import org.elasticsearch.cluster.routing.ShardRouting;"
  },
  {
    "devdecision": "Version 2",
    "id": 76112,
    "v2": "* a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary * See {@link AllocationService#updateMetaDataWithRoutingTable(MetaData, RoutingTable, RoutingTable)}.",
    "resolution": "* a primary shard is assigned after a full cluster restart or a replica shard is promoted to a primary * See {@link AllocationService#updateMetaDataWithRoutingTable(MetaData, RoutingTable, RoutingTable)}.",
    "conflict": "* a primary shard is assigned after a full cluster restart (see {@link ShardRouting#initialize(java.lang.String, java.lang.String, long)} * or a replica shard is promoted to a primary (see {@link ShardRouting#moveToPrimary()})."
  },
  {
    "devdecision": "Version 1",
    "id": 76113,
    "v2": "tmpAliases.build(), customs.build(), filledActiveAllocationIds.build(), requireFilters, includeFilters, excludeFilters, indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion);",
    "resolution": "tmpAliases.build(), customs.build(), filledActiveAllocationIds.build(), requireFilters, includeFilters, excludeFilters, indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion);",
    "conflict": "tmpAliases.build(), customs.build(), filledActiveAllocationIds.build(), requireFilters, includeFilters, excludeFilters, indexCreatedVersion, indexUpgradedVersion, minimumCompatibleLuceneVersion);"
  },
  {
    "devdecision": "Version 2",
    "id": 76114,
    "v2": "",
    "resolution": "",
    "conflict": "// normalize the versions right before we build it... for (ObjectCursor<IndexRoutingTable> indexRoutingTable : indicesRouting.values()) { indicesRouting.put(indexRoutingTable.value.getIndex().getName(), indexRoutingTable.value.normalizePrimaryTerms()); }"
  },
  {
    "devdecision": "Version 2",
    "id": 76118,
    "v2": "public void writeOptionalWriteable(@Nullable Writeable<?> writeable) throws IOException {",
    "resolution": "public void writeOptionalWriteable(@Nullable Writeable<?> writeable) throws IOException {",
    "conflict": "public void writeOptionalWriteable(@Nullable Writeable writeable) throws IOException {"
  },
  {
    "devdecision": "Version 2",
    "id": 76129,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.cluster.routing.IndexRoutingTable; import org.elasticsearch.cluster.routing.IndexShardRoutingTable; import org.elasticsearch.cluster.routing.ShardRouting;"
  },
  {
    "devdecision": "Version 2",
    "id": 76134,
    "v2": "public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, boolean primary, ShardRoutingState state) { return newShardRouting(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE), shardId, currentNodeId, primary, state);",
    "resolution": "public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, boolean primary, ShardRoutingState state) { return newShardRouting(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE), shardId, currentNodeId, primary, state);",
    "conflict": "public static ShardRouting newShardRouting(String index, int shardId, String currentNodeId, long primaryTerm, boolean primary, ShardRoutingState state) { return newShardRouting(new Index(index, IndexMetaData.INDEX_UUID_NA_VALUE), shardId, currentNodeId, primaryTerm,primary, state);"
  },
  {
    "devdecision": "Combination",
    "id": 76143,
    "v2": "public static final ScoreSortBuilder PROTOTYPE = new ScoreSortBuilder(); public static final ParseField REVERSE_FIELD = new ParseField(\"reverse\");",
    "resolution": "public static final ScoreSortBuilder PROTOTYPE = new ScoreSortBuilder(); public static final ParseField ORDER_FIELD = new ParseField(\"order\");",
    "conflict": "static final ScoreSortBuilder PROTOTYPE = new ScoreSortBuilder();"
  },
  {
    "devdecision": "Version 2",
    "id": 76145,
    "v2": "import static org.elasticsearch.common.util.set.Sets.newHashSet;",
    "resolution": "import static org.elasticsearch.common.util.set.Sets.newHashSet;",
    "conflict": "import java.util.Map;"
  },
  {
    "devdecision": "Manual",
    "id": 76147,
    "v2": "shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));",
    "resolution": "shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats(), indexShard.seqNoStats()));",
    "conflict": "shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats(), indexShard.seqNoStats()));"
  },
  {
    "devdecision": "Manual",
    "id": 76148,
    "v2": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, flags), indexShard.commitStats());",
    "resolution": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexService.cache().getPercolatorQueryCache(), indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());",
    "conflict": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());"
  },
  {
    "devdecision": "Version 1",
    "id": 76149,
    "v2": ": String.format(Locale.ROOT, \"expected [%d] task result%s but was [%d]\", toExecute.size(), toExecute.size() == 1 ? \"\" : \"s\", batchResult.executionResults.size());",
    "resolution": ": String.format(Locale.ROOT, \"expected [%d] task result%s but was [%d]\", toExecute.size(), toExecute.size() == 1 ? \"\" : \"s\", batchResult.executionResults.size());",
    "conflict": ": String.format(Locale.ROOT, \"expected [%d] task result%s but was [%d]\", toExecute.size(), toExecute.size() == 1 ? \"\" : \"s\", batchResult.executionResults.size());"
  },
  {
    "devdecision": "Combination",
    "id": 76152,
    "v2": "int numShards = randomInt(3); setState(clusterService, stateWithAssignedPrimariesAndOneReplica(index, numShards));",
    "resolution": "int numShards = 1 + randomInt(3); setState(clusterService, stateWithAssignedPrimariesAndOneReplica(index, numShards));",
    "conflict": "int numShards = 1 + randomInt(3); clusterService.setState(stateWithAssignedPrimariesAndOneReplica(index, numShards));"
  },
  {
    "devdecision": "Combination",
    "id": 76155,
    "v2": "public DiscoveryNode buildLocalNode(TransportAddress publishAddress) { Map<String, String> attributes = new HashMap<>(settings.getByPrefix(\"node.\").getAsMap());",
    "resolution": "public DiscoveryNode buildLocalNode(TransportAddress publishAddress) { Map<String, String> attributes = new HashMap<>(Node.NODE_ATTRIBUTES.get(this.settings).getAsMap());",
    "conflict": "public Map<String, String> buildAttributes() { Map<String, String> attributes = new HashMap<>(Node.NODE_ATTRIBUTES.get(this.settings).getAsMap());"
  },
  {
    "devdecision": "Combination",
    "id": 76159,
    "v2": "SuggestRequest suggestRequest = new SuggestRequest(randomIndicesOrAliases()).suggest(new SuggestBuilder()); internalCluster().clientNodeClient().suggest(suggestRequest).actionGet();",
    "resolution": "SuggestRequest suggestRequest = new SuggestRequest(randomIndicesOrAliases()).suggest(new SuggestBuilder()); internalCluster().coordOnlyNodeClient().suggest(suggestRequest).actionGet();",
    "conflict": "SuggestRequest suggestRequest = new SuggestRequest(randomIndicesOrAliases()); internalCluster().coordOnlyNodeClient().suggest(suggestRequest).actionGet();"
  },
  {
    "devdecision": "Combination",
    "id": 76165,
    "v2": "final Index index = new Index(\"test\", \"0xdeadbeef\"); ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "final Index index = new Index(\"test\", \"0xdeadbeef\"); ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "final Index index = new Index(\"test\", \"_na_\"); ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 76180,
    "v2": "final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.mapperService(), indexService.fieldData(), request.shardId());",
    "resolution": "final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.newQueryShardContext());",
    "conflict": "final SuggestionSearchContext context = suggestPhase.parseElement().parseInternal(parser, indexService.newQueryShardContext());"
  },
  {
    "devdecision": "Version 1",
    "id": 76188,
    "v2": "IndexService indexService = indicesService.indexService(suggestion.getShard().getIndex()); final ParsedQuery parsedQuery = indexService.newQueryShardContext().parse(querySource);",
    "resolution": "final ParsedQuery parsedQuery = suggestion.getShardContext().parse(querySource);",
    "conflict": "final ParsedQuery parsedQuery = suggestion.getShardContext().parse(querySource);"
  },
  {
    "devdecision": "Manual",
    "id": 76197,
    "v2": "TestShardRouting.newShardRouting(shardRouting.index(), shardRouting.id(), InternalClusterService.generateNodeId(Settings.EMPTY), randomBoolean(), randomFrom(ShardRoutingState.values()));",
    "resolution": "return TestShardRouting.newShardRouting(shardRouting.index(), shardRouting.id(), InternalClusterService.generateNodeId(Settings.EMPTY), randomInt(20), randomBoolean(), randomFrom(ShardRoutingState.values()));",
    "conflict": "TestShardRouting.newShardRouting(shardRouting.index(), shardRouting.id(), DiscoveryService.generateNodeId(Settings.EMPTY), randomInt(20), randomBoolean(), randomFrom(ShardRoutingState.values()));"
  },
  {
    "devdecision": "Manual",
    "id": 76200,
    "v2": "ParsedDocument pd = new ParsedDocument(new StringField(\"uid\", \"test:id\", Store.YES), new LegacyIntField(\"version\", 1, Store.YES), \"id\",",
    "resolution": "ParsedDocument pd = new ParsedDocument(new StringField(\"uid\", \"test:id\", Store.YES), new LegacyIntField(\"version\", 1, Store.YES), new LegacyIntField(\"seqNo\", 1, Store.YES) , \"id\",",
    "conflict": "ParsedDocument pd = new ParsedDocument(new StringField(\"uid\", \"test:id\", Store.YES), new IntField(\"version\", 1, Store.YES), new IntField(\"seqNo\", 1, Store.YES), \"id\","
  },
  {
    "devdecision": "Combination",
    "id": 76205,
    "v2": "private Mapper dynamicMappingsUpdate = null;",
    "resolution": "private List<Mapper> dynamicMappers = new ArrayList<>();",
    "conflict": "private float docBoost = 1.0f;  private List<Mapper> dynamicMappers = new ArrayList<>();"
  },
  {
    "devdecision": "Combination",
    "id": 76206,
    "v2": "this.dynamicMappingsUpdate = null;",
    "resolution": "this.dynamicMappers = new ArrayList<>();",
    "conflict": "this.docBoost = 1.0f; this.dynamicMappers = new ArrayList<>();"
  },
  {
    "devdecision": "Version 1",
    "id": 76208,
    "v2": "ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis()), false, oldNonMasterNodes.get(0));",
    "resolution": "ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis()), false, oldNonMasterNodes.get(0));",
    "conflict": "ensureStableCluster(3, new TimeValue(DISRUPTION_HEALING_OVERHEAD.millis() + masterNodeDisruption.expectedTimeToHeal().millis()), false, oldNonMasterNodes.get(0));"
  },
  {
    "devdecision": "Version 1",
    "id": 76216,
    "v2": "import org.elasticsearch.common.cli.UserError; import org.elasticsearch.common.cli.Terminal;",
    "resolution": "import org.elasticsearch.common.cli.Terminal; import org.elasticsearch.cli.UserError;",
    "conflict": "import org.elasticsearch.common.cli.Terminal; import org.elasticsearch.cli.UserError;"
  },
  {
    "devdecision": "Version 2",
    "id": 76218,
    "v2": "",
    "resolution": "",
    "conflict": "/** Print a message directly to the terminal. */ protected abstract void doPrint(String msg);"
  },
  {
    "devdecision": "Manual",
    "id": 76221,
    "v2": "MockTerminal terminal = new MockTerminal();",
    "resolution": "MockTerminal terminal = new MockTerminal();",
    "conflict": "/* CliToolTestCase.CaptureOutputTerminal terminal = new CliToolTestCase.CaptureOutputTerminal();"
  },
  {
    "devdecision": "Combination",
    "id": 76222,
    "v2": "import org.elasticsearch.common.cli.MockTerminal; import org.elasticsearch.common.cli.UserError;",
    "resolution": "import org.elasticsearch.cli.UserError; import org.elasticsearch.common.cli.MockTerminal;",
    "conflict": "import org.elasticsearch.cli.UserError;"
  },
  {
    "devdecision": "Version 2",
    "id": 76226,
    "v2": "",
    "resolution": "",
    "conflict": "import java.io.PrintWriter; import java.util.ArrayList; import java.util.List;"
  },
  {
    "devdecision": "Version 2",
    "id": 76227,
    "v2": "",
    "resolution": "",
    "conflict": "import static org.hamcrest.Matchers.containsString; import static org.hamcrest.Matchers.greaterThan; import static org.hamcrest.Matchers.hasSize;"
  },
  {
    "devdecision": "Manual",
    "id": 76230,
    "v2": "Setting.prefixKeySetting(\"logger.\", LogLevel.INFO.name(), LogLevel::parse, true, Setting.Scope.CLUSTER);",
    "resolution": "Setting.prefixKeySetting(\"logger.\", LogLevel.INFO.name(), LogLevel::parse, SettingsProperty.Dynamic, SettingsProperty.ClusterScope);",
    "conflict": "Setting.dynamicKeySetting(\"logger.\", LogLevel.INFO.name(), LogLevel::parse, SettingsProperty.Dynamic, SettingsProperty.ClusterScope);"
  },
  {
    "devdecision": "Manual",
    "id": 76236,
    "v2": "return new Setting<List<T>>(new ListKey(key), (s) -> arrayToParsableString(defaultStringValue.apply(s).toArray(Strings.EMPTY_ARRAY)), parser, dynamic, scope) {",
    "resolution": "return new Setting<List<T>>(new ListKey(key), (s) -> arrayToParsableString(defaultStringValue.apply(s).toArray(Strings.EMPTY_ARRAY)), parser, properties) { private final Pattern pattern = Pattern.compile(Pattern.quote(key)+\"(\\\\.\\\\d+)?\");",
    "conflict": "return new Setting<List<T>>(key, (s) -> arrayToParsableString(defaultStringValue.apply(s).toArray(Strings.EMPTY_ARRAY)), parser, properties) { private final Pattern pattern = Pattern.compile(Pattern.quote(key)+\"(\\\\.\\\\d+)?\");"
  },
  {
    "devdecision": "Manual",
    "id": 76240,
    "v2": "public void testPrefixKeySetting() { Setting<Boolean> setting = Setting.prefixKeySetting(\"foo.\", \"false\", Boolean::parseBoolean, false, Setting.Scope.CLUSTER);",
    "resolution": "public void testDynamicKeySetting() { Setting<Boolean> setting = Setting.prefixKeySetting(\"foo.\", \"false\", Boolean::parseBoolean, SettingsProperty.ClusterScope);",
    "conflict": "public void testDynamicKeySetting() { Setting<Boolean> setting = Setting.dynamicKeySetting(\"foo.\", \"false\", Boolean::parseBoolean, SettingsProperty.ClusterScope);"
  },
  {
    "devdecision": "Combination",
    "id": 76251,
    "v2": "public static SearchSourceBuilder getRestSearchSource(BytesReference sourceBytes, IndicesQueriesRegistry queryRegistry, ParseFieldMatcher parseFieldMatcher, AggregatorParsers aggParsers)",
    "resolution": "public static void parseRestSearchSource(SearchSourceBuilder source, BytesReference sourceBytes, IndicesQueriesRegistry queryRegistry, ParseFieldMatcher parseFieldMatcher, AggregatorParsers aggParsers)",
    "conflict": "public static void parseRestSearchSource(SearchSourceBuilder source, BytesReference sourceBytes, IndicesQueriesRegistry queryRegistry, ParseFieldMatcher parseFieldMatcher)"
  },
  {
    "devdecision": "Version 2",
    "id": 76260,
    "v2": "QueryShardContext mockShardContext = new QueryShardContext(idxSettings, null, null, null, null, null, indicesQueriesRegistry) {",
    "resolution": "QueryShardContext mockShardContext = new QueryShardContext(idxSettings, null, null, null, null, null, indicesQueriesRegistry) {",
    "conflict": "QueryShardContext mockShardContext = new QueryShardContext(idxSettings, null, null, null, null, null, null, indicesQueriesRegistry) {"
  },
  {
    "devdecision": "Combination",
    "id": 76262,
    "v2": "SearchSourceBuilder newBuilder = SearchSourceBuilder.parseSearchSource(parser, parseContext); assertNull(parser.nextToken());",
    "resolution": "SearchSourceBuilder newBuilder = SearchSourceBuilder.parseSearchSource(parser, parseContext, aggParsers); assertNull(parser.nextToken());",
    "conflict": "SearchSourceBuilder newBuilder = SearchSourceBuilder.parseSearchSource(parser, parseContext, aggParsers); assertNotSame(testBuilder, newBuilder);"
  },
  {
    "devdecision": "Manual",
    "id": 76267,
    "v2": "shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats()));",
    "resolution": "shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, SHARD_STATS_FLAGS), indexShard.commitStats(), indexShard.seqNoStats()));",
    "conflict": "shardsStats.add(new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, SHARD_STATS_FLAGS), indexShard.commitStats(), indexShard.seqNoStats()));"
  },
  {
    "devdecision": "Manual",
    "id": 76268,
    "v2": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats());",
    "resolution": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());",
    "conflict": "return new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats());"
  },
  {
    "devdecision": "Concatenation",
    "id": 76269,
    "v2": "routedBasedOnClusterVersion = in.readVLong();",
    "resolution": "seqNo = in.readVLong(); primaryTerm = in.readVLong();routedBasedOnClusterVersion = in.readVLong();",
    "conflict": "seqNo = in.readVLong(); primaryTerm = in.readVLong();"
  },
  {
    "devdecision": "Concatenation",
    "id": 76274,
    "v2": "setPhase(task, \"finished\");",
    "resolution": "setPhase(task, \"finished\");if (logger.isTraceEnabled()) { logger.trace(\"finished replicating action [{}], request [{}]\", actionName, replicaRequest); }",
    "conflict": "if (logger.isTraceEnabled()) { logger.trace(\"finished replicating action [{}], request [{}]\", actionName, replicaRequest); }"
  },
  {
    "devdecision": "Version 2",
    "id": 76277,
    "v2": "",
    "resolution": "",
    "conflict": "public static final IndexMetaData PROTO = IndexMetaData.builder(\"\") .settings(Settings.builder().put(IndexMetaData.SETTING_VERSION_CREATED, Version.CURRENT)) .numberOfShards(1).numberOfReplicas(0).build();"
  },
  {
    "devdecision": "Combination",
    "id": 76283,
    "v2": "IndexShardRoutingTable.Builder indexShardRoutingBuilder = new IndexShardRoutingTable.Builder(new ShardId(index, shardId));",
    "resolution": "final long primaryTerm = indexMetaData.primaryTerm(shardId); IndexShardRoutingTable.Builder indexShardRoutingBuilder = new IndexShardRoutingTable.Builder(new ShardId(index, shardId));",
    "conflict": "final long primaryTerm = indexMetaData.primaryTerm(shardId); IndexShardRoutingTable.Builder indexShardRoutingBuilder = new IndexShardRoutingTable.Builder(new ShardId(indexMetaData.getIndex(), shardId));"
  },
  {
    "devdecision": "Manual",
    "id": 76289,
    "v2": "ShardRouting(Index index, int shardId, String currentNodeId, String relocatingNodeId, RestoreSource restoreSource, boolean primary, ShardRoutingState state,",
    "resolution": "ShardRouting(Index index, int shardId, String currentNodeId, String relocatingNodeId, RestoreSource restoreSource, long primaryTerm, boolean primary, ShardRoutingState state,",
    "conflict": "ShardRouting(String index, int shardId, String currentNodeId, String relocatingNodeId, RestoreSource restoreSource, long primaryTerm, boolean primary, ShardRoutingState state, long version,"
  },
  {
    "devdecision": "Manual",
    "id": 76290,
    "v2": "public static ShardRouting newUnassigned(Index index, int shardId, RestoreSource restoreSource, boolean primary, UnassignedInfo unassignedInfo) { return new ShardRouting(index, shardId, null, null, restoreSource, primary, ShardRoutingState.UNASSIGNED, unassignedInfo, null, true, UNAVAILABLE_EXPECTED_SHARD_SIZE);",
    "resolution": "public static ShardRouting newUnassigned(Index index, int shardId, RestoreSource restoreSource, long primaryTerm, boolean primary, UnassignedInfo unassignedInfo) { return new ShardRouting(index, shardId, null, null, restoreSource, primaryTerm, primary, ShardRoutingState.UNASSIGNED, unassignedInfo, null, true, UNAVAILABLE_EXPECTED_SHARD_SIZE);",
    "conflict": "public static ShardRouting newUnassigned(String index, int shardId, RestoreSource restoreSource, long primaryTerm, boolean primary, UnassignedInfo unassignedInfo) { return new ShardRouting(index, shardId, null, null, restoreSource, primaryTerm, primary, ShardRoutingState.UNASSIGNED, 0, unassignedInfo, null, true, UNAVAILABLE_EXPECTED_SHARD_SIZE);"
  },
  {
    "devdecision": "Combination",
    "id": 76292,
    "v2": "* Initializes an unassigned shard on a node. * * @param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.",
    "resolution": "* Initializes an unassigned shard on a node. If the shard is primary, it's term is incremented. * * @param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.",
    "conflict": "* Initializes an unassigned shard on a node. If the shard is primary, it's term is incremented."
  },
  {
    "devdecision": "Combination",
    "id": 76297,
    "v2": "mergeScheduler = scheduler = new EngineMergeScheduler(engineConfig.getShardId(), engineConfig.getIndexSettings());",
    "resolution": "seqNoService = new SequenceNumbersService(shardId, engineConfig.getIndexSettings()); mergeScheduler = scheduler = new EngineMergeScheduler(engineConfig.getShardId(), engineConfig.getIndexSettings());",
    "conflict": "seqNoService = new SequenceNumbersService(shardId, engineConfig.getIndexSettings()); mergeScheduler = scheduler = new EngineMergeScheduler(engineConfig.getShardId(), engineConfig.getIndexSettings(), engineConfig.getMergeSchedulerConfig());"
  },
  {
    "devdecision": "Version 2",
    "id": 76302,
    "v2": "",
    "resolution": "",
    "conflict": "if (decOpCounter) { indexShardOperationCounter.decRef(); }"
  },
  {
    "devdecision": "Manual",
    "id": 76306,
    "v2": "IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesQueryCache, indexShard, flags), indexShard.commitStats()) });",
    "resolution": "IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[] { new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indicesQueryCache, indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats()) });",
    "conflict": "IndexShardStats indexShardStats = new IndexShardStats(indexShard.shardId(), new ShardStats[]{new ShardStats(indexShard.routingEntry(), indexShard.shardPath(), new CommonStats(indexShard, flags), indexShard.commitStats(), indexShard.seqNoStats())});"
  },
  {
    "devdecision": "Version 2",
    "id": 76309,
    "v2": "// to move be closed by the time we get to the relocated method",
    "resolution": "// to move be closed by the time we get to the relocated method",
    "conflict": "// to move be closed by the time we get to the the relocated method } catch (InterruptedException e) { throw new ElasticsearchException(\"interrupted while waiting for pending operation to finish on relocated primary\", e);"
  },
  {
    "devdecision": "Manual",
    "id": 76313,
    "v2": "indexShardRoutingBuilder.addShard(TestShardRouting.newShardRouting(index, 0, primaryNode, relocatingNode, null, true, primaryState, unassignedInfo));",
    "resolution": "indexShardRoutingBuilder.addShard(TestShardRouting.newShardRouting(index, 0, primaryNode, relocatingNode, null, primaryTerm, true, primaryState, unassignedInfo));",
    "conflict": "indexShardRoutingBuilder.addShard(TestShardRouting.newShardRouting(index, 0, primaryNode, relocatingNode, null, primaryTerm, true, primaryState, 0, unassignedInfo));"
  },
  {
    "devdecision": "Manual",
    "id": 76314,
    "v2": "TestShardRouting.newShardRouting(index, shardId.id(), replicaNode, relocatingNode, null, false, replicaState, unassignedInfo));",
    "resolution": "TestShardRouting.newShardRouting(index, shardId.id(), replicaNode, relocatingNode, null, primaryTerm, false, replicaState, unassignedInfo));",
    "conflict": "TestShardRouting.newShardRouting(index, shardId.id(), replicaNode, relocatingNode, null, primaryTerm, false, replicaState, 0, unassignedInfo));"
  },
  {
    "devdecision": "Combination",
    "id": 76315,
    "v2": "IndexRoutingTable.Builder indexRoutingTableBuilder = IndexRoutingTable.builder(indexMetaData.getIndex());",
    "resolution": "IndexRoutingTable.Builder indexRoutingTableBuilder = IndexRoutingTable.builder(indexMetaData.getIndex()); final int primaryTerm = randomInt(200);",
    "conflict": "IndexRoutingTable.Builder indexRoutingTableBuilder = IndexRoutingTable.builder(index); final int primaryTerm = randomInt(200);"
  },
  {
    "devdecision": "Combination",
    "id": 76321,
    "v2": "TestShardRouting.newShardRouting(index, i, randomFrom(nodeIds), null, null, j == 0, ShardRoutingState.fromValue((byte) randomIntBetween(2, 4)), unassignedInfo));",
    "resolution": "TestShardRouting.newShardRouting(index, i, randomFrom(nodeIds), null, null, term, j == 0, ShardRoutingState.fromValue((byte) randomIntBetween(2, 4)), unassignedInfo));",
    "conflict": "TestShardRouting.newShardRouting(index, i, randomFrom(nodeIds), null, null, term, j == 0, ShardRoutingState.fromValue((byte) randomIntBetween(2, 4)), 1, unassignedInfo));"
  },
  {
    "devdecision": "Manual",
    "id": 76322,
    "v2": "final Index index = new Index(\"test\", \"_na_\"); ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "final Index index = new Index(\"test\", \"_na_\"); ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_0 = ShardRouting.newUnassigned(\"test\", 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76325,
    "v2": "assertThat(indexMetaData.getCreationDate(), equalTo(-1L));",
    "resolution": "assertThat(indexMetaData.primaryTerm(0), equalTo(2L)); assertThat(indexMetaData.primaryTerm(1), equalTo(2L)); assertThat(indexMetaData.getCreationDate(), equalTo(-1L));",
    "conflict": "assertThat(indexMetaData.primaryTerm(0), equalTo(2l)); assertThat(indexMetaData.primaryTerm(1), equalTo(2l)); assertThat(indexMetaData.getCreationDate(), equalTo(-1l));"
  },
  {
    "devdecision": "Manual",
    "id": 76327,
    "v2": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "resolution": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "conflict": "ShardRouting shard = ShardRouting.newUnassigned(\"test\", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", -1);"
  },
  {
    "devdecision": "Manual",
    "id": 76328,
    "v2": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "resolution": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "conflict": "ShardRouting shard = ShardRouting.newUnassigned(\"test\", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", -1);"
  },
  {
    "devdecision": "Manual",
    "id": 76329,
    "v2": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "resolution": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "conflict": "ShardRouting shard = ShardRouting.newUnassigned(\"test\", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", -1);"
  },
  {
    "devdecision": "Manual",
    "id": 76330,
    "v2": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "resolution": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", null, -1);",
    "conflict": "ShardRouting shard = ShardRouting.newUnassigned(\"test\", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null)); shard.initialize(\"node1\", -1);"
  },
  {
    "devdecision": "Manual",
    "id": 76332,
    "v2": "ShardRouting routing = TestShardRouting.newShardRouting(\"foo\", 1, \"node_1\", null, null, false, ShardRoutingState.INITIALIZING);",
    "resolution": "ShardRouting routing = TestShardRouting.newShardRouting(\"foo\", 1, \"node_1\", null, null, term, false, ShardRoutingState.INITIALIZING);",
    "conflict": "long term = randomInt(200); ShardRouting routing = TestShardRouting.newShardRouting(\"foo\", 1, \"node_1\", null, null, term, false, ShardRoutingState.INITIALIZING, 1);"
  },
  {
    "devdecision": "Manual",
    "id": 76335,
    "v2": "otherRouting = new ShardRouting(routing);",
    "resolution": "otherRouting = new ShardRouting(routing,randomBoolean() ? routing.primaryTerm() : routing.primaryTerm() + 1); assertTrue(\"expected equality\\nthis  \" + routing + \",\\nother \" + otherRouting, routing.equalsIgnoringMetaData(otherRouting));",
    "conflict": "otherRouting = new ShardRouting(routing, randomBoolean() ? routing.version() : routing.version() + 1, randomBoolean() ? routing.primaryTerm() : routing.primaryTerm() + 1);"
  },
  {
    "devdecision": "Manual",
    "id": 76337,
    "v2": "otherRouting.restoreSource(), otherRouting.primary(), otherRouting.state(), otherRouting.unassignedInfo());",
    "resolution": "otherRouting.restoreSource(), otherRouting.primaryTerm(), otherRouting.primary(), otherRouting.state(), otherRouting.unassignedInfo());",
    "conflict": "otherRouting.restoreSource(), otherRouting.primaryTerm(), otherRouting.primary(), otherRouting.state(), otherRouting.version(), otherRouting.unassignedInfo());"
  },
  {
    "devdecision": "Manual",
    "id": 76343,
    "v2": ".addShard(TestShardRouting.newShardRouting(shard1.getIndexName(), shard1.getId(), newNode.id(), true, ShardRoutingState.STARTED)) .addShard(TestShardRouting.newShardRouting(shard1.getIndexName(), shard1.getId(), oldNode1.id(), false, ShardRoutingState.STARTED))",
    "resolution": ".addShard(TestShardRouting.newShardRouting(shard1.getIndexName(), shard1.getId(), newNode.id(), 1, true, ShardRoutingState.STARTED)) .addShard(TestShardRouting.newShardRouting(shard1.getIndexName(), shard1.getId(), oldNode1.id(), 1, false, ShardRoutingState.STARTED))",
    "conflict": ".addShard(TestShardRouting.newShardRouting(shard1.getIndex(), shard1.getId(), newNode.id(), 1, true, ShardRoutingState.STARTED, 10)) .addShard(TestShardRouting.newShardRouting(shard1.getIndex(), shard1.getId(), oldNode1.id(), 1, false, ShardRoutingState.STARTED, 10))"
  },
  {
    "devdecision": "Manual",
    "id": 76344,
    "v2": ".addShard(TestShardRouting.newShardRouting(shard2.getIndexName(), shard2.getId(), newNode.id(), true, ShardRoutingState.STARTED)) .addShard(TestShardRouting.newShardRouting(shard2.getIndexName(), shard2.getId(), oldNode1.id(), false, ShardRoutingState.STARTED))",
    "resolution": ".addShard(TestShardRouting.newShardRouting(shard2.getIndexName(), shard2.getId(), newNode.id(), 1, true, ShardRoutingState.STARTED)) .addShard(TestShardRouting.newShardRouting(shard2.getIndexName(), shard2.getId(), oldNode1.id(), 1, false, ShardRoutingState.STARTED))",
    "conflict": ".addShard(TestShardRouting.newShardRouting(shard2.getIndex(), shard2.getId(), newNode.id(), 1, true, ShardRoutingState.STARTED, 10)) .addShard(TestShardRouting.newShardRouting(shard2.getIndex(), shard2.getId(), oldNode1.id(), 1, false, ShardRoutingState.STARTED, 10))"
  },
  {
    "devdecision": "Manual",
    "id": 76352,
    "v2": "ShardRouting firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node1\", null, null, true, ShardRoutingState.STARTED); ShardRouting secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node1\", null, null, true, ShardRoutingState.STARTED);",
    "resolution": "ShardRouting firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node1\", null, null, 1, true, ShardRoutingState.STARTED); ShardRouting secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node1\", null, null, 1, true, ShardRoutingState.STARTED);",
    "conflict": "ShardRouting firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node1\", null, null, 1, true, ShardRoutingState.STARTED, 1); ShardRouting secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node1\", null, null, 1, true, ShardRoutingState.STARTED, 1);"
  },
  {
    "devdecision": "Manual",
    "id": 76353,
    "v2": "firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node1\", null, null, true, ShardRoutingState.STARTED); secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node1\", \"node2\", null, true, ShardRoutingState.RELOCATING);",
    "resolution": "firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node1\", null, null, 1, true, ShardRoutingState.STARTED); secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node1\", \"node2\", null, 1, true, ShardRoutingState.RELOCATING);",
    "conflict": "firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node1\", null, null, 1, true, ShardRoutingState.STARTED, 1); secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node1\", \"node2\", null, 1, true, ShardRoutingState.RELOCATING, 1);"
  },
  {
    "devdecision": "Manual",
    "id": 76354,
    "v2": "ShardRouting firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node2\", null, null, true, ShardRoutingState.STARTED); ShardRouting secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node2\", null, null, true, ShardRoutingState.STARTED);",
    "resolution": "ShardRouting firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node2\", null, null, 1, true, ShardRoutingState.STARTED); ShardRouting secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node2\", null, null, 1, true, ShardRoutingState.STARTED);",
    "conflict": "ShardRouting firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node2\", null, null, 1, true, ShardRoutingState.STARTED, 1); ShardRouting secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node2\", null, null, 1, true, ShardRoutingState.STARTED, 1);"
  },
  {
    "devdecision": "Manual",
    "id": 76355,
    "v2": "firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node2\", null, null, true, ShardRoutingState.STARTED); secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node2\", \"node3\", null, true, ShardRoutingState.RELOCATING);",
    "resolution": "firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node2\", null, null, 1, true, ShardRoutingState.STARTED); secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node2\", \"node3\", null, 1, true, ShardRoutingState.RELOCATING);",
    "conflict": "firstRouting = TestShardRouting.newShardRouting(\"test\", 0, \"node2\", null, null, 1, true, ShardRoutingState.STARTED, 1); secondRouting = TestShardRouting.newShardRouting(\"test\", 1, \"node2\", \"node3\", null, 1, true, ShardRoutingState.RELOCATING, 1);"
  },
  {
    "devdecision": "Version 2",
    "id": 76356,
    "v2": "",
    "resolution": "",
    "conflict": "ShardRouting test_0 = ShardRouting.newUnassigned(\"test\", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\")); DiscoveryNode node_0 = new DiscoveryNode(\"node_0\", DummyTransportAddress.INSTANCE, Version.CURRENT); DiscoveryNode node_1 = new DiscoveryNode(\"node_1\", DummyTransportAddress.INSTANCE, Version.CURRENT);"
  },
  {
    "devdecision": "Manual",
    "id": 76361,
    "v2": "final Index index = new Index(\"test\", \"_na_\"); ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "final Index index = new Index(\"test\", \"_na_\"); ShardRouting test_0 = ShardRouting.newUnassigned(index, 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_0 = ShardRouting.newUnassigned(\"test\", 0, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Concatenation",
    "id": 76370,
    "v2": "import java.util.Collection;",
    "resolution": "import java.util.HashMap; import java.util.Map; import java.util.stream.IntStream;import java.util.Collection;",
    "conflict": "import java.util.HashMap; import java.util.Map; import java.util.stream.IntStream;"
  },
  {
    "devdecision": "Version 2",
    "id": 76373,
    "v2": "}, new TranslogHandler(shardId.getIndexName(), logger), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5));",
    "resolution": "}, new TranslogHandler(shardId.getIndexName(), logger), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5));",
    "conflict": "}, new TranslogHandler(shardId.index().getName(), logger), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5));"
  },
  {
    "devdecision": "Manual",
    "id": 76395,
    "v2": "routing = TestShardRouting.newShardRouting(shard.shardId.getIndex(), shard.shardId.id(), routing.currentNodeId(), null, routing.primary(), ShardRoutingState.INITIALIZING, shard.shardRouting.allocationId());",
    "resolution": "routing = TestShardRouting.newShardRouting(shard.shardId.getIndex(), shard.shardId.id(), routing.currentNodeId(), null, shard.shardRouting.primaryTerm(), routing.primary(), ShardRoutingState.INITIALIZING, shard.shardRouting.allocationId());",
    "conflict": "routing = TestShardRouting.newShardRouting(shard.shardId.index().getName(), shard.shardId.id(), routing.currentNodeId(), null, shard.shardRouting.primaryTerm(), routing.primary(), ShardRoutingState.INITIALIZING, shard.shardRouting.allocationId(), shard.shardRouting.version() + 1);"
  },
  {
    "devdecision": "Manual",
    "id": 76398,
    "v2": "ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), shard, new CommonStatsFlags()), shard.commitStats());",
    "resolution": "ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), shard, new CommonStatsFlags()), shard.commitStats(), shard.seqNoStats());",
    "conflict": "ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(shard, new CommonStatsFlags()), shard.commitStats(), shard.seqNoStats());"
  },
  {
    "devdecision": "Version 1",
    "id": 76401,
    "v2": "1 + randomInt(100000), randomFrom(VersionType.values()));",
    "resolution": "opCount, 1 + randomInt(100000), randomFrom(VersionType.values()));",
    "conflict": "opCount, 1 + randomInt(100000), randomFrom(VersionType.values()));"
  },
  {
    "devdecision": "Manual",
    "id": 76403,
    "v2": "try (Releasable operationLock = shard.acquirePrimaryOperationLock()) {",
    "resolution": "try (Releasable ignored = shard.acquirePrimaryOperationLock()) {",
    "conflict": "shard.incrementOperationCounterOnPrimary(); try {"
  },
  {
    "devdecision": "Manual",
    "id": 76404,
    "v2": "new IndexShardRoutingTable.Builder(new ShardId(index, i)) .addShard(TestShardRouting.newShardRouting(\"test\", i, masterId, true, ShardRoutingState.STARTED))",
    "resolution": "new IndexShardRoutingTable.Builder(new ShardId(index, i)) .addShard(TestShardRouting.newShardRouting(\"test\", i, masterId, 1, true, ShardRoutingState.STARTED))",
    "conflict": "new IndexShardRoutingTable.Builder(new ShardId(\"test\", i)) .addShard(TestShardRouting.newShardRouting(\"test\", i, masterId, 1, true, ShardRoutingState.STARTED, shardVersions[shardIds[i]]))"
  },
  {
    "devdecision": "Combination",
    "id": 76405,
    "v2": "IndexShardRoutingTable.Builder routingTable = new IndexShardRoutingTable.Builder(new ShardId(\"test\", \"_na_\", 1));",
    "resolution": "final int primaryTerm = randomInt(200); IndexShardRoutingTable.Builder routingTable = new IndexShardRoutingTable.Builder(new ShardId(\"test\", \"_na_\", 1));",
    "conflict": "IndexShardRoutingTable.Builder routingTable = new IndexShardRoutingTable.Builder(new ShardId(\"test\", 1)); final int primaryTerm = randomInt(200);"
  },
  {
    "devdecision": "Combination",
    "id": 76415,
    "v2": "import org.apache.lucene.spatial.util.GeoHashUtils;",
    "resolution": "import org.apache.lucene.spatial.util.GeoHashUtils; import org.elasticsearch.common.ParseField; import org.elasticsearch.common.ParseFieldMatcher;",
    "conflict": "import org.apache.lucene.util.GeoHashUtils; import org.elasticsearch.common.ParseField; import org.elasticsearch.common.ParseFieldMatcher;"
  },
  {
    "devdecision": "Version 2",
    "id": 76434,
    "v2": "ScriptService scriptService = shardContext.getScriptService(); PhraseSuggestionContext suggestion = new PhraseSuggestionContext(shardContext);",
    "resolution": "ScriptService scriptService = shardContext.getScriptService(); PhraseSuggestionContext suggestion = new PhraseSuggestionContext(shardContext);",
    "conflict": "PhraseSuggestionContext suggestion = new PhraseSuggestionContext(suggester);"
  },
  {
    "devdecision": "Version 2",
    "id": 76443,
    "v2": "import java.util.Iterator; import java.util.Map; import java.util.Map.Entry;",
    "resolution": "import java.util.Iterator; import java.util.Map; import java.util.Map.Entry;",
    "conflict": "import java.util.Map;"
  },
  {
    "devdecision": "Version 2",
    "id": 76449,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.Laplace; import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.LinearInterpolation; import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.SmoothingModel; import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.StupidBackoff;"
  },
  {
    "devdecision": "Version 2",
    "id": 76470,
    "v2": "import java.util.HashMap; import java.util.List; import java.util.Map;",
    "resolution": "import java.util.HashMap; import java.util.List; import java.util.Map;",
    "conflict": "import com.carrotsearch.hppc.ObjectObjectAssociativeContainer;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76472,
    "v2": "import org.elasticsearch.tasks.Task;",
    "resolution": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;import org.elasticsearch.tasks.Task;",
    "conflict": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76473,
    "v2": "import org.elasticsearch.tasks.Task;",
    "resolution": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;import org.elasticsearch.tasks.Task;",
    "conflict": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76474,
    "v2": "import org.elasticsearch.tasks.Task;",
    "resolution": "import org.elasticsearch.tasks.Task;import org.elasticsearch.search.suggest.SuggestionBuilder; import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.SmoothingModel;",
    "conflict": "import org.elasticsearch.search.suggest.SuggestionBuilder; import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.SmoothingModel;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76476,
    "v2": "import org.elasticsearch.tasks.Task;",
    "resolution": "import org.elasticsearch.tasks.Task;import org.elasticsearch.search.suggest.SuggestionBuilder; import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.SmoothingModel;",
    "conflict": "import org.elasticsearch.search.suggest.SuggestionBuilder; import org.elasticsearch.search.suggest.phrase.PhraseSuggestionBuilder.SmoothingModel;"
  },
  {
    "devdecision": "Manual",
    "id": 76481,
    "v2": "builder.fetchSourceContext = FetchSourceContext.parse(parser, context); } else if (context.parseFieldMatcher().match(currentFieldName, SEARCH_AFTER)) { builder.searchAfterBuilder = SearchAfterBuilder.PROTOTYPE.fromXContent(parser, context.parseFieldMatcher());",
    "resolution": "fetchSourceContext = FetchSourceContext.parse(parser, context); } else if (context.parseFieldMatcher().match(currentFieldName, SEARCH_AFTER)) { searchAfterBuilder = SearchAfterBuilder.PROTOTYPE.fromXContent(parser, context.parseFieldMatcher());",
    "conflict": "fetchSourceContext = FetchSourceContext.parse(parser, context);"
  },
  {
    "devdecision": "Combination",
    "id": 76482,
    "v2": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(filter(\"filter\").filter(matchAllQuery())))",
    "resolution": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(filter(\"filter\", matchAllQuery())))",
    "conflict": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1l).minDocCount(0) .subAggregation(filter(\"filter\", matchAllQuery())))"
  },
  {
    "devdecision": "Combination",
    "id": 76483,
    "v2": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(filters(\"filters\").filter(\"all\", matchAllQuery())))",
    "resolution": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(filters(\"filters\", new KeyedFilter(\"all\", matchAllQuery()))))",
    "conflict": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1l).minDocCount(0) .subAggregation(filters(\"filters\", new KeyedFilter(\"all\", matchAllQuery()))))"
  },
  {
    "devdecision": "Combination",
    "id": 76484,
    "v2": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(geoDistance(\"geo_dist\").field(\"location\").point(\"52.3760, 4.894\").addRange(\"0-100\", 0.0, 100.0)))",
    "resolution": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(geoDistance(\"geo_dist\", new GeoPoint(52.3760, 4.894)).field(\"location\").addRange(\"0-100\", 0.0, 100.0)))",
    "conflict": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1l).minDocCount(0) .subAggregation(geoDistance(\"geo_dist\", new GeoPoint(52.3760, 4.894)).field(\"location\").addRange(\"0-100\", 0.0, 100.0)))"
  },
  {
    "devdecision": "Combination",
    "id": 76485,
    "v2": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(nested(\"nested\").path(\"nested\")))",
    "resolution": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1L).minDocCount(0) .subAggregation(nested(\"nested\", \"nested\")))",
    "conflict": ".addAggregation(histogram(\"histo\").field(\"value\").interval(1l).minDocCount(0) .subAggregation(nested(\"nested\", \"nested\")))"
  },
  {
    "devdecision": "Manual",
    "id": 76487,
    "v2": ".extendedBounds(0L, (long) numBuckets_empty_rnd - 1) .subAggregation(derivative(\"deriv\").setBucketsPaths(\"_count\").gapPolicy(randomFrom(GapPolicy.values()))))",
    "resolution": ".extendedBounds(new ExtendedBounds(0L, (long) numBuckets_empty_rnd - 1)) .subAggregation(derivative(\"deriv\", \"_count\").gapPolicy(randomFrom(GapPolicy.values()))))",
    "conflict": ".extendedBounds(new ExtendedBounds(0l, (long) numBuckets_empty_rnd - 1)) .subAggregation(derivative(\"deriv\", \"_count\").gapPolicy(randomFrom(GapPolicy.values()))))"
  },
  {
    "devdecision": "Manual",
    "id": 76489,
    "v2": ".subAggregation(histogram(\"inner_histo\").field(FIELD_1_NAME).interval(1).extendedBounds(1L, 4L).minDocCount(0) .subAggregation(derivative(\"derivative\").setBucketsPaths(\"_count\").gapPolicy(GapPolicy.INSERT_ZEROS))))",
    "resolution": ".subAggregation(histogram(\"inner_histo\").field(FIELD_1_NAME).interval(1).extendedBounds(new ExtendedBounds(1L, 4L)) .minDocCount(0).subAggregation(derivative(\"derivative\", \"_count\").gapPolicy(GapPolicy.INSERT_ZEROS))))",
    "conflict": ".subAggregation(histogram(\"inner_histo\").field(FIELD_1_NAME).interval(1).extendedBounds(new ExtendedBounds(1l, 4l)) .minDocCount(0).subAggregation(derivative(\"derivative\", \"_count\").gapPolicy(GapPolicy.INSERT_ZEROS))))"
  },
  {
    "devdecision": "Combination",
    "id": 76490,
    "v2": "histogram(\"histo\").field(\"value\").interval(2L) .subAggregation(randomCompression(percentileRanks(\"percentile_ranks\").percentiles(99)))",
    "resolution": "histogram(\"histo\").field(\"value\").interval(2L) .subAggregation(randomCompression(percentileRanks(\"percentile_ranks\").values(99)))",
    "conflict": "histogram(\"histo\").field(\"value\").interval(2l) .subAggregation(randomCompression(percentileRanks(\"percentile_ranks\").values(99)))"
  },
  {
    "devdecision": "Combination",
    "id": 76492,
    "v2": "import org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder; import org.elasticsearch.search.suggest.phrase.DirectCandidateGeneratorBuilder;",
    "resolution": "import org.elasticsearch.search.suggest.SuggestionBuilder; import org.elasticsearch.search.suggest.phrase.DirectCandidateGeneratorBuilder;",
    "conflict": "import org.elasticsearch.search.suggest.SuggestionBuilder;"
  },
  {
    "devdecision": "Combination",
    "id": 76493,
    "v2": "import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;",
    "resolution": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;",
    "conflict": "import org.elasticsearch.search.searchafter.SearchAfterBuilder; import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76498,
    "v2": "import org.elasticsearch.index.Index;",
    "resolution": "import org.elasticsearch.index.query.QueryParseContext; import org.elasticsearch.index.query.QueryParser; import org.elasticsearch.indices.query.IndicesQueriesRegistry;import org.elasticsearch.index.Index;",
    "conflict": "import org.elasticsearch.index.query.QueryParseContext; import org.elasticsearch.index.query.QueryParser; import org.elasticsearch.indices.query.IndicesQueriesRegistry;"
  },
  {
    "devdecision": "Combination",
    "id": 76500,
    "v2": "import org.elasticsearch.search.suggest.SuggestBuilder.SuggestionBuilder; import org.elasticsearch.search.suggest.phrase.WordScorer.WordScorerFactory;",
    "resolution": "import org.elasticsearch.search.suggest.SuggestionBuilder;  import org.elasticsearch.search.suggest.phrase.WordScorer.WordScorerFactory;",
    "conflict": "import org.elasticsearch.search.suggest.SuggestionBuilder;"
  },
  {
    "devdecision": "Combination",
    "id": 76504,
    "v2": "",
    "resolution": "public static final Setting<Boolean> MULTI_ALLOW_EXPLICIT_INDEX = Setting.boolSetting(\"rest.action.multi.allow_explicit_index\", true, false, Setting.Scope.CLUSTER); private final Client client;",
    "conflict": "public static final Setting<Boolean> MULTI_ALLOW_EXPLICIT_INDEX = Setting.boolSetting(\"rest.action.multi.allow_explicit_index\", true, false, Setting.Scope.CLUSTER); private final RestController controller;"
  },
  {
    "devdecision": "Version 1",
    "id": 76506,
    "v2": "private void assertCompileAccepted(String lang, String script, ScriptType scriptType, ScriptContext scriptContext, HasContextAndHeaders contextAndHeaders) { assertThat(scriptService.compile(new Script(script, scriptType, lang, null), scriptContext, contextAndHeaders, Collections.emptyMap()), notNullValue());",
    "resolution": "private void assertCompileAccepted(String lang, String script, ScriptType scriptType, ScriptContext scriptContext) { assertThat(scriptService.compile(new Script(script, scriptType, lang, null), scriptContext, Collections.emptyMap()), notNullValue());",
    "conflict": "private void assertCompileAccepted(String lang, String script, ScriptType scriptType, ScriptContext scriptContext) { assertThat(scriptService.compile(new Script(script, scriptType, lang, null), scriptContext, Collections.emptyMap()), notNullValue());"
  },
  {
    "devdecision": "Combination",
    "id": 76507,
    "v2": "import org.elasticsearch.search.searchafter.SearchAfterBuilder; import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;",
    "resolution": "import org.elasticsearch.search.searchafter.SearchAfterBuilder; import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;",
    "conflict": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 76509,
    "v2": "import org.elasticsearch.search.searchafter.SearchAfterBuilder; import org.elasticsearch.search.aggregations.AbstractAggregationBuilder;",
    "resolution": "import org.elasticsearch.search.searchafter.SearchAfterBuilder; import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;",
    "conflict": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 76510,
    "v2": "transport.httpServerAdapter(new Dispatcher(this));",
    "resolution": "transport.httpServerAdapter(this);",
    "conflict": "this.disableSites = this.settings.getAsBoolean(\"http.disable_sites\", false); transport.httpServerAdapter(this);"
  },
  {
    "devdecision": "Concatenation",
    "id": 76513,
    "v2": ".put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString())",
    "resolution": ".put(Environment.PATH_HOME_SETTING.getKey(), createTempDir().toString()).put(\"path.home\", createTempDir().toString()) .put(\"name\", \"test-\" + getTestName())",
    "conflict": ".put(\"path.home\", createTempDir().toString()) .put(\"name\", \"test-\" + getTestName())"
  },
  {
    "devdecision": "Combination",
    "id": 76518,
    "v2": "import org.elasticsearch.search.rescore.RescoreBuilder;",
    "resolution": "import org.elasticsearch.search.rescore.RescoreBuilder; import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;",
    "conflict": "import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer; import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Combination",
    "id": 76519,
    "v2": "import org.elasticsearch.search.rescore.RescoreBuilder;",
    "resolution": "import org.elasticsearch.search.rescore.RescoreBuilder; import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;",
    "conflict": "import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer; import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76520,
    "v2": "import org.elasticsearch.search.rescore.QueryRescorerBuilder; import org.elasticsearch.search.rescore.RescoreBuilder;",
    "resolution": "import org.elasticsearch.search.sort.SortParseElement;import org.elasticsearch.search.rescore.QueryRescorerBuilder; import org.elasticsearch.search.rescore.RescoreBuilder;",
    "conflict": "import org.elasticsearch.search.sort.SortParseElement;"
  },
  {
    "devdecision": "Version 2",
    "id": 76522,
    "v2": "import org.elasticsearch.repositories.fs.FsRepository; import org.elasticsearch.repositories.uri.URLRepository; import org.elasticsearch.script.ScriptService;",
    "resolution": "import org.elasticsearch.repositories.fs.FsRepository; import org.elasticsearch.repositories.uri.URLRepository; import org.elasticsearch.script.ScriptService;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76532,
    "v2": ".put(Environment.PATH_CONF_SETTING.getKey(), getDataPath(\"/indices/analyze/no_aff_conf_dir\")) .put(HUNSPELL_LAZY_LOAD, randomBoolean())",
    "resolution": ".put(Environment.PATH_CONF_SETTING.getKey(), getDataPath(\"/indices/analyze/no_aff_conf_dir\")) .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())",
    "conflict": ".put(\"path.conf\", getDataPath(\"/indices/analyze/no_aff_conf_dir\")) .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())"
  },
  {
    "devdecision": "Combination",
    "id": 76533,
    "v2": ".put(Environment.PATH_CONF_SETTING.getKey(), getDataPath(\"/indices/analyze/two_aff_conf_dir\")) .put(HUNSPELL_LAZY_LOAD, randomBoolean())",
    "resolution": ".put(Environment.PATH_CONF_SETTING.getKey(), getDataPath(\"/indices/analyze/two_aff_conf_dir\")) .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())",
    "conflict": ".put(\"path.conf\", getDataPath(\"/indices/analyze/two_aff_conf_dir\")) .put(HUNSPELL_LAZY_LOAD.getKey(), randomBoolean())"
  },
  {
    "devdecision": "Manual",
    "id": 76535,
    "v2": "modules.add(new ActionModule(true)); modules.add(new CircuitBreakerModule(settings));",
    "resolution": "modules.add(new ActionModule(settings, true)); modules.add(new CircuitBreakerModule(settings));",
    "conflict": "modules.add(new ActionModule(this.settings, true)); modules.add(new CircuitBreakerModule(this.settings));"
  },
  {
    "devdecision": "Manual",
    "id": 76536,
    "v2": "modules.add(new SearchModule(settings, namedWriteableRegistry)); modules.add(new ActionModule(false));",
    "resolution": "modules.add(new SearchModule(settings, namedWriteableRegistry)); modules.add(new ActionModule(settings, false));",
    "conflict": "modules.add(new SearchModule()); modules.add(new ActionModule(this.settings, false));"
  },
  {
    "devdecision": "Version 1",
    "id": 76538,
    "v2": "public Request(ActionRequest<?> request, String[] nodesIds) { super(request, nodesIds);",
    "resolution": "public Request(String[] nodesIds) { super(nodesIds);",
    "conflict": "public Request(String[] nodesIds) { super(nodesIds);"
  },
  {
    "devdecision": "Manual",
    "id": 76539,
    "v2": "protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) { return new BasicReplicationRequest(request, shardId);",
    "resolution": "protected BasicReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) { return new BasicReplicationRequest(shardId);",
    "conflict": "protected ReplicationRequest newShardRequest(RefreshRequest request, ShardId shardId) { return new ReplicationRequest(shardId);"
  },
  {
    "devdecision": "Version 1",
    "id": 76542,
    "v2": "protected AcknowledgedRequest(ActionRequest<?> request) { super(request); }",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 76546,
    "v2": "public ReplicationRequest(ActionRequest<?> request, ShardId shardId) { super(request);",
    "resolution": "public ReplicationRequest(ShardId shardId) {",
    "conflict": "public ReplicationRequest(ShardId shardId) {"
  },
  {
    "devdecision": "Combination",
    "id": 76550,
    "v2": "public final <Request extends ActionRequest<Request>, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void execute( Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) { headers.applyTo(request);",
    "resolution": "public final <Request extends ActionRequest<Request>, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void execute( Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {",
    "conflict": "public final <Request extends ActionRequest, Response extends ActionResponse, RequestBuilder extends ActionRequestBuilder<Request, Response, RequestBuilder>> void execute(Action<Request, Response, RequestBuilder> action, Request request, ActionListener<Response> listener) {"
  },
  {
    "devdecision": "Combination",
    "id": 76551,
    "v2": "import java.util.Arrays; import java.util.List;  import org.elasticsearch.client.support.Headers;",
    "resolution": "import java.util.Arrays; import java.util.List;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76555,
    "v2": "private final Headers headers; private final URL[] urls;",
    "resolution": "private final URL[] urls;",
    "conflict": "private final InetSocketAddress[] addresses;"
  },
  {
    "devdecision": "Combination",
    "id": 76556,
    "v2": "this.urls = urls;",
    "resolution": "this.threadContext = new ThreadContext(settings); this.urls = urls;",
    "conflict": "this.addresses = addresses; this.threadContext = new ThreadContext(settings);"
  },
  {
    "devdecision": "Version 2",
    "id": 76560,
    "v2": "",
    "resolution": "",
    "conflict": "private final ExtensionPoint.ClassSet<QueryParser> queryParsers = new ExtensionPoint.ClassSet<>(\"query_parser\", QueryParser.class);"
  },
  {
    "devdecision": "Manual",
    "id": 76566,
    "v2": "builder.highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);",
    "resolution": "highlightBuilder = HighlightBuilder.PROTOTYPE.fromXContent(context);",
    "conflict": "XContentBuilder xContentBuilder = XContentFactory.jsonBuilder().copyCurrentStructure(parser); highlightBuilder = xContentBuilder.bytes();"
  },
  {
    "devdecision": "Concatenation",
    "id": 76567,
    "v2": "import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;",
    "resolution": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;",
    "conflict": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76568,
    "v2": "import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;",
    "resolution": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;import org.elasticsearch.search.rescore.RescoreBuilder.Rescorer;",
    "conflict": "import org.elasticsearch.search.aggregations.AggregatorFactory; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 76571,
    "v2": "",
    "resolution": "/** How many bytes we are currently moving to disk, via either IndexWriter.flush or refresh */ private final AtomicLong writingBytes = new AtomicLong();",
    "conflict": "/** How many bytes we are currently moving to disk, via either IndexWriter.flush or refresh */ private final AtomicLong writingBytes = new AtomicLong();"
  },
  {
    "devdecision": "Version 2",
    "id": 76577,
    "v2": "} catch (Throwable throwable){ // if we fail to bake the file-generation into the checkpoint we stick with the file and once we recover and that // file exists we remove it. We only apply this logic to the checkpoint.generation+1 any other file with a higher generation is an error condition",
    "resolution": "} catch (Throwable throwable){ // if we fail to bake the file-generation into the checkpoint we stick with the file and once we recover and that // file exists we remove it. We only apply this logic to the checkpoint.generation+1 any other file with a higher generation is an error condition",
    "conflict": "} catch (Throwable throwable) {"
  },
  {
    "devdecision": "Combination",
    "id": 76582,
    "v2": "/** check if any shards active status changed, now. */ void forceCheck() {",
    "resolution": "/** force checker to run now */ void forceCheck() {",
    "conflict": "/** force checker to run now */ public void forceCheck() {"
  },
  {
    "devdecision": "Version 2",
    "id": 76585,
    "v2": "this.warmer = warmer == null ? (a,b) -> {} : warmer;",
    "resolution": "this.warmer = warmer == null ? (a,b) -> {} : warmer;",
    "conflict": "this.indexingService = indexingService; this.warmer = warmer == null ? (a, b) -> { } : warmer;"
  },
  {
    "devdecision": "Version 1",
    "id": 76614,
    "v2": "updateBufferSize(IndexingMemoryController.INACTIVE_SHARD_INDEXING_BUFFER); logger.debug(\"marking shard as inactive (inactive_time=[{}]) indexing wise\", inactiveTime);",
    "resolution": "logger.debug(\"shard is now inactive\");",
    "conflict": "logger.debug(\"shard is now inactive\");"
  },
  {
    "devdecision": "Version 1",
    "id": 76622,
    "v2": "private final ByteSizeValue minShardIndexBufferSize; private final ByteSizeValue maxShardIndexBufferSize;",
    "resolution": "private final TimeValue inactiveTime;",
    "conflict": "private final TimeValue inactiveTime;"
  },
  {
    "devdecision": "Version 1",
    "id": 76632,
    "v2": "controller.assertBuffers(shard0, new ByteSizeValue(5, ByteSizeUnit.MB)); controller.assertBuffers(shard1, new ByteSizeValue(5, ByteSizeUnit.MB));",
    "resolution": "controller.assertBuffer(shard0, 1); controller.assertBuffer(shard1, 1);",
    "conflict": "controller.assertBuffer(shard0, 1); controller.assertBuffer(shard1, 1);"
  },
  {
    "devdecision": "Version 1",
    "id": 76639,
    "v2": ".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, \"90%\") .put(IndexingMemoryController.MAX_INDEX_BUFFER_SIZE_SETTING, \"6mb\").build());",
    "resolution": ".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, \"90%\") .put(IndexingMemoryController.MAX_INDEX_BUFFER_SIZE_SETTING, \"6mb\").build());",
    "conflict": ".put(IndexingMemoryController.INDEX_BUFFER_SIZE_SETTING, \"90%\") .put(IndexingMemoryController.MAX_INDEX_BUFFER_SIZE_SETTING, \"6mb\").build());"
  },
  {
    "devdecision": "Combination",
    "id": 76645,
    "v2": ".addShard(primaryShard) .addShard(ShardRouting.newUnassigned(shardId.getIndex(), shardId.getId(), null, false, new UnassignedInfo(reason, null)))",
    "resolution": ".addShard(primaryShard) .addShard(ShardRouting.newUnassigned(shardId.getIndex(), shardId.getId(), null, 1, false, new UnassignedInfo(reason, null)))",
    "conflict": ".addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node1.id(), 1, true, ShardRoutingState.STARTED, 10)) .addShard(ShardRouting.newUnassigned(shardId.getIndex(), shardId.getId(), null, 1, false, new UnassignedInfo(reason, null)))"
  },
  {
    "devdecision": "Combination",
    "id": 76646,
    "v2": ".addShard(primaryShard) .addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node2.id(), null, null, false, ShardRoutingState.INITIALIZING, 10, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null)))",
    "resolution": ".addShard(primaryShard) .addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node2.id(), null, null, 1, false, ShardRoutingState.INITIALIZING, 10, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null)))",
    "conflict": ".addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node1.id(), 1, true, ShardRoutingState.STARTED, 10)) .addShard(TestShardRouting.newShardRouting(shardId.getIndex(), shardId.getId(), node2.id(), null, null, 1, false, ShardRoutingState.INITIALIZING, 10, new UnassignedInfo(UnassignedInfo.Reason.CLUSTER_RECOVERED, null)))"
  },
  {
    "devdecision": "Combination",
    "id": 76654,
    "v2": ".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, chunkSize, ByteSizeUnit.BYTES)",
    "resolution": ".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey(), chunkSize, ByteSizeUnit.BYTES)",
    "conflict": ".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey(), chunkSize, ByteSizeUnit.BYTES) .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey(), chunkSize, ByteSizeUnit.BYTES)"
  },
  {
    "devdecision": "Combination",
    "id": 76655,
    "v2": ".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC, \"20mb\")",
    "resolution": ".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey(), \"20mb\")",
    "conflict": ".put(RecoverySettings.INDICES_RECOVERY_MAX_BYTES_PER_SEC_SETTING.getKey(), \"20mb\") .put(RecoverySettings.INDICES_RECOVERY_FILE_CHUNK_SIZE_SETTING.getKey(), \"512kb\")"
  },
  {
    "devdecision": "Version 2",
    "id": 76662,
    "v2": "",
    "resolution": "",
    "conflict": "builder.put(RecoverySettings.INDICES_RECOVERY_COMPRESS_SETTING.getKey(), random.nextBoolean()); }  if (random.nextBoolean()) {"
  },
  {
    "devdecision": "Version 1",
    "id": 76667,
    "v2": "/** If we see no indexing operations after this much time for a given shard, we consider that shard inactive (default: 5 minutes). */ public static final String INDEX_SHARD_INACTIVE_TIME_SETTING = \"index.shard.inactive_time\"; private static final String INDICES_INACTIVE_TIME_SETTING = \"indices.memory.shard_inactive_time\";",
    "resolution": "public static final String INDEX_REFRESH_INTERVAL = \"index.refresh_interval\";",
    "conflict": "public static final String INDEX_REFRESH_INTERVAL = \"index.refresh_interval\";"
  },
  {
    "devdecision": "Version 1",
    "id": 76668,
    "v2": "// We start up inactive active.set(false);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 76677,
    "v2": "this.type = TranslogWriter.Type.fromString(indexSettings.getSettings().get(INDEX_TRANSLOG_FS_TYPE, TranslogWriter.Type.BUFFERED.name())); this.bufferSize = (int) indexSettings.getSettings().getAsBytesSize(INDEX_TRANSLOG_BUFFER_SIZE, IndexingMemoryController.INACTIVE_SHARD_TRANSLOG_BUFFER).bytes(); // Not really interesting, updated by IndexingMemoryController...",
    "resolution": "this.type = TranslogWriter.Type.fromString(indexSettings.getSettings().get(INDEX_TRANSLOG_FS_TYPE, TranslogWriter.Type.BUFFERED.name())); this.bufferSizeBytes = (int) IndexingMemoryController.SHARD_TRANSLOG_BUFFER.bytes();",
    "conflict": "this.type = TranslogWriter.Type.fromString(indexSettings.get(INDEX_TRANSLOG_FS_TYPE, TranslogWriter.Type.BUFFERED.name())); this.bufferSizeBytes = (int) indexSettings.getAsBytesSize(INDEX_TRANSLOG_BUFFER_SIZE, IndexingMemoryController.SHARD_TRANSLOG_BUFFER).bytes();"
  },
  {
    "devdecision": "Manual",
    "id": 76678,
    "v2": "",
    "resolution": "import java.util.*;",
    "conflict": "import java.util.*; import java.util.concurrent.ScheduledFuture;  import org.elasticsearch.common.Nullable;"
  },
  {
    "devdecision": "Combination",
    "id": 76687,
    "v2": "import org.elasticsearch.indices.IndicesModule; import org.elasticsearch.indices.mapper.MapperRegistry;",
    "resolution": "import org.elasticsearch.indices.memory.IndexingMemoryController; import org.elasticsearch.indices.IndicesModule; import org.elasticsearch.indices.mapper.MapperRegistry;",
    "conflict": "import org.elasticsearch.index.translog.TranslogTests; import org.elasticsearch.indices.memory.IndexingMemoryController;"
  },
  {
    "devdecision": "Version 2",
    "id": 76688,
    "v2": "Engine engine = new InternalEngine(config(defaultSettings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), newMergePolicy()), false)) { engine.config().setIndexingBufferSize(new ByteSizeValue(1, ByteSizeUnit.KB));",
    "resolution": "Engine engine = new InternalEngine(config(defaultSettings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), newMergePolicy()), false)) { engine.config().setIndexingBufferSize(new ByteSizeValue(1, ByteSizeUnit.KB));",
    "conflict": "Engine engine = new InternalEngine(config(settings, store, createTempDir(), new MergeSchedulerConfig(defaultSettings), newMergePolicy()), false)) {"
  },
  {
    "devdecision": "Version 1",
    "id": 76714,
    "v2": "UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getVersion(), indexResponse.isCreated());",
    "resolution": "UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getSeqNo(), indexResponse.getVersion(), indexResponse.isCreated());",
    "conflict": "UpdateResponse updateResponse = new UpdateResponse(indexResponse.getShardInfo(), indexResponse.getShardId(), indexResponse.getType(), indexResponse.getId(), indexResponse.getSeqNo(), indexResponse.getVersion(), indexResponse.isCreated());"
  },
  {
    "devdecision": "Version 2",
    "id": 76720,
    "v2": "Engine.Delete delete = TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest, indexShard);",
    "resolution": "Engine.Delete delete = TransportDeleteAction.executeDeleteRequestOnReplica(deleteRequest, indexShard);",
    "conflict": "Engine.Delete delete = indexShard.prepareDeleteOnReplica(deleteRequest.type(), deleteRequest.id(), deleteRequest.seqNo(), deleteRequest.version(), deleteRequest.versionType());"
  },
  {
    "devdecision": "Version 1",
    "id": 76728,
    "v2": "public IndexResponse(ShardId shardId, String type, String id, long version, boolean created) { super(shardId, type, id, version);",
    "resolution": "public IndexResponse(ShardId shardId, String type, String id, long seqNo, long version, boolean created) { super(shardId, type, id, seqNo, version);",
    "conflict": "public IndexResponse(ShardId shardId, String type, String id, long seqNo, long version, boolean created) { super(shardId, type, id, seqNo, version);"
  },
  {
    "devdecision": "Version 2",
    "id": 76736,
    "v2": "",
    "resolution": "",
    "conflict": "if (logger.isTraceEnabled()) { logger.trace(\"replication phase started. pending [{}], action [{}], request [{}], cluster state version used [{}], primary on start\", pending.get(), actionName, replicaRequest, observer.observedState().version(), originalPrimaryShard); }"
  },
  {
    "devdecision": "Manual",
    "id": 76742,
    "v2": "protected final void processAfterWrite(boolean refresh, IndexShard indexShard, Translog.Location location) {",
    "resolution": "protected final void processAfterWrite(boolean refresh, IndexShard indexShard, Translog.Location location) {",
    "conflict": "/** utility method for common tasks that should be done after a write operation */ public static void processAfterWrite(boolean refresh, IndexShard indexShard, Translog.Location location) {"
  },
  {
    "devdecision": "Version 1",
    "id": 76743,
    "v2": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.isCreated());",
    "resolution": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.isCreated());",
    "conflict": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.isCreated());"
  },
  {
    "devdecision": "Version 1",
    "id": 76744,
    "v2": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.isCreated());",
    "resolution": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.isCreated());",
    "conflict": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.isCreated());"
  },
  {
    "devdecision": "Version 1",
    "id": 76745,
    "v2": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), false);",
    "resolution": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), false);",
    "conflict": "UpdateResponse update = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), false);"
  },
  {
    "devdecision": "Combination",
    "id": 76749,
    "v2": "import org.elasticsearch.index.shard.ShardId; import org.elasticsearch.rest.RestStatus;",
    "resolution": "import org.elasticsearch.index.seqno.SequenceNumbersService; import org.elasticsearch.index.shard.ShardId; import org.elasticsearch.rest.RestStatus;",
    "conflict": "import org.elasticsearch.index.seqno.SequenceNumbersService; import org.elasticsearch.index.shard.ShardId;"
  },
  {
    "devdecision": "Version 1",
    "id": 76753,
    "v2": "return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo, AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);",
    "resolution": "return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primaryTerm, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo, AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);",
    "conflict": "return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primaryTerm, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo, AllocationId.newTargetRelocation(allocationId), true, expectedShardSize);"
  },
  {
    "devdecision": "Version 1",
    "id": 76772,
    "v2": "import org.elasticsearch.action.index.IndexRequest; import org.elasticsearch.action.index.IndexRequest.OpType; import org.elasticsearch.action.index.IndexResponse;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 76780,
    "v2": "if (!activeAllocationIds.equals(that.activeAllocationIds)) {",
    "resolution": "if (!activeAllocationIds.equals(that.activeAllocationIds)) { if (Arrays.equals(primaryTerms, that.primaryTerms) == false) {",
    "conflict": "if (Arrays.equals(primaryTerms, that.primaryTerms) == false) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 76781,
    "v2": "result = 31 * result + activeAllocationIds.hashCode();",
    "resolution": "result = 31 * result + activeAllocationIds.hashCode();result = 31 * result + customs.hashCode(); result = 31 * result + Arrays.hashCode(primaryTerms);",
    "conflict": "result = 31 * result + customs.hashCode(); result = 31 * result + Arrays.hashCode(primaryTerms);"
  },
  {
    "devdecision": "Version 2",
    "id": 76786,
    "v2": "final RoutingAllocation.Result result = buildChangedResult(clusterState.metaData(), routingNodes);",
    "resolution": "final RoutingAllocation.Result result = buildChangedResult(clusterState.metaData(), routingNodes);",
    "conflict": "RoutingAllocation.Result result = buildChangedResult(clusterState.metaData(), routingNodes);"
  },
  {
    "devdecision": "Version 1",
    "id": 76810,
    "v2": "import static org.elasticsearch.test.ESTestCase.randomFrom; import static org.elasticsearch.test.ESTestCase.randomIntBetween;",
    "resolution": "import static org.elasticsearch.test.ESTestCase.*;",
    "conflict": "import static org.elasticsearch.test.ESTestCase.*;"
  },
  {
    "devdecision": "Version 2",
    "id": 76818,
    "v2": "RoutingAllocation.Result rerouteResult = ALLOCATION_SERVICE.reroute(clusterState, \"reroute\"); this.testRoutingTable = rerouteResult.routingTable();",
    "resolution": "RoutingAllocation.Result rerouteResult = ALLOCATION_SERVICE.reroute(clusterState, \"reroute\"); this.testRoutingTable = rerouteResult.routingTable();",
    "conflict": "RoutingAllocation.Result rerouteResult = ALLOCATION_SERVICE.reroute(clusterState);"
  },
  {
    "devdecision": "Combination",
    "id": 76821,
    "v2": "rerouteResult = allocation.reroute(clusterState, \"reroute\"); clusterState = ClusterState.builder(clusterState).routingTable(rerouteResult.routingTable()).build();",
    "resolution": "rerouteResult = allocation.reroute(clusterState, \"reroute\"); clusterState = ClusterState.builder(clusterState).routingResult(rerouteResult).build();",
    "conflict": "rerouteResult = allocation.reroute(clusterState); clusterState = ClusterState.builder(clusterState).routingResult(rerouteResult).build();"
  },
  {
    "devdecision": "Combination",
    "id": 76822,
    "v2": "protected RoutingAllocation.Result reroute(ClusterState clusterState, String reason, boolean debug) { return new RoutingAllocation.Result(false, clusterState.routingTable());",
    "resolution": "protected RoutingAllocation.Result reroute(ClusterState clusterState, String reason, boolean debug) { return new RoutingAllocation.Result(false, clusterState.routingTable(), clusterState.metaData());",
    "conflict": "public RoutingAllocation.Result reroute(ClusterState clusterState, boolean debug) { return new RoutingAllocation.Result(false, clusterState.routingTable(), clusterState.metaData());"
  },
  {
    "devdecision": "Combination",
    "id": 76826,
    "v2": "config.getAnalyzer(), config.getSimilarity(), new CodecService(INDEX_SETTINGS, null), config.getEventListener() , config.getTranslogRecoveryPerformer(), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig);",
    "resolution": "config.getAnalyzer(), config.getSimilarity(), new CodecService(INDEX_SETTINGS, null), config.getEventListener() , config.getTranslogRecoveryPerformer(), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5));",
    "conflict": "config.getAnalyzer(), config.getSimilarity(), new CodecService(shardId.index()), config.getEventListener() , config.getTranslogRecoveryPerformer(), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy(), translogConfig, TimeValue.timeValueMinutes(5));"
  },
  {
    "devdecision": "Version 2",
    "id": 76837,
    "v2": "public ParserContext(String type, AnalysisService analysisService,  Function<String, SimilarityProvider> similarityLookupService, MapperService mapperService, Function<String, TypeParser> typeParsers,",
    "resolution": "public ParserContext(String type, AnalysisService analysisService,  Function<String, SimilarityProvider> similarityLookupService, MapperService mapperService, Function<String, TypeParser> typeParsers,",
    "conflict": "public ParserContext(String type, AnalysisService analysisService, SimilarityLookupService similarityLookupService, MapperService mapperService, Map<String, TypeParser> typeParsers,"
  },
  {
    "devdecision": "Version 2",
    "id": 76843,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilder; import org.elasticsearch.index.query.functionscore.ScoreFunctionBuilders; import org.elasticsearch.index.query.functionscore.weight.WeightBuilder;"
  },
  {
    "devdecision": "Manual",
    "id": 76851,
    "v2": "vars.put(\"data\", newHashSet(ImmutableMap.<String, Object>of(\"key\", \"foo\"), ImmutableMap.<String, Object>of(\"key\", \"bar\"))); output = engine.executable(mustache, vars).run();",
    "resolution": "vars.put(\"data\", setData); output = engine.executable(mustache, vars).run();",
    "conflict": "vars.put(\"data\", newHashSet(singletonMap(\"key\", \"foo\"), singletonMap(\"key\", \"bar\"))); output = engine.execute(mustache, vars);"
  },
  {
    "devdecision": "Combination",
    "id": 76857,
    "v2": "",
    "resolution": "import java.io.IOException;",
    "conflict": "import java.io.IOException;  import org.elasticsearch.cluster.ClusterService;"
  },
  {
    "devdecision": "Version 2",
    "id": 76861,
    "v2": "IndexShard indexShard = indexService.getShardOrNull(shardId.id()); return indexShard;",
    "resolution": "IndexShard indexShard = indexService.getShardOrNull(shardId.id()); return indexShard;",
    "conflict": "return indexService.shard(shardId.id());"
  },
  {
    "devdecision": "Version 2",
    "id": 76876,
    "v2": "private List<String> readMarvelHeroNames() throws IOException, URISyntaxException { return Files.readAllLines(PathUtils.get(SuggestSearchIT.class.getResource(\"/config/names.txt\").toURI()), StandardCharsets.UTF_8); }",
    "resolution": "private List<String> readMarvelHeroNames() throws IOException, URISyntaxException { return Files.readAllLines(PathUtils.get(SuggestSearchIT.class.getResource(\"/config/names.txt\").toURI()), StandardCharsets.UTF_8); }",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 76879,
    "v2": "import java.util.Collection; import java.util.Collections;",
    "resolution": "import java.util.HashMap;import java.util.Collection; import java.util.Collections;",
    "conflict": "import java.util.HashMap;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76885,
    "v2": "import org.elasticsearch.plugins.Plugin; import org.elasticsearch.script.Script;",
    "resolution": "import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.plugins.Plugin; import org.elasticsearch.script.Script;",
    "conflict": "import org.elasticsearch.index.query.QueryBuilders;"
  },
  {
    "devdecision": "Manual",
    "id": 76891,
    "v2": "import org.elasticsearch.common.ParsingException; import org.elasticsearch.index.query.QueryShardException;",
    "resolution": "import org.elasticsearch.index.query.TestParsingException;",
    "conflict": "import org.elasticsearch.index.query.TestParsingException;"
  },
  {
    "devdecision": "Version 1",
    "id": 76892,
    "v2": "import org.elasticsearch.common.bytes.BytesArray; import org.elasticsearch.common.inject.Inject; import org.elasticsearch.common.settings.Settings;",
    "resolution": "import org.elasticsearch.common.xcontent.XContentBuilder;",
    "conflict": "import org.elasticsearch.common.xcontent.XContentBuilder;"
  },
  {
    "devdecision": "Combination",
    "id": 76895,
    "v2": "",
    "resolution": "import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.script.ScriptService.ScriptType;",
    "conflict": "import org.elasticsearch.index.query.QueryBuilders; import org.elasticsearch.script.ScriptService.ScriptType; import org.elasticsearch.script.expression.ExpressionScriptEngineService;"
  },
  {
    "devdecision": "Combination",
    "id": 76911,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.common.ParsingException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.index.query.QueryParsingException;"
  },
  {
    "devdecision": "Manual",
    "id": 76912,
    "v2": "} } catch (ParsingException e) {",
    "resolution": "} } catch (QueryShardException|ParsingException e) {",
    "conflict": "} } catch (QueryShardException|QueryParsingException e) {"
  },
  {
    "devdecision": "Combination",
    "id": 76914,
    "v2": "import org.elasticsearch.index.query.QueryParseContext; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardContext; import org.elasticsearch.common.ParsingException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardContext; import org.elasticsearch.index.query.QueryParsingException;"
  },
  {
    "devdecision": "Combination",
    "id": 76916,
    "v2": "import org.apache.lucene.search.MatchAllDocsQuery; import org.apache.lucene.search.Query; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76918,
    "v2": "import org.apache.lucene.queries.BoostingQuery; import org.apache.lucene.search.Query; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76925,
    "v2": "if (value == null) { throw new ParsingException(parseContext, \"No text specified for text query\");",
    "resolution": "if (text == null) { throw new ParsingException(parseContext, \"No text specified for text query\");",
    "conflict": "if (text == null) { throw new QueryParsingException(parseContext, \"No text specified for text query\");"
  },
  {
    "devdecision": "Combination",
    "id": 76927,
    "v2": "import org.apache.lucene.search.DisjunctionMaxQuery; import org.apache.lucene.search.Query; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 76936,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public Query parse(QueryShardContext context) throws IOException { QueryParseContext parseContext = context.parseContext();",
    "conflict": "public Query parse(QueryShardContext context) throws IOException, QueryParsingException { QueryParseContext parseContext = context.parseContext();"
  },
  {
    "devdecision": "Combination",
    "id": 76937,
    "v2": "import org.apache.lucene.search.Query; import org.elasticsearch.Version; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 76941,
    "v2": "import org.apache.lucene.search.Query; import org.elasticsearch.Version; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParseField;",
    "conflict": "import org.elasticsearch.common.ParseField;"
  },
  {
    "devdecision": "Combination",
    "id": 76945,
    "v2": "import org.apache.lucene.search.Query; import org.elasticsearch.Version; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParseField; import org.elasticsearch.common.ParsingException;",
    "conflict": "import org.elasticsearch.common.ParseField;"
  },
  {
    "devdecision": "Version 1",
    "id": 76950,
    "v2": "import org.elasticsearch.index.mapper.MappedFieldType; import org.elasticsearch.index.mapper.geo.GeoShapeFieldMapper; import org.elasticsearch.index.search.shape.ShapeFetchService; import org.elasticsearch.search.internal.SearchContext;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76973,
    "v2": "if (indicesFound) { throw new ParsingException(parseContext, \"[indices] indices or index already specified\");",
    "resolution": "if (indices.isEmpty() == false) { throw new ParsingException(parseContext, \"[indices] indices or index already specified\");",
    "conflict": "if (indices.isEmpty() == false) { throw new QueryParsingException(parseContext, \"[indices] indices or index already specified\");"
  },
  {
    "devdecision": "Combination",
    "id": 76974,
    "v2": "if (indicesFound) { throw new ParsingException(parseContext, \"[indices] indices or index already specified\");",
    "resolution": "if (indices.isEmpty() == false) { throw new ParsingException(parseContext, \"[indices] indices or index already specified\");",
    "conflict": "if (indices.isEmpty() == false) { throw new QueryParsingException(parseContext, \"[indices] indices or index already specified\");"
  },
  {
    "devdecision": "Combination",
    "id": 76976,
    "v2": "import org.apache.lucene.search.MatchAllDocsQuery; import org.apache.lucene.search.Query; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76985,
    "v2": "import org.elasticsearch.common.ParsingException; import org.elasticsearch.common.Strings; import org.elasticsearch.common.inject.Inject; import org.elasticsearch.common.lucene.search.MoreLikeThisQuery;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76987,
    "v2": "if (moreLikeFields != null && moreLikeFields.isEmpty()) { throw new ParsingException(parseContext, \"more_like_this requires 'fields' to be non-empty\");",
    "resolution": "if (fields != null && fields.isEmpty()) { throw new ParsingException(parseContext, \"more_like_this requires 'fields' to be non-empty\");",
    "conflict": "if (fields != null && fields.isEmpty()) { throw new QueryParsingException(parseContext, \"more_like_this requires 'fields' to be non-empty\");"
  },
  {
    "devdecision": "Combination",
    "id": 76994,
    "v2": "if (fieldNameWithBoosts.isEmpty()) { throw new ParsingException(parseContext, \"No fields specified for multi_match query\");",
    "resolution": "if (fieldsBoosts.isEmpty()) { throw new ParsingException(parseContext, \"No fields specified for multi_match query\");",
    "conflict": "if (fieldsBoosts.isEmpty()) { throw new QueryParsingException(parseContext, \"No fields specified for multi_match query\");"
  },
  {
    "devdecision": "Combination",
    "id": 77000,
    "v2": "import org.apache.lucene.search.Query; import org.elasticsearch.common.ParsingException; import org.elasticsearch.common.inject.Inject;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77001,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException { return parseContext.parseInnerQuery();",
    "resolution": "public QueryFilterBuilder getBuilderPrototype() { return QueryFilterBuilder.PROTOTYPE;",
    "conflict": "public QueryFilterBuilder getBuilderPrototype() { return QueryFilterBuilder.PROTOTYPE;"
  },
  {
    "devdecision": "Version 2",
    "id": 77010,
    "v2": "throw new ParsingException(parseContext, \"[query_string] query does not support [\" + currentFieldName + \"]\");",
    "resolution": "throw new ParsingException(parseContext, \"[query_string] query does not support [\" + currentFieldName + \"]\");",
    "conflict": "throw new QueryParsingException(parseContext, \"[query_string] query does not support [\" + currentFieldName + \"]\");"
  },
  {
    "devdecision": "Version 2",
    "id": 77012,
    "v2": "throw new ParsingException(parseContext, \"[query_string] time_zone [\" + parser.text() + \"] is unknown\");",
    "resolution": "throw new ParsingException(parseContext, \"[query_string] time_zone [\" + parser.text() + \"] is unknown\");",
    "conflict": "throw new QueryParsingException(parseContext, \"[query_string] time_zone [\" + parser.text() + \"] is unknown\");"
  },
  {
    "devdecision": "Combination",
    "id": 77027,
    "v2": "import org.apache.lucene.search.Query; import org.apache.lucene.search.spans.SpanContainingQuery; import org.apache.lucene.search.spans.SpanQuery; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77032,
    "v2": "import org.apache.lucene.search.Query; import org.apache.lucene.search.spans.SpanFirstQuery; import org.apache.lucene.search.spans.SpanQuery; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77035,
    "v2": "if (end == -1) { throw new ParsingException(parseContext, \"spanFirst must have [end] set for it\");",
    "resolution": "if (end == null) { throw new ParsingException(parseContext, \"spanFirst must have [end] set for it\");",
    "conflict": "if (end == null) { throw new QueryParsingException(parseContext, \"spanFirst must have [end] set for it\");"
  },
  {
    "devdecision": "Combination",
    "id": 77036,
    "v2": "import org.apache.lucene.search.MultiTermQuery; import org.apache.lucene.search.Query; import org.apache.lucene.search.spans.SpanMultiTermQueryWrapper; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77038,
    "v2": "import org.apache.lucene.search.Query; import org.apache.lucene.search.spans.SpanNearQuery; import org.apache.lucene.search.spans.SpanQuery; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77041,
    "v2": "import org.apache.lucene.search.Query; import org.apache.lucene.search.spans.SpanNotQuery; import org.apache.lucene.search.spans.SpanQuery; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77045,
    "v2": "import org.apache.lucene.search.Query; import org.apache.lucene.search.spans.SpanOrQuery; import org.apache.lucene.search.spans.SpanQuery; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77050,
    "v2": "import org.apache.lucene.search.Query; import org.apache.lucene.search.spans.SpanQuery; import org.apache.lucene.search.spans.SpanWithinQuery; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77065,
    "v2": "import org.elasticsearch.index.query.QueryParseContext; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardContext; import org.elasticsearch.common.ParsingException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardContext; import org.elasticsearch.index.query.QueryParsingException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77069,
    "v2": "import org.elasticsearch.index.query.QueryParseContext; import org.elasticsearch.index.query.QueryParser; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.*;",
    "conflict": "import org.elasticsearch.index.query.*;"
  },
  {
    "devdecision": "Manual",
    "id": 77070,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public Query parse(QueryShardContext context) throws IOException { QueryParseContext parseContext = context.parseContext();",
    "conflict": "public Query parse(QueryShardContext context) throws IOException, QueryParsingException { QueryParseContext parseContext = context.parseContext();"
  },
  {
    "devdecision": "Combination",
    "id": 77071,
    "v2": "import org.elasticsearch.index.query.QueryParseContext; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardContext; import org.elasticsearch.common.ParsingException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardContext; import org.elasticsearch.index.query.QueryParsingException;"
  },
  {
    "devdecision": "Manual",
    "id": 77073,
    "v2": "public ScoreFunction parse(QueryParseContext parseContext, XContentParser parser) throws IOException, ParsingException {",
    "resolution": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, ParsingException { QueryParseContext parseContext = context.parseContext();",
    "conflict": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, QueryParsingException { QueryParseContext parseContext = context.parseContext();"
  },
  {
    "devdecision": "Manual",
    "id": 77074,
    "v2": "public ScoreFunction parse(QueryParseContext parseContext, XContentParser parser) throws IOException, ParsingException {",
    "resolution": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, ParsingException { QueryParseContext parseContext = context.parseContext();",
    "conflict": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, QueryParsingException { QueryParseContext parseContext = context.parseContext();"
  },
  {
    "devdecision": "Manual",
    "id": 77075,
    "v2": "public ScoreFunction parse(QueryParseContext parseContext, XContentParser parser) throws IOException, ParsingException {",
    "resolution": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, ParsingException { QueryParseContext parseContext = context.parseContext();",
    "conflict": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, QueryParsingException { QueryParseContext parseContext = context.parseContext();"
  },
  {
    "devdecision": "Combination",
    "id": 77094,
    "v2": "import org.elasticsearch.common.ParsingException; import org.elasticsearch.index.query.TestParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException; import org.elasticsearch.index.query.QueryShardException;",
    "conflict": "import org.elasticsearch.index.query.QueryParsingException; import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Combination",
    "id": 77104,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.index.query.support.QueryInnerHits; import org.elasticsearch.common.ParsingException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.index.query.support.QueryInnerHits; import org.elasticsearch.index.query.QueryParsingException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77117,
    "v2": "Environment env = initialSettings.v2(); Path binDir = env.binFile();",
    "resolution": "Path binDir = environment.binFile();",
    "conflict": "Path binDir = environment.binFile();"
  },
  {
    "devdecision": "Version 1",
    "id": 77118,
    "v2": "Environment env = initialSettings.v2(); Path pluginConfigDir = env.configFile().resolve(pluginName);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77120,
    "v2": "Environment env = initialSettings.v2(); Path binDir = env.binFile();",
    "resolution": "Path binDir = environment.binFile();",
    "conflict": "Path binDir = environment.binFile();"
  },
  {
    "devdecision": "Combination",
    "id": 77124,
    "v2": "",
    "resolution": "import org.apache.lucene.search.Query; import org.elasticsearch.Version;",
    "conflict": "import org.apache.lucene.search.Query; import org.elasticsearch.Version; import org.elasticsearch.common.geo.GeoHashUtils;"
  },
  {
    "devdecision": "Combination",
    "id": 77126,
    "v2": "import java.nio.charset.StandardCharsets;",
    "resolution": "import org.apache.lucene.search.Query; import java.nio.charset.StandardCharsets;",
    "conflict": "import com.google.common.base.Charsets; import org.apache.lucene.search.Query;"
  },
  {
    "devdecision": "Combination",
    "id": 77127,
    "v2": "this.source = source.getBytes(StandardCharsets.UTF_8); this.offset = 0; this.length = this.source.length;",
    "resolution": "this.source = source.getBytes(StandardCharsets.UTF_8);",
    "conflict": "this.source = source.getBytes(Charsets.UTF_8);"
  },
  {
    "devdecision": "Version 2",
    "id": 77130,
    "v2": "InternalTestCluster.Async<List<String>> masterNodes= internalCluster().startMasterOnlyNodesAsync(2); InternalTestCluster.Async<String> dataNode = internalCluster().startDataOnlyNodeAsync();",
    "resolution": "InternalTestCluster.Async<List<String>> masterNodes= internalCluster().startMasterOnlyNodesAsync(2); InternalTestCluster.Async<String> dataNode = internalCluster().startDataOnlyNodeAsync();",
    "conflict": "Future<List<String>> masterNodes = internalCluster().startMasterOnlyNodesAsync(2); Future<String> dataNode = internalCluster().startDataOnlyNodeAsync();"
  },
  {
    "devdecision": "Version 1",
    "id": 77138,
    "v2": "public HasParentQueryBuilder scoreMode(String scoreMode) { this.scoreMode = scoreMode;",
    "resolution": "public HasParentQueryBuilder score(boolean score) { this.score = score;",
    "conflict": "public HasParentQueryBuilder score(boolean score) { this.score = score;"
  },
  {
    "devdecision": "Combination",
    "id": 77154,
    "v2": "",
    "resolution": "import java.lang.reflect.Proxy;",
    "conflict": "import java.lang.reflect.InvocationHandler; import java.lang.reflect.Method; import java.lang.reflect.Proxy;"
  },
  {
    "devdecision": "Manual",
    "id": 77186,
    "v2": "// Score mode = TOTAL response = minMaxQuery(\"total\", 0, null);",
    "resolution": "// Score mode = SUM response = minMaxQuery(ScoreMode.Total, 0, 0);",
    "conflict": "// Score mode = SUM response = minMaxQuery(ScoreType.SUM, 0, 0);"
  },
  {
    "devdecision": "None",
    "id": 77221,
    "v2": "import org.apache.lucene.search.BooleanClause;",
    "resolution": "import org.apache.lucene.search.Query;",
    "conflict": "import com.google.common.collect.Maps;"
  },
  {
    "devdecision": "Version 1",
    "id": 77226,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, QueryParsingException { return parseContext.parseInnerQuery();",
    "resolution": "public QueryFilterBuilder getBuilderPrototype() { return QueryFilterBuilder.PROTOTYPE;",
    "conflict": "public QueryFilterBuilder getBuilderPrototype() { return QueryFilterBuilder.PROTOTYPE;"
  },
  {
    "devdecision": "Version 2",
    "id": 77229,
    "v2": "",
    "resolution": "",
    "conflict": "import static com.google.common.collect.Maps.newHashMap;"
  },
  {
    "devdecision": "Manual",
    "id": 77231,
    "v2": "Map<String, QueryParser> queryParsers = new HashMap<>(); for (QueryParser queryParser : injectedQueryParsers) {",
    "resolution": "Map<String, QueryParser<?>> queryParsers = new HashMap<>(); for (QueryParser<?> queryParser : injectedQueryParsers) {",
    "conflict": "Map<String, QueryParser<?>> queryParsers = Maps.newHashMap(); for (QueryParser<?> queryParser : injectedQueryParsers) {"
  },
  {
    "devdecision": "Combination",
    "id": 77237,
    "v2": "private String queryName;",
    "resolution": "private QueryInnerHits queryInnerHits;",
    "conflict": "private int shortCircuitCutoff = DEFAULT_SHORT_CIRCUIT_CUTOFF;  private QueryInnerHits queryInnerHits;"
  },
  {
    "devdecision": "Version 1",
    "id": 77248,
    "v2": "private float boost = -1; private String queryName;",
    "resolution": "static final MoreLikeThisQueryBuilder PROTOTYPE = new MoreLikeThisQueryBuilder();",
    "conflict": "static final MoreLikeThisQueryBuilder PROTOTYPE = new MoreLikeThisQueryBuilder();"
  },
  {
    "devdecision": "Version 2",
    "id": 77251,
    "v2": "if (stopWords != null && stopWords.length > 0) { builder.field(MoreLikeThisQueryParser.Field.STOP_WORDS.getPreferredName(), stopWords);",
    "resolution": "if (stopWords != null && stopWords.length > 0) { builder.field(MoreLikeThisQueryParser.Field.STOP_WORDS.getPreferredName(), stopWords);",
    "conflict": "if (boostTerms != -1) { builder.field(MoreLikeThisQueryParser.Fields.BOOST_TERMS.getPreferredName(), boostTerms);"
  },
  {
    "devdecision": "Manual",
    "id": 77257,
    "v2": "import java.util.*;",
    "resolution": "import java.util.Arrays; import java.util.EnumSet;",
    "conflict": "import java.util.Arrays; import java.util.EnumSet; import java.util.List;"
  },
  {
    "devdecision": "Combination",
    "id": 77303,
    "v2": "BooleanQuery.Builder bool = new BooleanQuery.Builder(); Query exists = ExistsQueryParser.newFilter(parseContext, fieldName, null);",
    "resolution": "BooleanQuery.Builder bool = new BooleanQuery.Builder(); Query exists = ExistsQueryBuilder.newFilter(context, fieldName);",
    "conflict": "BooleanQuery bool = new BooleanQuery(); Query exists = ExistsQueryBuilder.newFilter(context, fieldName);"
  },
  {
    "devdecision": "Version 1",
    "id": 77306,
    "v2": "import org.apache.lucene.search.join.BitSetProducer; import org.apache.lucene.search.similarities.Similarity; import org.elasticsearch.Version; import org.elasticsearch.cluster.metadata.IndexMetaData;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 77314,
    "v2": "BitSetProducer rootDocumentsFilter = context.bitsetFilterCache().getBitSetProducer(Queries.newNonNestedFilter());",
    "resolution": "BitSetProducer rootDocumentsFilter = context.bitsetFilterCache().getBitSetProducer(Queries.newNonNestedFilter());",
    "conflict": "BitDocIdSetFilter rootDocumentsFilter = context.bitsetFilterCache().getBitDocIdSetFilter(Queries.newNonNestedFilter());"
  },
  {
    "devdecision": "Combination",
    "id": 77329,
    "v2": "import org.elasticsearch.index.query.QueryParsingException; import org.elasticsearch.search.internal.SearchContext;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.search.internal.SearchContext;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Manual",
    "id": 77330,
    "v2": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryParsingException {",
    "resolution": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryShardException {",
    "conflict": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Combination",
    "id": 77331,
    "v2": "import org.elasticsearch.index.query.QueryParsingException; import org.elasticsearch.search.internal.SearchContext;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.search.internal.SearchContext;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Manual",
    "id": 77332,
    "v2": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryParsingException {",
    "resolution": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryShardException {",
    "conflict": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Combination",
    "id": 77333,
    "v2": "import org.elasticsearch.index.query.QueryParsingException; import org.elasticsearch.search.internal.SearchContext;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.search.internal.SearchContext;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Manual",
    "id": 77334,
    "v2": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryParsingException {",
    "resolution": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryShardException {",
    "conflict": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Combination",
    "id": 77335,
    "v2": "import org.elasticsearch.index.query.QueryParsingException; import org.elasticsearch.search.internal.SearchContext;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Manual",
    "id": 77336,
    "v2": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryParsingException {",
    "resolution": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryShardException {",
    "conflict": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Manual",
    "id": 77338,
    "v2": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryParsingException {",
    "resolution": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryShardException {",
    "conflict": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Manual",
    "id": 77339,
    "v2": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryParsingException {",
    "resolution": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher, SearchContext context) throws IOException, QueryShardException {",
    "conflict": "public SignificanceHeuristic parse(XContentParser parser, ParseFieldMatcher parseFieldMatcher) throws IOException, QueryShardException {"
  },
  {
    "devdecision": "None",
    "id": 77342,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.action.ActionRequestValidationException;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "None",
    "id": 77363,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.common.bytes.BytesArray;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "None",
    "id": 77365,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.ElasticsearchGenerationException;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "None",
    "id": 77366,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.apache.lucene.search.BooleanClause.Occur;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "None",
    "id": 77369,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.cluster.AbstractDiffable;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Version 1",
    "id": 77383,
    "v2": "",
    "resolution": "import java.util.Collection; import java.util.List; import java.util.Objects;",
    "conflict": "import java.util.Collection; import java.util.List; import java.util.Objects;"
  },
  {
    "devdecision": "Manual",
    "id": 77389,
    "v2": "static Query createParentQuery(Query innerQuery, String parentType, boolean score, QueryParseContext parseContext, InnerHitsSubSearchContext innerHits) throws IOException { DocumentMapper parentDocMapper = parseContext.mapperService().documentMapper(parentType);",
    "resolution": "static Query createParentQuery(Query innerQuery, String parentType, boolean score, QueryShardContext context, InnerHitsSubSearchContext innerHits) throws IOException { DocumentMapper parentDocMapper = context.mapperService().documentMapper(parentType);",
    "conflict": "static Query createParentQuery(Query innerQuery, String parentType, boolean score, QueryShardContext context, Tuple<String, SubSearchContext> innerHits) throws IOException { DocumentMapper parentDocMapper = context.mapperService().documentMapper(parentType);"
  },
  {
    "devdecision": "Combination",
    "id": 77401,
    "v2": "import org.apache.lucene.index.Term; import org.apache.lucene.search.Query; import org.apache.lucene.search.TermQuery; import org.elasticsearch.common.ParseField;",
    "resolution": "import org.elasticsearch.common.ParseField;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77404,
    "v2": "List<Object> terms = new ArrayList<>(); String fieldName = null; float boost = 1f;",
    "resolution": "String currentFieldName = null;",
    "conflict": "String currentFieldName = null;"
  },
  {
    "devdecision": "Combination",
    "id": 77407,
    "v2": "MapperQueryParser queryParser = parseContext.queryParser(qpSettings);",
    "resolution": "MapperQueryParser queryParser = context.queryParser(qpSettings);",
    "conflict": "qpSettings.queryTypes(context.queryTypes());  MapperQueryParser queryParser = context.queryParser(qpSettings);"
  },
  {
    "devdecision": "Combination",
    "id": 77408,
    "v2": "childFilter = nestedObjectMapper.nestedTypeFilter(); parentObjectMapper = parseContext.nestedScope().nextLevel(nestedObjectMapper);",
    "resolution": "childFilter = nestedObjectMapper.nestedTypeFilter(); parentObjectMapper = shardContext.nestedScope().nextLevel(nestedObjectMapper);",
    "conflict": "childFilter = shardContext.bitsetFilter(nestedObjectMapper.nestedTypeFilter()); parentObjectMapper = shardContext.nestedScope().nextLevel(nestedObjectMapper);"
  },
  {
    "devdecision": "Version 2",
    "id": 77409,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.Version; import org.elasticsearch.cluster.ClusterName; import org.elasticsearch.common.Nullable;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77416,
    "v2": "if (escape != null) { builder.field(\"escape\", escape); }",
    "resolution": "printBoostAndQueryName(builder);if (escape != null) { builder.field(\"escape\", escape); }",
    "conflict": "printBoostAndQueryName(builder);"
  },
  {
    "devdecision": "Combination",
    "id": 77418,
    "v2": "import org.elasticsearch.index.query.QueryParsingException; import org.elasticsearch.plugins.Plugin;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.plugins.Plugin;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException; import org.elasticsearch.plugins.AbstractPlugin;"
  },
  {
    "devdecision": "Combination",
    "id": 77419,
    "v2": "import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository; import org.elasticsearch.plugins.AbstractPlugin;",
    "resolution": "import org.elasticsearch.plugins.Plugin; import org.elasticsearch.index.snapshots.blobstore.BlobStoreIndexShardRepository;",
    "conflict": "import org.elasticsearch.plugins.Plugin;"
  },
  {
    "devdecision": "Version 2",
    "id": 77420,
    "v2": "if (isSnapshotReady(settings, logger)) { module.registerRepository(AzureRepository.TYPE, AzureRepository.class, BlobStoreIndexShardRepository.class); }",
    "resolution": "if (isSnapshotReady(settings, logger)) { module.registerRepository(AzureRepository.TYPE, AzureRepository.class, BlobStoreIndexShardRepository.class); }",
    "conflict": "module.registerRepository(AzureRepository.TYPE, AzureRepositoryModule.class);"
  },
  {
    "devdecision": "Version 2",
    "id": 77422,
    "v2": "",
    "resolution": "",
    "conflict": "} else if (token == XContentParser.Token.START_ARRAY) { queryFound = true; // its the filter, and the name is the field query = parseContext.parseInnerFilterToQueryBuilder(currentFieldName);"
  },
  {
    "devdecision": "Concatenation",
    "id": 77433,
    "v2": "private Boolean coerce;  private Boolean ignoreMalformed;",
    "resolution": "static final GeoDistanceRangeQueryBuilder PROTOTYPE = new GeoDistanceRangeQueryBuilder(null);private Boolean coerce;  private Boolean ignoreMalformed;",
    "conflict": "static final GeoDistanceRangeQueryBuilder PROTOTYPE = new GeoDistanceRangeQueryBuilder(null);"
  },
  {
    "devdecision": "Combination",
    "id": 77443,
    "v2": ".loadFromStream(json, getClass().getResourceAsStream(json)) .put(\"path.home\", createTempDir().toString())",
    "resolution": ".loadFromStream(json, getClass().getResourceAsStream(json)) .put(\"path.home\", createHome())",
    "conflict": ".loadFromClasspath(\"org/elasticsearch/index/analysis/commongrams/commongrams.json\") .put(\"path.home\", createHome())"
  },
  {
    "devdecision": "Combination",
    "id": 77444,
    "v2": ".loadFromStream(json, getClass().getResourceAsStream(json)) .put(\"path.home\", createTempDir().toString())",
    "resolution": ".loadFromStream(json, getClass().getResourceAsStream(json)) .put(\"path.home\", createHome())",
    "conflict": ".loadFromClasspath(\"org/elasticsearch/index/analysis/commongrams/commongrams_query_mode.json\") .put(\"path.home\", createHome())"
  },
  {
    "devdecision": "Version 2",
    "id": 77455,
    "v2": "throw new QueryParsingException(parseContext, \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");",
    "resolution": "throw new QueryParsingException(parseContext, \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");",
    "conflict": "throw new QueryParsingException(parseContext, \"[\" + SimpleQueryStringBuilder.NAME + \"] query does not support [\" + currentFieldName + \"]\");"
  },
  {
    "devdecision": "Concatenation",
    "id": 77461,
    "v2": "import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;",
    "resolution": "import org.elasticsearch.common.io.stream.NamedWriteableAwareStreamInput;import org.elasticsearch.common.io.stream.FilterStreamInput; import org.elasticsearch.common.io.stream.NamedWriteableRegistry;",
    "conflict": "import org.elasticsearch.common.io.stream.FilterStreamInput; import org.elasticsearch.common.io.stream.NamedWriteableRegistry;"
  },
  {
    "devdecision": "Version 2",
    "id": 77462,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.common.io.stream.BytesStreamOutput; import org.elasticsearch.common.io.stream.NamedWriteableRegistry; import org.elasticsearch.common.io.stream.StreamInput; import org.elasticsearch.common.io.stream.FilterStreamInput;"
  },
  {
    "devdecision": "Version 2",
    "id": 77467,
    "v2": "version0, new NamedWriteableRegistry()",
    "resolution": "version0, new NamedWriteableRegistry()",
    "conflict": "version0, namedWriteableRegistry"
  },
  {
    "devdecision": "Version 2",
    "id": 77468,
    "v2": "version1, new NamedWriteableRegistry()",
    "resolution": "version1, new NamedWriteableRegistry()",
    "conflict": "version1, namedWriteableRegistry"
  },
  {
    "devdecision": "Combination",
    "id": 77469,
    "v2": "this.workers = EsExecutors.newFixed(LOCAL_TRANSPORT_THREAD_NAME_PREFIX, workerCount, queueSize, threadFactory);",
    "resolution": "this.workers = EsExecutors.newFixed(LOCAL_TRANSPORT_THREAD_NAME_PREFIX, workerCount, queueSize, threadFactory); this.namedWriteableRegistry = namedWriteableRegistry;",
    "conflict": "this.workers = EsExecutors.newFixed(workerCount, queueSize, threadFactory); this.namedWriteableRegistry = namedWriteableRegistry;"
  },
  {
    "devdecision": "Version 1",
    "id": 77474,
    "v2": "import org.elasticsearch.index.query.BoolQueryBuilder; import org.elasticsearch.index.query.CommonTermsQueryBuilder.Operator; import org.elasticsearch.index.query.MatchQueryBuilder;",
    "resolution": "import org.elasticsearch.index.query.*;",
    "conflict": "import org.elasticsearch.index.query.*;"
  },
  {
    "devdecision": "Combination",
    "id": 77478,
    "v2": "AliasMetaData aliasMetaData = ((AliasOrIndex.Alias) internalCluster().clusterService().state().metaData().getAliasAndIndexLookup().get(\"alias1\")).getFirstAliasMetaData(); assertThat(aliasMetaData.getFilter().toString(), equalTo(\"{\\\"term\\\":{\\\"name\\\":\\\"bar\\\"}}\"));",
    "resolution": "AliasMetaData aliasMetaData = ((AliasOrIndex.Alias) internalCluster().clusterService().state().metaData().getAliasAndIndexLookup().get(\"alias1\")).getFirstAliasMetaData(); assertThat(aliasMetaData.getFilter().toString(), equalTo(\"{\\\"term\\\":{\\\"name\\\":{\\\"value\\\":\\\"bar\\\",\\\"boost\\\":1.0}}}\"));",
    "conflict": "AliasMetaData aliasMetaData = internalCluster().clusterService().state().metaData().aliases().get(\"alias1\").get(\"test\"); assertThat(aliasMetaData.getFilter().toString(), equalTo(\"{\\\"term\\\":{\\\"name\\\":{\\\"value\\\":\\\"bar\\\",\\\"boost\\\":1.0}}}\"));"
  },
  {
    "devdecision": "Version 1",
    "id": 77479,
    "v2": "import org.elasticsearch.index.mapper.MappedFieldType; import org.elasticsearch.index.mapper.internal.FieldNamesFieldMapper; import org.elasticsearch.index.mapper.object.ObjectMapper;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77484,
    "v2": "String value = null; float boost = 1.0f;",
    "resolution": "String value = null; float boost = AbstractQueryBuilder.DEFAULT_BOOST;",
    "conflict": "Object value = null; float boost = AbstractQueryBuilder.DEFAULT_BOOST;"
  },
  {
    "devdecision": "Combination",
    "id": 77485,
    "v2": "String value = null; float boost = 1.0f;",
    "resolution": "String value = null; float boost = AbstractQueryBuilder.DEFAULT_BOOST;",
    "conflict": "Object value = null; float boost = AbstractQueryBuilder.DEFAULT_BOOST;"
  },
  {
    "devdecision": "Combination",
    "id": 77488,
    "v2": "Object value = null; float boost = 1.0f;",
    "resolution": "Object value = null; float boost = AbstractQueryBuilder.DEFAULT_BOOST;",
    "conflict": "String value = null; float boost = AbstractQueryBuilder.DEFAULT_BOOST;"
  },
  {
    "devdecision": "Combination",
    "id": 77489,
    "v2": "private int flags = RegexpQueryParser.DEFAULT_FLAGS_VALUE; private float boost = -1;",
    "resolution": "private int flags = RegexpQueryParser.DEFAULT_FLAGS_VALUE;",
    "conflict": "private int flags = -1;"
  },
  {
    "devdecision": "Combination",
    "id": 77490,
    "v2": "float boost = 1.0f; int flagsValue = DEFAULT_FLAGS_VALUE;",
    "resolution": "float boost = AbstractQueryBuilder.DEFAULT_BOOST; int flagsValue = DEFAULT_FLAGS_VALUE;",
    "conflict": "float boost = AbstractQueryBuilder.DEFAULT_BOOST; int flagsValue = -1;"
  },
  {
    "devdecision": "Combination",
    "id": 77492,
    "v2": "if (parseContext.parseFieldMatcher().match(currentFieldName, INNER_QUERY_FIELD)) { filter = parseContext.parseInnerFilter();",
    "resolution": "if (parseContext.parseFieldMatcher().match(currentFieldName, INNER_QUERY_FIELD)) { query = parseContext.parseInnerFilterToQueryBuilder();",
    "conflict": "if (INNER_QUERY_FIELD.match(currentFieldName)) { query = parseContext.parseInnerFilterToQueryBuilder();"
  },
  {
    "devdecision": "Combination",
    "id": 77493,
    "v2": "if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) { query = parseContext.parseInnerFilter();",
    "resolution": "if (parseContext.parseFieldMatcher().match(currentFieldName, QUERY_FIELD)) { query = parseContext.parseInnerFilterToQueryBuilder();",
    "conflict": "if (QUERY_FIELD.match(currentFieldName)) { query = parseContext.parseInnerFilterToQueryBuilder();"
  },
  {
    "devdecision": "Version 1",
    "id": 77494,
    "v2": "import org.elasticsearch.index.mapper.MappedFieldType; import org.elasticsearch.index.mapper.core.DateFieldMapper; import org.joda.time.DateTimeZone;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77495,
    "v2": "} else if (!scriptParameterParser.token(currentFieldName, token, parser, parseContext.parseFieldMatcher())) {",
    "resolution": "} else if (\"boost\".equals(currentFieldName)) { boost = parser.floatValue(); } else if (!scriptParameterParser.token(currentFieldName, token, parser, parseContext.parseFieldMatcher())) {",
    "conflict": "} else if (\"boost\".equals(currentFieldName)) { boost = parser.floatValue(); } else if (!scriptParameterParser.token(currentFieldName, token, parser)) {"
  },
  {
    "devdecision": "Manual",
    "id": 77496,
    "v2": "streamIn.setVersion(version);",
    "resolution": "streamIn = new FilterStreamInput(streamIn, namedWriteableRegistry); streamIn.setVersion(version);",
    "conflict": "wrappedStream = new FilterStreamInput(wrappedStream, namedWriteableRegistry); wrappedStream.setVersion(version);"
  },
  {
    "devdecision": "Combination",
    "id": 77498,
    "v2": "import org.elasticsearch.common.io.stream.BytesStreamOutput; import org.elasticsearch.common.io.stream.StreamInput;",
    "resolution": "import org.elasticsearch.common.io.stream.*; import org.elasticsearch.common.io.stream.BytesStreamOutput; import org.elasticsearch.common.io.stream.StreamInput;",
    "conflict": "import org.elasticsearch.common.io.ThrowableObjectInputStream; import org.elasticsearch.common.io.stream.*;"
  },
  {
    "devdecision": "Combination",
    "id": 77499,
    "v2": "",
    "resolution": "import org.elasticsearch.common.io.stream.FilterStreamInput; import org.elasticsearch.common.io.stream.NamedWriteableRegistry;",
    "conflict": "import org.elasticsearch.common.io.ThrowableObjectInputStream; import org.elasticsearch.common.io.stream.FilterStreamInput; import org.elasticsearch.common.io.stream.NamedWriteableRegistry;"
  },
  {
    "devdecision": "Combination",
    "id": 77504,
    "v2": "threadPool, indexingService, indexSettingsService.indexSettings(), warmer, store, deletionPolicy, mergePolicyConfig.getMergePolicy(), mergeSchedulerConfig, mapperAnalyzer, similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy(), translogConfig);",
    "resolution": "threadPool, indexingService, indexSettingsService.indexSettings(), warmer, store, deletionPolicy, mergePolicyConfig.getMergePolicy(), mergeSchedulerConfig, mapperService.indexAnalyzer(), similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy(), translogConfig);",
    "conflict": "threadPool, indexingService, indexSettingsService, warmer, store, deletionPolicy, mergePolicyConfig.getMergePolicy(), mergeSchedulerConfig, mapperService.indexAnalyzer(), similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy(), translogConfig);"
  },
  {
    "devdecision": "Manual",
    "id": 77505,
    "v2": "public class GeoShapeQueryBuilder extends QueryBuilder implements BoostableQueryBuilder<GeoShapeQueryBuilder> {",
    "resolution": "public class GeoShapeQueryBuilder extends AbstractQueryBuilder<GeoShapeQueryBuilder> implements BoostableQueryBuilder<GeoShapeQueryBuilder> {  public static final String NAME = \"geo_shape\";",
    "conflict": "public class GeoShapeQueryBuilder extends AbstractQueryBuilder<GeoShapeQueryBuilder> {  public static final String NAME = \"geo_shape\";"
  },
  {
    "devdecision": "Version 2",
    "id": 77506,
    "v2": "private float boost = -1;",
    "resolution": "private float boost = -1;",
    "conflict": "static final GeoShapeQueryBuilder PROTOTYPE = new GeoShapeQueryBuilder(null, null);"
  },
  {
    "devdecision": "Manual",
    "id": 77507,
    "v2": "public class TermsQueryBuilder extends QueryBuilder implements BoostableQueryBuilder<TermsQueryBuilder> {",
    "resolution": "public class TermsQueryBuilder extends AbstractQueryBuilder<TermsQueryBuilder> implements BoostableQueryBuilder<TermsQueryBuilder> {  public static final String NAME = \"terms\";",
    "conflict": "public class TermsQueryBuilder extends AbstractQueryBuilder<TermsQueryBuilder> {  public static final String NAME = \"terms\";"
  },
  {
    "devdecision": "Combination",
    "id": 77510,
    "v2": "public class SimpleQueryStringBuilder extends QueryBuilder implements BoostableQueryBuilder<SimpleQueryStringBuilder> {",
    "resolution": "public class SimpleQueryStringBuilder extends QueryBuilder implements BoostableQueryBuilder<SimpleQueryStringBuilder> { public static final String NAME = \"simple_query_string\";",
    "conflict": "public class SimpleQueryStringBuilder extends QueryBuilder { public static final String NAME = \"simple_query_string\";"
  },
  {
    "devdecision": "Version 1",
    "id": 77511,
    "v2": "",
    "resolution": "@Override public String queryId() { return NAME; }",
    "conflict": "@Override public String queryId() { return NAME; }"
  },
  {
    "devdecision": "Combination",
    "id": 77518,
    "v2": "builder.startObject(PrefixQueryParser.NAME); if (boost == -1 && rewrite == null && queryName == null) {",
    "resolution": "builder.startObject(NAME); if (boost == -1 && rewrite == null && queryName == null) {",
    "conflict": "builder.startObject(NAME); if (boost == -1 && rewrite == null && queryName != null) {"
  },
  {
    "devdecision": "Combination",
    "id": 77520,
    "v2": "builder.startObject(WildcardQueryParser.NAME); if (boost == -1 && rewrite == null && queryName == null) {",
    "resolution": "builder.startObject(NAME); if (boost == -1 && rewrite == null && queryName == null) {",
    "conflict": "builder.startObject(NAME); if (boost == -1 && rewrite == null && queryName != null) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 77524,
    "v2": "private final TimeValue defaultConnectionTimeout; private final TimeValue defaultReadTimeout;",
    "resolution": "private final TimeValue defaultConnectionTimeout; private final TimeValue defaultReadTimeout;private final Environment env;",
    "conflict": "private final Environment env;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77525,
    "v2": "defaultConnectionTimeout = settings.getAsTime(\"watcher.http.default_connection_timeout\", TimeValue.timeValueSeconds(10)); defaultReadTimeout = settings.getAsTime(\"watcher.http.default_read_timeout\", TimeValue.timeValueSeconds(10));",
    "resolution": "defaultConnectionTimeout = settings.getAsTime(\"watcher.http.default_connection_timeout\", TimeValue.timeValueSeconds(10)); defaultReadTimeout = settings.getAsTime(\"watcher.http.default_read_timeout\", TimeValue.timeValueSeconds(10));this.env = env;",
    "conflict": "this.env = env;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77527,
    "v2": "import org.elasticsearch.common.bytes.BytesReference; import org.elasticsearch.watcher.client.WatchSourceBuilder;",
    "resolution": "import org.elasticsearch.common.bytes.BytesReference; import org.elasticsearch.watcher.client.WatchSourceBuilder;import org.elasticsearch.client.ElasticsearchClient;",
    "conflict": "import org.elasticsearch.client.ElasticsearchClient;"
  },
  {
    "devdecision": "Version 1",
    "id": 77528,
    "v2": "@Override protected void doExecute(final ActionListener<ExecuteWatchResponse> listener) { new WatcherClient(client).executeWatch(request, listener); }",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77535,
    "v2": "import org.elasticsearch.action.ActionRequestValidationException; import org.elasticsearch.common.joda.time.DateTime;",
    "resolution": "import org.elasticsearch.action.ActionRequestValidationException;",
    "conflict": "import org.joda.time.DateTime;"
  },
  {
    "devdecision": "Version 1",
    "id": 77540,
    "v2": "import org.elasticsearch.index.mapper.MappedFieldType; import org.elasticsearch.index.mapper.MapperService; import org.elasticsearch.index.mapper.internal.FieldNamesFieldMapper; import org.elasticsearch.index.mapper.object.ObjectMapper;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77545,
    "v2": "import org.elasticsearch.index.mapper.FieldMapper; import org.elasticsearch.index.mapper.MappedFieldType; import org.elasticsearch.index.mapper.core.DateFieldMapper; import org.joda.time.DateTimeZone;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 77555,
    "v2": "* <p/> * If the index does need upgrade it returns the index metadata unchanged, otherwise it returns a modified index metadata. If index cannot be",
    "resolution": "* * <p/> * If the index does not need upgrade it returns the index metadata unchanged, otherwise it returns a modified index metadata. If index",
    "conflict": "* * If the index does not need upgrade it returns the index metadata unchanged, otherwise it returns a modified index metadata. If index cannot be"
  },
  {
    "devdecision": "Manual",
    "id": 77557,
    "v2": "import org.elasticsearch.cluster.metadata.SnapshotMetaData; import org.elasticsearch.cluster.routing.allocation.decider.EnableAllocationDecider;",
    "resolution": "import org.elasticsearch.cluster.metadata.MetaData;",
    "conflict": "import org.elasticsearch.cluster.metadata.MetaData;"
  },
  {
    "devdecision": "Combination",
    "id": 77567,
    "v2": "assertTrue(documentMapper.timestampFieldMapper().hasDocValues()); documentMapper = indexService.mapperService().parse(\"type\", new CompressedXContent(documentMapper.mappingSource().string()), true);",
    "resolution": "assertTrue(documentMapper.timestampFieldMapper().fieldType().hasDocValues()); documentMapper = indexService.mapperService().parse(\"type\", new CompressedXContent(documentMapper.mappingSource().string()), true);",
    "conflict": "assertTrue(documentMapper.timestampFieldMapper().fieldType().hasDocValues()); documentMapper = indexService.mapperService().parse(\"type\", new CompressedString(documentMapper.mappingSource().string()), true);"
  },
  {
    "devdecision": "Combination",
    "id": 77570,
    "v2": "import static org.elasticsearch.index.query.HasChildQueryParser.joinUtilHelper;  public class HasParentQueryParser implements QueryParser {",
    "resolution": "import static org.elasticsearch.index.query.HasChildQueryParser.joinUtilHelper;  public class HasParentQueryParser extends BaseQueryParserTemp {",
    "conflict": "public class HasParentQueryParser extends BaseQueryParserTemp {"
  },
  {
    "devdecision": "Manual",
    "id": 77572,
    "v2": "public ScriptQueryBuilder(Script script) {",
    "resolution": "static final ScriptQueryBuilder PROTOTYPE = new ScriptQueryBuilder((Script) null);  public ScriptQueryBuilder(Script script) {",
    "conflict": "static final ScriptQueryBuilder PROTOTYPE = new ScriptQueryBuilder(null);  public ScriptQueryBuilder(String script) {"
  },
  {
    "devdecision": "Combination",
    "id": 77579,
    "v2": "import static org.elasticsearch.common.settings.ImmutableSettings.settingsBuilder; import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;",
    "resolution": "import static org.elasticsearch.common.settings.Settings.settingsBuilder; import static org.elasticsearch.index.query.QueryBuilders.matchAllQuery;",
    "conflict": "import static org.elasticsearch.common.settings.Settings.settingsBuilder;"
  },
  {
    "devdecision": "Combination",
    "id": 77583,
    "v2": "Settings settings = Settings.builder() .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000)",
    "resolution": "Settings settings = Settings.builder() .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)",
    "conflict": "Settings settings = ImmutableSettings.builder() .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)"
  },
  {
    "devdecision": "Combination",
    "id": 77584,
    "v2": "settings = Settings.builder() .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000)",
    "resolution": "settings = Settings.builder() .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)",
    "conflict": "settings = ImmutableSettings.builder() .put(EngineConfig.INDEX_GC_DELETES_SETTING, 1000, TimeUnit.MILLISECONDS)"
  },
  {
    "devdecision": "Combination",
    "id": 77585,
    "v2": "assertAcked(prepareCreate(\"test-idx\", 2, Settings.builder() .put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put(\"refresh_interval\", 10)));",
    "resolution": "assertAcked(prepareCreate(\"test-idx\", 2, Settings.builder() .put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put(\"refresh_interval\", 10, TimeUnit.SECONDS)));",
    "conflict": "assertAcked(prepareCreate(\"test-idx\", 2, ImmutableSettings.builder() .put(indexSettings()).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put(\"refresh_interval\", 10, TimeUnit.SECONDS)));"
  },
  {
    "devdecision": "Combination",
    "id": 77586,
    "v2": "assertAcked(prepareCreate(\"test-idx\", 2, Settings.builder() .put(SETTING_NUMBER_OF_SHARDS, numShards.numPrimaries).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put(\"refresh_interval\", 5)));",
    "resolution": "assertAcked(prepareCreate(\"test-idx\", 2, Settings.builder() .put(SETTING_NUMBER_OF_SHARDS, numShards.numPrimaries).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put(\"refresh_interval\", 5, TimeUnit.SECONDS)));",
    "conflict": "assertAcked(prepareCreate(\"test-idx\", 2, ImmutableSettings.builder() .put(SETTING_NUMBER_OF_SHARDS, numShards.numPrimaries).put(SETTING_NUMBER_OF_REPLICAS, between(0, 1)).put(\"refresh_interval\", 5, TimeUnit.SECONDS)));"
  },
  {
    "devdecision": "Combination",
    "id": 77589,
    "v2": "import org.elasticsearch.index.mapper.FieldMapper; import org.elasticsearch.index.mapper.core.DateFieldMapper; import org.joda.time.DateTimeZone;",
    "resolution": "import org.elasticsearch.index.mapper.FieldMapper; import org.elasticsearch.index.mapper.core.DateFieldMapper;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 77595,
    "v2": "if (indexWriter.hasUncommittedChanges() || force) {",
    "resolution": "if (indexWriter.hasUncommittedChanges() || force) {",
    "conflict": "if (flushNeeded || force) { flushNeeded = false;"
  },
  {
    "devdecision": "Combination",
    "id": 77601,
    "v2": "updateBufferSize(EngineConfig.INACTIVE_SHARD_INDEXING_BUFFER, TranslogConfig.INACTIVE_SHARD_TRANSLOG_BUFFER);",
    "resolution": "updateBufferSize(EngineConfig.INACTIVE_SHARD_INDEXING_BUFFER, TranslogConfig.INACTIVE_SHARD_TRANSLOG_BUFFER); indicesLifecycle.onShardInactive(this);",
    "conflict": "updateBufferSize(EngineConfig.INACTIVE_SHARD_INDEXING_BUFFER, Translog.INACTIVE_SHARD_TRANSLOG_BUFFER); indicesLifecycle.onShardInactive(this);"
  },
  {
    "devdecision": "Version 2",
    "id": 77602,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.common.util.concurrent.ConcurrentCollections; import org.elasticsearch.gateway.CorruptStateException; import org.elasticsearch.index.IndexService;"
  },
  {
    "devdecision": "Combination",
    "id": 77604,
    "v2": "this.searcherFactory = new SearchFactory(logger, isClosed, engineConfig); final Long committedTranslogId;",
    "resolution": "this.searcherFactory = new SearchFactory(logger, isClosed, engineConfig); final Translog.TranslogGeneration translogGeneration;",
    "conflict": "this.searcherFactory = new SearchFactory(engineConfig); final Translog.TranslogGeneration translogGeneration;"
  },
  {
    "devdecision": "Combination",
    "id": 77605,
    "v2": "BytesStreamInput header = new BytesStreamInput(headerRef); fieldMap = new ObjectLongHashMap<>();",
    "resolution": "StreamInput header = StreamInput.wrap(headerRef.toBytesArray()); fieldMap = new ObjectLongHashMap<>();",
    "conflict": "StreamInput header = StreamInput.wrap(headerRef.toBytesArray()); fieldMap = new ObjectLongOpenHashMap<>();"
  },
  {
    "devdecision": "Combination",
    "id": 77606,
    "v2": "@Deprecated public class FilteredQueryParser implements QueryParser {",
    "resolution": "@Deprecated public class FilteredQueryParser extends BaseQueryParserTemp {",
    "conflict": "public class FilteredQueryParser extends BaseQueryParserTemp {"
  },
  {
    "devdecision": "Combination",
    "id": 77624,
    "v2": "@Deprecated public class TopChildrenQueryParser implements QueryParser {",
    "resolution": "@Deprecated public class TopChildrenQueryParser extends BaseQueryParserTemp {",
    "conflict": "public class TopChildrenQueryParser extends BaseQueryParserTemp {"
  },
  {
    "devdecision": "Version 2",
    "id": 77626,
    "v2": "",
    "resolution": "",
    "conflict": "// translog id is not in the metadata - fix this inconsistency some code relies on this and old indices might not have it. writer.setCommitData(Collections.singletonMap(Translog.TRANSLOG_ID_KEY, Long.toString(nextTranslogId))); commitIndexWriter(writer);"
  },
  {
    "devdecision": "Version 2",
    "id": 77629,
    "v2": "",
    "resolution": "",
    "conflict": "* <p/> * {@code InternalEngine#recover} is responsible for snapshotting the index * and releasing the snapshot once all 3 phases of recovery are complete"
  },
  {
    "devdecision": "Version 1",
    "id": 77640,
    "v2": "",
    "resolution": "if (wipeTranslogs) { final Translog translog = engine().getTranslog(); translog.markCommitted(translog.currentId()); }",
    "conflict": "if (wipeTranslogs) { final Translog translog = engine().getTranslog(); translog.markCommitted(translog.currentId()); }"
  },
  {
    "devdecision": "Concatenation",
    "id": 77643,
    "v2": "private final QueryCache filterCache; private final QueryCachingPolicy filterCachingPolicy;",
    "resolution": "private final QueryCache filterCache; private final QueryCachingPolicy filterCachingPolicy;private final boolean ignoreUnknownTranslog;",
    "conflict": "private final boolean ignoreUnknownTranslog;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77645,
    "v2": "this.filterCache = filterCache; this.filterCachingPolicy = filterCachingPolicy;",
    "resolution": "this.filterCache = filterCache; this.filterCachingPolicy = filterCachingPolicy;this.ignoreUnknownTranslog = indexSettings.getAsBoolean(INDEX_IGNORE_UNKNOWN_TRANSLOG, false);",
    "conflict": "this.ignoreUnknownTranslog = indexSettings.getAsBoolean(INDEX_IGNORE_UNKNOWN_TRANSLOG, false);"
  },
  {
    "devdecision": "Combination",
    "id": 77646,
    "v2": "threadPool, indexingService, indexSettingsService, warmer, store, deletionPolicy, translog, mergePolicyProvider, mergeScheduler, mapperAnalyzer, similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy());",
    "resolution": "threadPool, indexingService, indexSettingsService, warmer, store, deletionPolicy, mergePolicyProvider, mergeScheduler, mapperAnalyzer, similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer, indexCache.filter(), indexCache.filterPolicy());",
    "conflict": "threadPool, indexingService, indexSettingsService, warmer, store, deletionPolicy, mergePolicyProvider, mergeScheduler, mapperAnalyzer, similarityService.similarity(), codecService, failedEngineListener, translogRecoveryPerformer);"
  },
  {
    "devdecision": "Version 2",
    "id": 77647,
    "v2": "}, new TranslogHandler(shardId.index().getName()), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy());",
    "resolution": "}, new TranslogHandler(shardId.index().getName()), IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy());",
    "conflict": "}, new TranslogHandler(shardId.index().getName()));"
  },
  {
    "devdecision": "Manual",
    "id": 77648,
    "v2": "}, null, IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy());",
    "resolution": "}}, null, IndexSearcher.getDefaultQueryCache(), IndexSearcher.getDefaultQueryCachingPolicy());",
    "conflict": "}, null);"
  },
  {
    "devdecision": "Combination",
    "id": 77650,
    "v2": "",
    "resolution": "import org.apache.lucene.index.Term; import org.apache.lucene.search.BooleanQuery; import org.apache.lucene.search.similarities.Similarity; import org.elasticsearch.common.xcontent.XContentBuilder;",
    "conflict": "import org.apache.lucene.index.Term; import org.apache.lucene.search.BooleanQuery; import org.apache.lucene.search.similarities.Similarity; import org.elasticsearch.ElasticsearchIllegalArgumentException;"
  },
  {
    "devdecision": "Combination",
    "id": 77652,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.reducers.Reducer; import org.elasticsearch.search.aggregations.reducers.ReducerFactory;",
    "conflict": "import org.elasticsearch.ElasticsearchIllegalArgumentException; import org.elasticsearch.ElasticsearchIllegalStateException; import org.elasticsearch.search.aggregations.reducers.Reducer; import org.elasticsearch.search.aggregations.reducers.ReducerFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 77653,
    "v2": "throw new IllegalArgumentException(\"Two sibling aggregations cannot have the same name: [\" + factory.name + \"]\");",
    "resolution": "throw new IllegalArgumentException(\"Two sibling aggregations cannot have the same name: [\" + factory.name + \"]\");",
    "conflict": "throw new ElasticsearchIllegalArgumentException(\"Two sibling aggregations cannot have the same name: [\" + factory.name + \"]\");"
  },
  {
    "devdecision": "Version 1",
    "id": 77659,
    "v2": "throw new IllegalArgumentException(\"Cannot find an aggregation named [\" + aggName + \"] in [\" + containingAggName + \"]\");",
    "resolution": "throw new InvalidAggregationPathException(\"Cannot find an aggregation named [\" + aggName + \"] in [\" + containingAggName + \"]\");",
    "conflict": "throw new InvalidAggregationPathException(\"Cannot find an aggregation named [\" + aggName + \"] in [\" + containingAggName + \"]\");"
  },
  {
    "devdecision": "Manual",
    "id": 77660,
    "v2": "public NestedAggregator(String name, AggregatorFactories factories, ObjectMapper objectMapper, AggregationContext aggregationContext, Aggregator parentAggregator, Map<String, Object> metaData, QueryCachingPolicy filterCachingPolicy) throws IOException { super(name, factories, aggregationContext, parentAggregator, metaData);",
    "resolution": "public NestedAggregator(String name, AggregatorFactories factories, ObjectMapper objectMapper, AggregationContext aggregationContext, Aggregator parentAggregator, List<Reducer> reducers, Map<String, Object> metaData, QueryCachingPolicy filterCachingPolicy) throws IOException { super(name, factories, aggregationContext, parentAggregator, reducers, metaData);",
    "conflict": "public NestedAggregator(String name, AggregatorFactories factories, ObjectMapper objectMapper, AggregationContext aggregationContext, Aggregator parentAggregator, List<Reducer> reducers, Map<String, Object> metaData, FilterCachingPolicy filterCachingPolicy) throws IOException { super(name, factories, aggregationContext, parentAggregator, reducers, metaData);"
  },
  {
    "devdecision": "Combination",
    "id": 77664,
    "v2": "",
    "resolution": "import org.apache.lucene.index.Term; import org.apache.lucene.search.BooleanQuery; import org.apache.lucene.search.similarities.Similarity;",
    "conflict": "import org.apache.lucene.index.Term; import org.apache.lucene.search.BooleanQuery; import org.apache.lucene.search.similarities.Similarity; import org.elasticsearch.ElasticsearchIllegalArgumentException;"
  },
  {
    "devdecision": "Version 2",
    "id": 77665,
    "v2": "throw new IllegalArgumentException(\"\");",
    "resolution": "throw new IllegalArgumentException(\"\");",
    "conflict": "throw new ElasticsearchIllegalArgumentException(\"\");"
  },
  {
    "devdecision": "Combination",
    "id": 77666,
    "v2": "public class HasParentQueryParser implements QueryParser {",
    "resolution": "public class HasParentQueryParser extends BaseQueryParserTemp {",
    "conflict": "import static org.elasticsearch.index.query.QueryParserUtils.ensureNotDeleteByQuery;  public class HasParentQueryParser extends BaseQueryParserTemp {"
  },
  {
    "devdecision": "Version 2",
    "id": 77671,
    "v2": "import org.apache.lucene.queries.TermsQuery;",
    "resolution": "import org.apache.lucene.queries.TermsQuery;",
    "conflict": "import org.apache.lucene.queries.TermsFilter; import org.apache.lucene.search.ConstantScoreQuery;"
  },
  {
    "devdecision": "Version 1",
    "id": 77678,
    "v2": "",
    "resolution": "import com.google.common.collect.ImmutableList; import com.google.common.collect.Lists;",
    "conflict": "import com.google.common.collect.ImmutableList; import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Version 2",
    "id": 77680,
    "v2": "reducedAggregations.add(first.reduce(aggregations, context));",
    "resolution": "reducedAggregations.add(first.reduce(aggregations, context));",
    "conflict": "reducedAggregations.add(first.reduce(new InternalAggregation.ReduceContext(aggregations, context.bigArrays(), context .scriptService())));"
  },
  {
    "devdecision": "Manual",
    "id": 77681,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) { long docCount = 0L; List<InternalAggregations> subAggregationsList = new ArrayList<>(aggregations.size());",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77682,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) { List<List<Bucket>> bucketsList = null;",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77683,
    "v2": "public InternalGeoHashGrid reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalGeoHashGrid doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {  LongObjectPagedHashMap<List<Bucket>> buckets = null;",
    "conflict": "public InternalGeoHashGrid doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77684,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) { List<B> reducedBuckets = reduceBuckets(aggregations, reduceContext);",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) { List<B> reducedBuckets = reduceBuckets(aggregations, reduceContext);",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { List<B> reducedBuckets = reduceBuckets(reduceContext);"
  },
  {
    "devdecision": "Manual",
    "id": 77687,
    "v2": "public WithHash(String name, AggregatorFactories factories, ValuesSource.Bytes.WithOrdinals.FieldData valuesSource, BucketCountThresholds bucketCountThresholds, IncludeExclude.OrdinalsFilter includeExclude, AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggFactory, Map<String, Object> metaData) throws IOException { super(name, factories, valuesSource, bucketCountThresholds, includeExclude, aggregationContext, parent, termsAggFactory, metaData);",
    "resolution": "public WithHash(String name, AggregatorFactories factories, ValuesSource.Bytes.WithOrdinals.FieldData valuesSource, BucketCountThresholds bucketCountThresholds, IncludeExclude.OrdinalsFilter includeExclude, AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggFactory, List<Reducer> reducers, Map<String, Object> metaData) throws IOException { super(name, factories, valuesSource, bucketCountThresholds, includeExclude, aggregationContext, parent, termsAggFactory, reducers, metaData);",
    "conflict": "public WithHash(String name, AggregatorFactories factories, ValuesSource.Bytes.WithOrdinals.FieldData valuesSource, BucketCountThresholds bucketCountThresholds, IncludeExclude includeExclude, AggregationContext aggregationContext, Aggregator parent, SignificantTermsAggregatorFactory termsAggFactory, List<Reducer> reducers, Map<String, Object> metaData) throws IOException { super(name, factories, valuesSource, bucketCountThresholds, includeExclude, aggregationContext, parent, termsAggFactory, reducers, metaData);"
  },
  {
    "devdecision": "Manual",
    "id": 77688,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77691,
    "v2": "final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(); return new GlobalOrdinalsSignificantTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, metaData);",
    "resolution": "final IncludeExclude.OrdinalsFilter filter = includeExclude == null ? null : includeExclude.convertToOrdinalsFilter(); return new GlobalOrdinalsSignificantTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, filter, aggregationContext, parent, termsAggregatorFactory, reducers, metaData);",
    "conflict": "return new GlobalOrdinalsSignificantTermsAggregator(name, factories, (ValuesSource.Bytes.WithOrdinals.FieldData) valuesSource, bucketCountThresholds, includeExclude, aggregationContext, parent, termsAggregatorFactory, reducers, metaData);"
  },
  {
    "devdecision": "Manual",
    "id": 77696,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77697,
    "v2": "IncludeExclude.StringFilter includeExclude, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError, Map<String, Object> metaData) throws IOException {",
    "resolution": "IncludeExclude.StringFilter includeExclude, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {",
    "conflict": "IncludeExclude includeExclude, AggregationContext aggregationContext, Aggregator parent, SubAggCollectionMode collectionMode, boolean showTermDocCountError, List<Reducer> reducers, Map<String, Object> metaData) throws IOException {"
  },
  {
    "devdecision": "Manual",
    "id": 77701,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) { for (InternalAggregation agg : aggregations) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) { for (InternalAggregation agg : aggregations) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { for (InternalAggregation agg : reduceContext.aggregations()) {"
  },
  {
    "devdecision": "Manual",
    "id": 77703,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77707,
    "v2": "public AbstractInternalPercentiles reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public AbstractInternalPercentiles doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public AbstractInternalPercentiles doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77714,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) { List<InternalAggregation> aggregations = reduceContext.aggregations();"
  },
  {
    "devdecision": "Manual",
    "id": 77722,
    "v2": "return new InternalTopHits(name, from, size, reducedTopDocs, new InternalSearchHits(hits, reducedTopDocs.totalHits, reducedTopDocs.getMaxScore()));",
    "resolution": "return new InternalTopHits(name, from, size, reducedTopDocs, new InternalSearchHits(hits, reducedTopDocs.totalHits, reducedTopDocs.getMaxScore()), reducers(), getMetaData());",
    "conflict": "return new InternalTopHits(name, new InternalSearchHits(hits, reducedTopDocs.totalHits, reducedTopDocs.getMaxScore()), reducers(), getMetaData());"
  },
  {
    "devdecision": "Manual",
    "id": 77723,
    "v2": "topHits = new InternalTopHits(name, subSearchContext.from(), subSearchContext.size(), topDocs, fetchResult.hits());",
    "resolution": "topHits = new InternalTopHits(name, subSearchContext.from(), subSearchContext.size(), topDocs, fetchResult.hits(), reducers(), metaData());",
    "conflict": "return new InternalTopHits(name, subSearchContext.from(), subSearchContext.size(), topDocs, fetchResult.hits(), reducers(), metaData());"
  },
  {
    "devdecision": "Manual",
    "id": 77727,
    "v2": "AmazonS3 client(String region, String account, String key);  AmazonS3 client(String region, String account, String key, Integer maxRetries);",
    "resolution": "AmazonS3 client(String endpoint, String region, String account, String key);",
    "conflict": "AmazonS3 client(String endpoint, String region, String account, String key);"
  },
  {
    "devdecision": "Version 2",
    "id": 77729,
    "v2": "Integer maxRetries = repositorySettings.settings().getAsInt(\"max_retries\", componentSettings.getAsInt(\"max_retries\", 3));",
    "resolution": "Integer maxRetries = repositorySettings.settings().getAsInt(\"max_retries\", componentSettings.getAsInt(\"max_retries\", 3));",
    "conflict": "logger.debug(\"using bucket [{}], region [{}], endpoint [{}], chunk_size [{}], server_side_encryption [{}], buffer_size [{}]\", bucket, region, endpoint, chunkSize, serverSideEncryption, bufferSize); blobStore = new S3BlobStore(settings, s3Service.client(endpoint, region, repositorySettings.settings().get(\"access_key\"), repositorySettings.settings().get(\"secret_key\")), bucket, region, serverSideEncryption, bufferSize);"
  },
  {
    "devdecision": "Manual",
    "id": 77733,
    "v2": "",
    "resolution": "import org.elasticsearch.common.settings.ImmutableSettings; import org.elasticsearch.common.settings.Settings; import org.elasticsearch.common.unit.TimeValue;",
    "conflict": "import org.elasticsearch.common.settings.ImmutableSettings; import org.elasticsearch.common.settings.Settings; import org.elasticsearch.common.unit.TimeValue;"
  },
  {
    "devdecision": "Version 1",
    "id": 77735,
    "v2": "if (!client.admin().indices().prepareExists(ALERT_INDEX).execute().actionGet().isExists()) { createAlertsIndex(); }",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77736,
    "v2": "",
    "resolution": "public boolean updateAlert(Alert alert) { return updateAlert(alert, false); }",
    "conflict": "public boolean updateAlert(Alert alert) { return updateAlert(alert, false); }"
  },
  {
    "devdecision": "Version 1",
    "id": 77740,
    "v2": "DateTime fireTime = new DateTime(DateTimeZone.UTC); DateTime scheduledFireTime = new DateTime(DateTimeZone.UTC);",
    "resolution": "DateTime fireTime = new DateTime(DateTimeZone.UTC); DateTime scheduledFireTime = new DateTime(DateTimeZone.UTC);",
    "conflict": "DateTime fireTime = new DateTime(DateTimeZone.UTC); DateTime scheduledFireTime = new DateTime(DateTimeZone.UTC);"
  }
]
}