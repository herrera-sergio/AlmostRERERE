{"conflicts":[
  {
    "devdecision": "Version 2",
    "id": 74428,
    "v2": "",
    "resolution": "",
    "conflict": "import static org.elasticsearch.xpack.sql.proto.Protocol.FIELD_MULTI_VALUE_LENIENCY_NAME; import static org.elasticsearch.xpack.sql.proto.Protocol.VERSION_NAME;"
  },
  {
    "devdecision": "Version 2",
    "id": 74436,
    "v2": "private final Set<String> shadowedFields;",
    "resolution": "private final Set<String> shadowedFields;",
    "conflict": "private final Set<String> shadowedPaths;"
  },
  {
    "devdecision": "Version 2",
    "id": 74437,
    "v2": "this.shadowedFields = in.shadowedFields;",
    "resolution": "this.shadowedFields = in.shadowedFields;",
    "conflict": "this.shadowedPaths = in.shadowedPaths;"
  },
  {
    "devdecision": "Manual",
    "id": 74450,
    "v2": "private static Script parseScript(String name, MappingParserContext parserContext, Object scriptObject) {",
    "resolution": "static Script parseScript(String name, MappingParserContext parserContext, Object scriptObject) {",
    "conflict": "static Script parseScript(String name, Mapper.TypeParser.ParserContext parserContext, Object scriptObject) {"
  },
  {
    "devdecision": "Version 1",
    "id": 74451,
    "v2": "protected abstract RuntimeField createRuntimeField(MappingParserContext parserContext);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 74464,
    "v2": "",
    "resolution": "",
    "conflict": "import static java.util.Collections.emptyList; import static java.util.stream.Collectors.toList;"
  },
  {
    "devdecision": "Version 1",
    "id": 74476,
    "v2": "",
    "resolution": "import org.elasticsearch.search.lookup.SearchLookup; import org.elasticsearch.search.lookup.SourceLookup;",
    "conflict": "import org.elasticsearch.search.lookup.SearchLookup; import org.elasticsearch.search.lookup.SourceLookup;"
  },
  {
    "devdecision": "Version 1",
    "id": 74477,
    "v2": "",
    "resolution": "import org.elasticsearch.search.lookup.SearchLookup; import org.elasticsearch.search.lookup.SourceLookup;",
    "conflict": "import org.elasticsearch.search.lookup.SearchLookup; import org.elasticsearch.search.lookup.SourceLookup;"
  },
  {
    "devdecision": "Manual",
    "id": 74478,
    "v2": "null, mapperService, type -> typeParser, olderVersion, null, null);",
    "resolution": "null, mapperService, type -> typeParser, olderVersion, null, null, null);",
    "conflict": "null, null, type -> typeParser, olderVersion, null, null, null);"
  },
  {
    "devdecision": "Manual",
    "id": 74479,
    "v2": "null, mapperService, type -> typeParser, version, null, null);",
    "resolution": "null, mapperService, type -> typeParser, version, null, null, null);",
    "conflict": "null, null, type -> typeParser, version, null, null, null);"
  },
  {
    "devdecision": "Concatenation",
    "id": 74482,
    "v2": "this.systemIndices = systemIndices;",
    "resolution": "this.scriptService = scriptService;        this.systemIndices = systemIndices;",
    "conflict": "this.scriptService = scriptService;"
  },
  {
    "devdecision": "Combination",
    "id": 74483,
    "v2": "",
    "resolution": "import java.util.function.Supplier;",
    "conflict": "import java.util.Map; import java.util.function.Supplier;"
  },
  {
    "devdecision": "Combination",
    "id": 74484,
    "v2": "",
    "resolution": "import java.util.function.Supplier;",
    "conflict": "import java.util.Map; import java.util.function.Supplier;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74493,
    "v2": "import org.elasticsearch.search.lookup.SourceLookup;",
    "resolution": "import org.elasticsearch.search.lookup.SourceLookup;import org.elasticsearch.search.lookup.SearchLookup;",
    "conflict": "import org.elasticsearch.search.lookup.SearchLookup;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74494,
    "v2": "import org.elasticsearch.search.lookup.SourceLookup;",
    "resolution": "import org.elasticsearch.search.lookup.SourceLookup;import org.elasticsearch.search.lookup.SearchLookup;",
    "conflict": "import org.elasticsearch.search.lookup.SearchLookup;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74496,
    "v2": "import org.elasticsearch.ExceptionsHelper;",
    "resolution": "import org.elasticsearch.Version;import org.elasticsearch.ExceptionsHelper;",
    "conflict": "import org.elasticsearch.Version;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74510,
    "v2": "case IDP_ORIGIN:",
    "resolution": "case REINDEX_ORIGIN:            case IDP_ORIGIN:",
    "conflict": "case REINDEX_ORIGIN:"
  },
  {
    "devdecision": "Combination",
    "id": 74514,
    "v2": "",
    "resolution": "import org.elasticsearch.rest.BytesRestResponse;",
    "conflict": "import org.elasticsearch.rest.BytesRestResponse; import org.elasticsearch.rest.RestController;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74518,
    "v2": "public static final String ASYNC_SEARCH_ORIGIN = \"async_search\";",
    "resolution": "public static final String ASYNC_SEARCH_ORIGIN = \"async_search\";    public static final String REINDEX_ORIGIN = \"reindex\";",
    "conflict": "public static final String REINDEX_ORIGIN = \"reindex\";"
  },
  {
    "devdecision": "Concatenation",
    "id": 74520,
    "v2": "import org.elasticsearch.indices.SystemIndexDescriptor;",
    "resolution": "import org.elasticsearch.indices.SystemIndexDescriptor;import org.elasticsearch.index.reindex.ReindexHeaders;",
    "conflict": "import org.elasticsearch.index.reindex.ReindexHeaders;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74525,
    "v2": "case ENRICH_ORIGIN:",
    "resolution": "case REINDEX_ORIGIN:            case ENRICH_ORIGIN:",
    "conflict": "case REINDEX_ORIGIN:"
  },
  {
    "devdecision": "Manual",
    "id": 74526,
    "v2": "return preCheck(index);",
    "resolution": "return preCheck(shardId, index);",
    "conflict": "return preCheck(shardId, index, index.type());"
  },
  {
    "devdecision": "Combination",
    "id": 74529,
    "v2": "",
    "resolution": "import org.elasticsearch.Version;",
    "conflict": "import org.apache.logging.log4j.LogManager; import org.elasticsearch.Version;"
  },
  {
    "devdecision": "Version 1",
    "id": 74542,
    "v2": "l.onResponse(new SimulatePipelineResponse(request.getPipeline().getId(),",
    "resolution": "listener.onResponse(new SimulatePipelineResponse(request.getPipeline().getId(),",
    "conflict": "listener.onResponse(new SimulatePipelineResponse(request.getPipeline().getId(),"
  },
  {
    "devdecision": "Version 2",
    "id": 74548,
    "v2": "* This is useful for components that are used by ingest processors, so that they have the opportunity to update",
    "resolution": "* This is useful for components that are used by ingest processors, so that they have the opportunity to update",
    "conflict": "* This is useful for components that are used by ingest processors, so that have the opportunity to update"
  },
  {
    "devdecision": "Version 2",
    "id": 74553,
    "v2": "* This is useful for components that are used by ingest processors, so that they have the opportunity to update",
    "resolution": "* This is useful for components that are used by ingest processors, so that they have the opportunity to update",
    "conflict": "* This is useful for components that are used by ingest processors, so that have the opportunity to update"
  },
  {
    "devdecision": "Version 2",
    "id": 74558,
    "v2": "* Provides access to the node client",
    "resolution": "* Provides access to the node client",
    "conflict": "* Provides access to the client"
  },
  {
    "devdecision": "Version 2",
    "id": 74560,
    "v2": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "resolution": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "conflict": "null, Collections.singletonList(DUMMY_PLUGIN), null);"
  },
  {
    "devdecision": "Version 2",
    "id": 74561,
    "v2": "null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN), client));",
    "resolution": "null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN), client));",
    "conflict": "null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN), null));"
  },
  {
    "devdecision": "Version 2",
    "id": 74562,
    "v2": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "resolution": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "conflict": "null, Collections.singletonList(DUMMY_PLUGIN), null);"
  },
  {
    "devdecision": "Version 2",
    "id": 74565,
    "v2": "* Provides access to the node client",
    "resolution": "* Provides access to the node client",
    "conflict": "* Provides access to the client"
  },
  {
    "devdecision": "Version 2",
    "id": 74567,
    "v2": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "resolution": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "conflict": "null, Collections.singletonList(DUMMY_PLUGIN), null);"
  },
  {
    "devdecision": "Version 2",
    "id": 74568,
    "v2": "null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN), client));",
    "resolution": "null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN), client));",
    "conflict": "null, Arrays.asList(DUMMY_PLUGIN, DUMMY_PLUGIN), null));"
  },
  {
    "devdecision": "Version 2",
    "id": 74569,
    "v2": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "resolution": "null, Collections.singletonList(DUMMY_PLUGIN), client);",
    "conflict": "null, Collections.singletonList(DUMMY_PLUGIN), null);"
  },
  {
    "devdecision": "Combination",
    "id": 74581,
    "v2": "",
    "resolution": "import org.elasticsearch.common.xcontent.XContentBuilder;",
    "conflict": "import org.elasticsearch.common.settings.Settings; import org.elasticsearch.common.xcontent.XContentBuilder;"
  },
  {
    "devdecision": "Version 2",
    "id": 74590,
    "v2": "import org.elasticsearch.ingest.DropProcessor; import org.elasticsearch.ingest.Processor;",
    "resolution": "import org.elasticsearch.ingest.DropProcessor; import org.elasticsearch.ingest.Processor;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 74597,
    "v2": "import org.elasticsearch.ingest.DropProcessor; import org.elasticsearch.ingest.Processor;",
    "resolution": "import org.elasticsearch.ingest.DropProcessor; import org.elasticsearch.ingest.Processor;",
    "conflict": ""
  },
  {
    "devdecision": "None",
    "id": 74632,
    "v2": "import org.elasticsearch.cluster.node.DiscoveryNodes;",
    "resolution": "import org.elasticsearch.common.io.stream.StreamOutput;",
    "conflict": "import org.elasticsearch.common.component.AbstractComponent;"
  },
  {
    "devdecision": "None",
    "id": 74633,
    "v2": "import org.elasticsearch.common.transport.TransportAddress;",
    "resolution": "import org.elasticsearch.common.unit.TimeValue;",
    "conflict": "import org.elasticsearch.common.component.AbstractComponent;"
  },
  {
    "devdecision": "Version 1",
    "id": 74636,
    "v2": "import org.apache.logging.log4j.message.ParameterizedMessage;",
    "resolution": "import org.elasticsearch.Version;",
    "conflict": "import org.elasticsearch.Version;"
  },
  {
    "devdecision": "None",
    "id": 74641,
    "v2": "import org.elasticsearch.common.transport.TransportAddress;",
    "resolution": "import org.elasticsearch.common.unit.TimeValue;",
    "conflict": "import org.elasticsearch.common.settings.Settings;"
  },
  {
    "devdecision": "Combination",
    "id": 74652,
    "v2": "",
    "resolution": "import org.elasticsearch.common.collect.Tuple;",
    "conflict": "import org.elasticsearch.common.collect.Tuple; import org.elasticsearch.common.logging.Loggers;"
  },
  {
    "devdecision": "Combination",
    "id": 74659,
    "v2": "",
    "resolution": "clearILMState();",
    "conflict": "clearRollupState();         clearILMState();"
  },
  {
    "devdecision": "Combination",
    "id": 74662,
    "v2": "",
    "resolution": "clearILMState();",
    "conflict": "clearRollupState();         clearILMState();"
  },
  {
    "devdecision": "Version 1",
    "id": 74671,
    "v2": "import org.elasticsearch.discovery.Discovery.FailedToCommitClusterStateException;",
    "resolution": "import org.elasticsearch.cluster.coordination.FailedToCommitClusterStateException;",
    "conflict": "import org.elasticsearch.cluster.coordination.FailedToCommitClusterStateException;"
  },
  {
    "devdecision": "Version 2",
    "id": 74673,
    "v2": "return \"processing of [\" + requestId + \"][\" + action + \"]: \" + request;",
    "resolution": "return \"processing of [\" + requestId + \"][\" + action + \"]: \" + request;",
    "conflict": "return \"processing of [\" + action + \"][\" + requestId + \"]: \" + request;"
  },
  {
    "devdecision": "Version 2",
    "id": 74674,
    "v2": "return \"timeout handler for [\" + requestId + \"][\" + action + \"]\";",
    "resolution": "return \"timeout handler for [\" + requestId + \"][\" + action + \"]\";",
    "conflict": "return \"TimeoutHandler for [\" + action + \"][\" + requestId + \"]\";"
  },
  {
    "devdecision": "Version 2",
    "id": 74676,
    "v2": "return \"delivery of failure response to [\" + requestId + \"][\" + action + \"]: \" + exception;",
    "resolution": "return \"delivery of failure response to [\" + requestId + \"][\" + action + \"]: \" + exception;",
    "conflict": "return \"delivery of exception response to [\" + action + \"][\" + requestId + \"]: \" + exception;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74686,
    "v2": "private final RollupClient rollupClient = new RollupClient(this);",
    "resolution": "private final RollupClient rollupClient = new RollupClient(this);    private final IndexLifecycleClient ilmClient = new IndexLifecycleClient(this);",
    "conflict": "private final IndexLifecycleClient ilmClient = new IndexLifecycleClient(this);"
  },
  {
    "devdecision": "Concatenation",
    "id": 74687,
    "v2": "import org.elasticsearch.xpack.core.ccr.client.CcrClient;",
    "resolution": "import org.elasticsearch.xpack.core.indexlifecycle.client.ILMClient;import org.elasticsearch.xpack.core.ccr.client.CcrClient;",
    "conflict": "import org.elasticsearch.xpack.core.indexlifecycle.client.ILMClient;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74688,
    "v2": "import org.elasticsearch.xpack.core.ccr.client.CcrClient;",
    "resolution": "import org.elasticsearch.xpack.core.indexlifecycle.client.ILMClient;import org.elasticsearch.xpack.core.ccr.client.CcrClient;",
    "conflict": "import org.elasticsearch.xpack.core.indexlifecycle.client.ILMClient;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74691,
    "v2": "import org.elasticsearch.cluster.action.shard.ShardStateAction.StartedShardEntry;",
    "resolution": "import org.elasticsearch.cluster.coordination.JoinTaskExecutor;import org.elasticsearch.cluster.action.shard.ShardStateAction.StartedShardEntry;",
    "conflict": "import org.elasticsearch.cluster.coordination.JoinTaskExecutor;"
  },
  {
    "devdecision": "Version 2",
    "id": 74692,
    "v2": "connectionManager.setDefaultNodeConnectedBehavior((cm, discoveryNode) -> nodeConnected(discoveryNode));",
    "resolution": "connectionManager.setDefaultNodeConnectedBehavior((cm, discoveryNode) -> nodeConnected(discoveryNode));",
    "conflict": "connectionManager.setDefaultNodeConnectedBehavior((cm, discoveryNode) -> true);"
  },
  {
    "devdecision": "Manual",
    "id": 74710,
    "v2": "apiName.startsWith(\"security.\") == false) {",
    "resolution": "apiName.startsWith(\"security.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) { apiNotFound.add(apiName);",
    "conflict": "apiName.startsWith(\"index_lifecycle.\") == false) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 74711,
    "v2": "private final SecurityClient securityClient = new SecurityClient(this);",
    "resolution": "private final IndexLifecycleClient ilmClient = new IndexLifecycleClient(this);    private final SecurityClient securityClient = new SecurityClient(this);",
    "conflict": "private final IndexLifecycleClient ilmClient = new IndexLifecycleClient(this);"
  },
  {
    "devdecision": "Manual",
    "id": 74714,
    "v2": "apiName.startsWith(\"security.\") == false) {",
    "resolution": "apiName.startsWith(\"security.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) { apiNotFound.add(apiName);",
    "conflict": "apiName.startsWith(\"index_lifecycle.\") == false) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74716,
    "v2": "public static final String SOFT_DELETES_FIELD = \"__soft_deletes\";",
    "resolution": "public static final String SOFT_DELETES_FIELD = \"__soft_deletes\";",
    "conflict": "public static final String SOFT_DELETE_FIELD = \"__soft_delete\";"
  },
  {
    "devdecision": "Version 2",
    "id": 74717,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74718,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74719,
    "v2": "// TODO: Can we avoid calculate numDocs by using SegmentReader#getSegmentInfo with LUCENE-8458?",
    "resolution": "// TODO: Can we avoid calculate numDocs by using SegmentReader#getSegmentInfo with LUCENE-8458?",
    "conflict": "// TODO: Avoid recalculate numDocs everytime."
  },
  {
    "devdecision": "Version 2",
    "id": 74721,
    "v2": "final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD);",
    "resolution": "final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD);",
    "conflict": "final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETE_FIELD);"
  },
  {
    "devdecision": "Version 2",
    "id": 74722,
    "v2": "Setting.boolSetting(\"index.soft_deletes.enabled\", false, Property.IndexScope, Property.Final);",
    "resolution": "Setting.boolSetting(\"index.soft_deletes.enabled\", false, Property.IndexScope, Property.Final);",
    "conflict": "Setting.boolSetting(\"index.soft_deletes.enabled\", true, Property.IndexScope, Property.Final);"
  },
  {
    "devdecision": "Version 1",
    "id": 74724,
    "v2": "import org.elasticsearch.index.mapper.SeqNoFieldMapper; import org.elasticsearch.index.mapper.SourceFieldMapper;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 74725,
    "v2": "private final NumericDocValuesField softDeletesField = Lucene.newSoftDeletesField();",
    "resolution": "private final NumericDocValuesField softDeletesField = Lucene.newSoftDeletesField();",
    "conflict": "private final NumericDocValuesField softDeleteField = Lucene.newSoftDeleteField();"
  },
  {
    "devdecision": "Version 2",
    "id": 74726,
    "v2": "return newChangesSnapshot(source, mapperService, Math.max(0, startingSeqNo), Long.MAX_VALUE, false);",
    "resolution": "return newChangesSnapshot(source, mapperService, Math.max(0, startingSeqNo), Long.MAX_VALUE, false);",
    "conflict": "return newLuceneChangesSnapshot(source, mapperService, Math.max(0, startingSeqNo), Long.MAX_VALUE, false);"
  },
  {
    "devdecision": "Version 2",
    "id": 74732,
    "v2": "doc.add(softDeletesField);",
    "resolution": "doc.add(softDeletesField);",
    "conflict": "doc.add(softDeleteField);"
  },
  {
    "devdecision": "Version 2",
    "id": 74733,
    "v2": "final NoOpResult noOpResult = failure != null ? new NoOpResult(getPrimaryTerm(), noOp.seqNo(), failure) : new NoOpResult(getPrimaryTerm(), noOp.seqNo());",
    "resolution": "final NoOpResult noOpResult = failure != null ? new NoOpResult(getPrimaryTerm(), noOp.seqNo(), failure) : new NoOpResult(getPrimaryTerm(), noOp.seqNo());",
    "conflict": "NoOpResult noOpResult = failure != null ? new NoOpResult(getPrimaryTerm(), noOp.seqNo(), failure) : new NoOpResult(getPrimaryTerm(), noOp.seqNo());"
  },
  {
    "devdecision": "Version 2",
    "id": 74742,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74743,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74746,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74747,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74751,
    "v2": "doc.add(Lucene.newSoftDeletesField());",
    "resolution": "doc.add(Lucene.newSoftDeletesField());",
    "conflict": "doc.add(Lucene.newSoftDeleteField());"
  },
  {
    "devdecision": "Version 2",
    "id": 74752,
    "v2": "EngineConfig noopEngineConfig = copy(engine.config(), new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD,",
    "resolution": "EngineConfig noopEngineConfig = copy(engine.config(), new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD,",
    "conflict": "EngineConfig noopEngineConfig = copy(engine.config(), new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETE_FIELD,"
  },
  {
    "devdecision": "Version 2",
    "id": 74753,
    "v2": "Lucene.SOFT_DELETES_FIELD, () -> new MatchAllDocsQuery(), engine.config().getMergePolicy());",
    "resolution": "Lucene.SOFT_DELETES_FIELD, () -> new MatchAllDocsQuery(), engine.config().getMergePolicy());",
    "conflict": "Lucene.SOFT_DELETE_FIELD, () -> new MatchAllDocsQuery(), engine.config().getMergePolicy());"
  },
  {
    "devdecision": "Version 2",
    "id": 74756,
    "v2": "indexShard = newStartedShard(randomBoolean(),",
    "resolution": "indexShard = newStartedShard(randomBoolean(),",
    "conflict": "indexShard = newStartedShard("
  },
  {
    "devdecision": "Version 2",
    "id": 74757,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74759,
    "v2": "try (Translog.Snapshot snapshot = engine.newChangesSnapshot(\"test\", mapper, 0, maxSeqNo, false)) {",
    "resolution": "try (Translog.Snapshot snapshot = engine.newChangesSnapshot(\"test\", mapper, 0, maxSeqNo, false)) {",
    "conflict": "try (Translog.Snapshot snapshot = engine.newLuceneChangesSnapshot(\"test\", mapper, 0, maxSeqNo, false)) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74760,
    "v2": "return newShard(primary, Settings.EMPTY);",
    "resolution": "return newShard(primary, Settings.EMPTY);",
    "conflict": "return newShard(primary, Settings.EMPTY, new InternalEngineFactory());"
  },
  {
    "devdecision": "Version 1",
    "id": 74762,
    "v2": "randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))",
    "resolution": "randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))",
    "conflict": "randomBoolean() ? IndexSettings.INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING.get(Settings.EMPTY) : between(0, 1000))"
  },
  {
    "devdecision": "Version 2",
    "id": 74769,
    "v2": "public static final String SOFT_DELETES_FIELD = \"__soft_deletes\";",
    "resolution": "public static final String SOFT_DELETES_FIELD = \"__soft_deletes\";",
    "conflict": "public static final String SOFT_DELETE_FIELD = \"__soft_delete\";"
  },
  {
    "devdecision": "Version 2",
    "id": 74770,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74771,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74772,
    "v2": "// TODO: Can we avoid calculate numDocs by using SegmentReader#getSegmentInfo with LUCENE-8458?",
    "resolution": "// TODO: Can we avoid calculate numDocs by using SegmentReader#getSegmentInfo with LUCENE-8458?",
    "conflict": "// TODO: Avoid recalculate numDocs everytime."
  },
  {
    "devdecision": "Version 2",
    "id": 74774,
    "v2": "final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD);",
    "resolution": "final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETES_FIELD);",
    "conflict": "final NumericDocValues softDeletesDV = reader.getNumericDocValues(Lucene.SOFT_DELETE_FIELD);"
  },
  {
    "devdecision": "Version 2",
    "id": 74775,
    "v2": "Setting.boolSetting(\"index.soft_deletes.enabled\", false, Property.IndexScope, Property.Final);",
    "resolution": "Setting.boolSetting(\"index.soft_deletes.enabled\", false, Property.IndexScope, Property.Final);",
    "conflict": "Setting.boolSetting(\"index.soft_deletes.enabled\", true, Property.IndexScope, Property.Final);"
  },
  {
    "devdecision": "Version 1",
    "id": 74776,
    "v2": "softDeleteEnabled = version.onOrAfter(Version.V_7_0_0_alpha1) && scopedSettings.get(INDEX_SOFT_DELETES_SETTING);",
    "resolution": "softDeleteEnabled = version.onOrAfter(Version.V_6_5_0) && scopedSettings.get(INDEX_SOFT_DELETES_SETTING);",
    "conflict": "softDeleteEnabled = version.onOrAfter(Version.V_6_5_0) && scopedSettings.get(INDEX_SOFT_DELETES_SETTING);"
  },
  {
    "devdecision": "Version 2",
    "id": 74778,
    "v2": "private final NumericDocValuesField softDeletesField = Lucene.newSoftDeletesField();",
    "resolution": "private final NumericDocValuesField softDeletesField = Lucene.newSoftDeletesField();",
    "conflict": "private final NumericDocValuesField softDeleteField = Lucene.newSoftDeleteField();"
  },
  {
    "devdecision": "Version 2",
    "id": 74779,
    "v2": "return newChangesSnapshot(source, mapperService, Math.max(0, startingSeqNo), Long.MAX_VALUE, false);",
    "resolution": "return newChangesSnapshot(source, mapperService, Math.max(0, startingSeqNo), Long.MAX_VALUE, false);",
    "conflict": "return newLuceneChangesSnapshot(source, mapperService, Math.max(0, startingSeqNo), Long.MAX_VALUE, false);"
  },
  {
    "devdecision": "Version 2",
    "id": 74785,
    "v2": "}",
    "resolution": "}",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 74787,
    "v2": "doc.add(softDeletesField);",
    "resolution": "doc.add(softDeletesField);",
    "conflict": "doc.add(softDeleteField);"
  },
  {
    "devdecision": "Version 2",
    "id": 74794,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74795,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74797,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74798,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74802,
    "v2": "doc.add(Lucene.newSoftDeletesField());",
    "resolution": "doc.add(Lucene.newSoftDeletesField());",
    "conflict": "doc.add(Lucene.newSoftDeleteField());"
  },
  {
    "devdecision": "Version 2",
    "id": 74803,
    "v2": "EngineConfig noopEngineConfig = copy(engine.config(), new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD,",
    "resolution": "EngineConfig noopEngineConfig = copy(engine.config(), new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETES_FIELD,",
    "conflict": "EngineConfig noopEngineConfig = copy(engine.config(), new SoftDeletesRetentionMergePolicy(Lucene.SOFT_DELETE_FIELD,"
  },
  {
    "devdecision": "Version 2",
    "id": 74804,
    "v2": "Lucene.SOFT_DELETES_FIELD, () -> new MatchAllDocsQuery(), engine.config().getMergePolicy());",
    "resolution": "Lucene.SOFT_DELETES_FIELD, () -> new MatchAllDocsQuery(), engine.config().getMergePolicy());",
    "conflict": "Lucene.SOFT_DELETE_FIELD, () -> new MatchAllDocsQuery(), engine.config().getMergePolicy());"
  },
  {
    "devdecision": "Version 2",
    "id": 74806,
    "v2": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "resolution": ".setSoftDeletesField(Lucene.SOFT_DELETES_FIELD)",
    "conflict": ".setSoftDeletesField(Lucene.SOFT_DELETE_FIELD)"
  },
  {
    "devdecision": "Version 2",
    "id": 74807,
    "v2": "try (Translog.Snapshot snapshot = engine.newChangesSnapshot(\"test\", mapper, 0, maxSeqNo, false)) {",
    "resolution": "try (Translog.Snapshot snapshot = engine.newChangesSnapshot(\"test\", mapper, 0, maxSeqNo, false)) {",
    "conflict": "try (Translog.Snapshot snapshot = engine.newLuceneChangesSnapshot(\"test\", mapper, 0, maxSeqNo, false)) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74820,
    "v2": "ClusterState.Builder builder = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.get(settings));",
    "resolution": "ClusterState.Builder builder = ClusterState.builder(ClusterName.CLUSTER_NAME_SETTING.get(settings));",
    "conflict": "ClusterState.Builder builder = clusterService.getClusterApplierService().newClusterStateBuilder();"
  },
  {
    "devdecision": "Manual",
    "id": 74832,
    "v2": "apiName.startsWith(\"migration.\") == false) {",
    "resolution": "apiName.startsWith(\"migration.\") == false && apiName.startsWith(\"index_lifecycle.\") == false) {",
    "conflict": "apiName.startsWith(\"index_lifecycle.\") == false) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 74834,
    "v2": "private final MachineLearningClient machineLearningClient = new MachineLearningClient(this);",
    "resolution": "private final IndexLifecycleClient ilmClient = new IndexLifecycleClient(this);    private final MachineLearningClient machineLearningClient = new MachineLearningClient(this);",
    "conflict": "private final IndexLifecycleClient ilmClient = new IndexLifecycleClient(this);"
  },
  {
    "devdecision": "Manual",
    "id": 74842,
    "v2": "indexSort, this::runTranslogRecovery, circuitBreakerService, replicationTracker, () -> operationPrimaryTerm);",
    "resolution": "indexSort, this::runTranslogRecovery, circuitBreakerService, replicationTracker, () -> operationPrimaryTerm, tombstoneDocSupplier());",
    "conflict": "indexSort, this::runTranslogRecovery, circuitBreakerService, replicationTracker, this::getPrimaryTerm, tombstoneDocSupplier());"
  },
  {
    "devdecision": "Manual",
    "id": 74845,
    "v2": "indexSort, this::runTranslogRecovery, circuitBreakerService, replicationTracker, () -> operationPrimaryTerm);",
    "resolution": "indexSort, this::runTranslogRecovery, circuitBreakerService, replicationTracker, () -> operationPrimaryTerm, tombstoneDocSupplier());",
    "conflict": "indexSort, this::runTranslogRecovery, circuitBreakerService, replicationTracker, this::getPrimaryTerm, tombstoneDocSupplier());"
  },
  {
    "devdecision": "Concatenation",
    "id": 74848,
    "v2": "scopedSettings.addSettingsUpdateConsumer(DEFAULT_PIPELINE, this::setDefaultPipeline);",
    "resolution": "scopedSettings.addSettingsUpdateConsumer(INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING, this::setSoftDeleteRetentionOperations);        scopedSettings.addSettingsUpdateConsumer(DEFAULT_PIPELINE, this::setDefaultPipeline);",
    "conflict": "scopedSettings.addSettingsUpdateConsumer(INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING, this::setSoftDeleteRetentionOperations);"
  },
  {
    "devdecision": "Version 1",
    "id": 74852,
    "v2": "import org.elasticsearch.protocol.xpack.watcher.DeleteWatchRequest; import org.elasticsearch.protocol.xpack.watcher.PutWatchRequest;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 74853,
    "v2": "import org.elasticsearch.protocol.xpack.watcher.DeleteWatchRequest;",
    "resolution": "import org.elasticsearch.protocol.xpack.watcher.DeleteWatchRequest;import org.elasticsearch.protocol.xpack.indexlifecycle.SetIndexLifecyclePolicyRequest;",
    "conflict": "import org.elasticsearch.protocol.xpack.indexlifecycle.SetIndexLifecyclePolicyRequest;"
  },
  {
    "devdecision": "Version 2",
    "id": 74865,
    "v2": "",
    "resolution": "",
    "conflict": "// TODO: A follow-up to make resync using soft-deletes             Translog.Snapshot snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);"
  },
  {
    "devdecision": "Version 1",
    "id": 74869,
    "v2": "",
    "resolution": "import org.elasticsearch.index.MapperTestUtils; import org.elasticsearch.index.VersionType;",
    "conflict": "import org.elasticsearch.index.MapperTestUtils; import org.elasticsearch.index.VersionType;"
  },
  {
    "devdecision": "Manual",
    "id": 74871,
    "v2": "return shard.applyDeleteOperationOnReplica(shard.seqNoStats().getMaxSeqNo() + 1, 0L, type, id);",
    "resolution": "result = shard.applyDeleteOperationOnReplica(shard.seqNoStats().getMaxSeqNo() + 1, 0L, type, id);",
    "conflict": "result = shard.applyDeleteOperationOnReplica(shard.seqNoStats().getMaxSeqNo() + 1, 0L, type, id, VersionType.EXTERNAL);"
  },
  {
    "devdecision": "Version 2",
    "id": 74872,
    "v2": "",
    "resolution": "",
    "conflict": "// TODO: A follow-up to make resync using soft-deletes             Translog.Snapshot snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);"
  },
  {
    "devdecision": "Concatenation",
    "id": 74875,
    "v2": "settings.add(PASSWORD_HASHING_ALGORITHM);",
    "resolution": "settings.add(INDEX_LIFECYCLE_ENABLED);        settings.add(PASSWORD_HASHING_ALGORITHM);",
    "conflict": "settings.add(INDEX_LIFECYCLE_ENABLED);"
  },
  {
    "devdecision": "Concatenation",
    "id": 74878,
    "v2": "import org.elasticsearch.index.seqno.SeqNoStats;",
    "resolution": "import org.elasticsearch.index.seqno.SeqNoStats;import org.elasticsearch.index.mapper.VersionFieldMapper;",
    "conflict": "import org.elasticsearch.index.mapper.VersionFieldMapper;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74880,
    "v2": "import org.elasticsearch.index.seqno.SeqNoStats;",
    "resolution": "import org.elasticsearch.index.seqno.SeqNoStats;import org.elasticsearch.index.mapper.VersionFieldMapper;",
    "conflict": "import org.elasticsearch.index.mapper.VersionFieldMapper;"
  },
  {
    "devdecision": "Version 1",
    "id": 74885,
    "v2": "",
    "resolution": "import java.util.stream.Stream;",
    "conflict": "import java.util.stream.Stream;"
  },
  {
    "devdecision": "Combination",
    "id": 74886,
    "v2": "",
    "resolution": "import org.elasticsearch.common.lucene.Lucene;",
    "conflict": "import org.apache.lucene.store.OutputStreamDataOutput; import org.elasticsearch.common.lucene.Lucene;"
  },
  {
    "devdecision": "Version 1",
    "id": 74889,
    "v2": "",
    "resolution": "import java.util.stream.Stream;",
    "conflict": "import java.util.stream.Stream;"
  },
  {
    "devdecision": "Combination",
    "id": 74890,
    "v2": "",
    "resolution": "import org.elasticsearch.common.lucene.Lucene;",
    "conflict": "import org.apache.lucene.store.OutputStreamDataOutput; import org.elasticsearch.common.lucene.Lucene;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74891,
    "v2": "scopedSettings.addSettingsUpdateConsumer(MAX_REGEX_LENGTH_SETTING, this::setMaxRegexLength);",
    "resolution": "scopedSettings.addSettingsUpdateConsumer(MAX_REGEX_LENGTH_SETTING, this::setMaxRegexLength);        scopedSettings.addSettingsUpdateConsumer(INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING, this::setSoftDeleteRetentionOperations);",
    "conflict": "scopedSettings.addSettingsUpdateConsumer(INDEX_SOFT_DELETES_RETENTION_OPERATIONS_SETTING, this::setSoftDeleteRetentionOperations);"
  },
  {
    "devdecision": "Version 2",
    "id": 74892,
    "v2": "private final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders;",
    "resolution": "private final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders;",
    "conflict": "private final Collection<EnginePlugin> enginePlugins;"
  },
  {
    "devdecision": "Version 2",
    "id": 74893,
    "v2": "Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders) {",
    "resolution": "Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders) {",
    "conflict": "Collection<EnginePlugin> enginePlugins) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74894,
    "v2": "this.engineFactoryProviders = engineFactoryProviders;",
    "resolution": "this.engineFactoryProviders = engineFactoryProviders;",
    "conflict": "this.enginePlugins = enginePlugins;"
  },
  {
    "devdecision": "Version 1",
    "id": 74905,
    "v2": "return newShard(routing, indexMetaData, null, new InternalEngineFactory(), () -> {}, listeners);",
    "resolution": "return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners);",
    "conflict": "return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners);"
  },
  {
    "devdecision": "Version 2",
    "id": 74906,
    "v2": "emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap());",
    "resolution": "emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap());",
    "conflict": "emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap());"
  },
  {
    "devdecision": "Version 2",
    "id": 74907,
    "v2": "private final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders;",
    "resolution": "private final Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders;",
    "conflict": "private final Collection<EnginePlugin> enginePlugins;"
  },
  {
    "devdecision": "Version 2",
    "id": 74908,
    "v2": "Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders) {",
    "resolution": "Collection<Function<IndexSettings, Optional<EngineFactory>>> engineFactoryProviders) {",
    "conflict": "Collection<EnginePlugin> enginePlugins) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74909,
    "v2": "this.engineFactoryProviders = engineFactoryProviders;",
    "resolution": "this.engineFactoryProviders = engineFactoryProviders;",
    "conflict": "this.enginePlugins = enginePlugins;"
  },
  {
    "devdecision": "Version 1",
    "id": 74920,
    "v2": "return newShard(routing, indexMetaData, null, new InternalEngineFactory(), () -> {}, listeners);",
    "resolution": "return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners);",
    "conflict": "return newShard(routing, indexMetaData, null, engineFactory, () -> {}, listeners);"
  },
  {
    "devdecision": "Version 2",
    "id": 74921,
    "v2": "emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap());",
    "resolution": "emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap());",
    "conflict": "emptyMap(), emptyMap(), emptyMap(), emptyMap(), emptyMap());"
  },
  {
    "devdecision": "Version 1",
    "id": 74922,
    "v2": "",
    "resolution": "import org.apache.lucene.index.SegmentInfos; import org.elasticsearch.Assertions;",
    "conflict": "import org.apache.lucene.index.SegmentInfos; import org.elasticsearch.Assertions;"
  },
  {
    "devdecision": "Version 2",
    "id": 74950,
    "v2": "Translog.Snapshot snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);",
    "resolution": "Translog.Snapshot snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);",
    "conflict": "Translog.Snapshot snapshot = indexShard.getTranslog().newSnapshotFrom(startingSeqNo);"
  },
  {
    "devdecision": "Version 2",
    "id": 74951,
    "v2": "try(Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "resolution": "try(Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "conflict": "try(Translog.Snapshot snapshot = translog.newSnapshotFrom(startingSeqNo)) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74952,
    "v2": "try (Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "resolution": "try (Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "conflict": "try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFrom(startingSeqNo)) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 74954,
    "v2": "import org.elasticsearch.index.engine.EngineTestCase;",
    "resolution": "import org.elasticsearch.index.engine.InternalEngineFactory;import org.elasticsearch.index.engine.EngineTestCase;",
    "conflict": "import org.elasticsearch.index.engine.InternalEngineFactory;"
  },
  {
    "devdecision": "Version 2",
    "id": 74956,
    "v2": "Translog.Snapshot snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);",
    "resolution": "Translog.Snapshot snapshot = indexShard.newTranslogSnapshotFromMinSeqNo(startingSeqNo);",
    "conflict": "Translog.Snapshot snapshot = indexShard.getTranslog().newSnapshotFrom(startingSeqNo);"
  },
  {
    "devdecision": "Version 2",
    "id": 74957,
    "v2": "try(Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "resolution": "try(Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "conflict": "try(Translog.Snapshot snapshot = translog.newSnapshotFrom(startingSeqNo)) {"
  },
  {
    "devdecision": "Version 2",
    "id": 74958,
    "v2": "try (Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "resolution": "try (Translog.Snapshot snapshot = shard.newTranslogSnapshotFromMinSeqNo(startingSeqNo)) {",
    "conflict": "try (Translog.Snapshot snapshot = shard.getTranslog().newSnapshotFrom(startingSeqNo)) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 74960,
    "v2": "import org.elasticsearch.index.engine.EngineTestCase;",
    "resolution": "import org.elasticsearch.index.engine.InternalEngineFactory;import org.elasticsearch.index.engine.EngineTestCase;",
    "conflict": "import org.elasticsearch.index.engine.InternalEngineFactory;"
  },
  {
    "devdecision": "Manual",
    "id": 74961,
    "v2": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, null, () -> {}, EMPTY_EVENT_LISTENER);",
    "resolution": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {}, EMPTY_EVENT_LISTENER);",
    "conflict": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 74962,
    "v2": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, null, () -> {}, EMPTY_EVENT_LISTENER);",
    "resolution": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {}, EMPTY_EVENT_LISTENER);",
    "conflict": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 74964,
    "v2": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, null, () -> {}, EMPTY_EVENT_LISTENER);",
    "resolution": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {}, EMPTY_EVENT_LISTENER);",
    "conflict": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 74965,
    "v2": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, null, () -> {}, EMPTY_EVENT_LISTENER);",
    "resolution": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {}, EMPTY_EVENT_LISTENER);",
    "conflict": "shard.shardPath(), shard.indexSettings().getIndexMetaData(), wrapper, new InternalEngineFactory(), () -> {});"
  },
  {
    "devdecision": "Version 2",
    "id": 74967,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.index.similarity.BM25SimilarityProvider; import org.elasticsearch.index.similarity.SimilarityProvider;"
  },
  {
    "devdecision": "Version 2",
    "id": 74972,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.index.similarity.BM25SimilarityProvider; import org.elasticsearch.index.similarity.SimilarityProvider;"
  },
  {
    "devdecision": "Concatenation",
    "id": 74992,
    "v2": "settings.add(USER_SETTING);",
    "resolution": "settings.add(USER_SETTING);        settings.add(SQL_ENABLED);",
    "conflict": "settings.add(SQL_ENABLED);"
  },
  {
    "devdecision": "Version 2",
    "id": 74993,
    "v2": "ClusterHealthRequest request = new ClusterHealthRequest(SECURITY_INDEX_NAME);",
    "resolution": "ClusterHealthRequest request = new ClusterHealthRequest(SECURITY_INDEX_NAME);",
    "conflict": "TransportRequest request = new ClusterHealthRequest(SecurityLifecycleService.SECURITY_INDEX_NAME);"
  },
  {
    "devdecision": "Manual",
    "id": 75026,
    "v2": "throw denial(authentication, action, request, permission.names());",
    "resolution": "throw denial(authentication, action, request, permission.names(), null);",
    "conflict": "throw denial(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75029,
    "v2": "grant(authentication, action, request, permission.names());",
    "resolution": "grant(authentication, action, request, permission.names(), null);",
    "conflict": "grant(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75030,
    "v2": "throw denial(authentication, action, request, permission.names());",
    "resolution": "throw denial(authentication, action, request, permission.names(), null);",
    "conflict": "throw denial(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75031,
    "v2": "throw denial(authentication, action, request, permission.names());",
    "resolution": "throw denial(authentication, action, request, permission.names(), null);",
    "conflict": "throw denial(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75032,
    "v2": "grant(authentication, action, request, permission.names());",
    "resolution": "grant(authentication, action, request, permission.names(), null);",
    "conflict": "grant(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75033,
    "v2": "throw denial(authentication, action, request, permission.names());",
    "resolution": "throw denial(authentication, action, request, permission.names(), null);",
    "conflict": "throw denial(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75034,
    "v2": "throw denial(authentication, action, request, permission.names());",
    "resolution": "throw denial(authentication, action, request, permission.names(), null);",
    "conflict": "throw denial(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75035,
    "v2": "final ResolvedIndices resolvedIndices = resolveIndexNames(authentication, action, request, metaData, authorizedIndices, permission);",
    "resolution": "final ResolvedIndices resolvedIndices = resolveIndexNames(authentication, action, request, request,",
    "conflict": "final ResolvedIndices resolvedIndices = resolveIndexNames(authentication, action, request, request, metaData, authorizedIndices);"
  },
  {
    "devdecision": "Manual",
    "id": 75036,
    "v2": "throw denial(authentication, action, request, permission.names());",
    "resolution": "throw denial(authentication, action, request, permission.names(), null);",
    "conflict": "throw denial(authentication, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75039,
    "v2": "throw denial(authentication, \"indices:admin/aliases\", request, permission.names());",
    "resolution": "throw denial(authentication, \"indices:admin/aliases\", request, permission.names(), null);",
    "conflict": "throw denial(authentication, \"indices:admin/aliases\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75040,
    "v2": "grant(authentication, action, originalRequest, permission.names());",
    "resolution": "grant(authentication, action, originalRequest, permission.names(), null);",
    "conflict": "grant(authentication, action, originalRequest, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75042,
    "v2": "item.abort(resolvedIndex, denial(authentication, itemAction, request, permission.names()));",
    "resolution": "item.abort(resolvedIndex, denial(authentication, itemAction, request, permission.names(), null));",
    "conflict": "item.abort(resolvedIndex, denial(authentication, itemAction, request, null));"
  },
  {
    "devdecision": "Manual",
    "id": 75044,
    "v2": "auditTrail.accessDenied(authentication.getUser(), action, request, permission.names());",
    "resolution": "auditTrail.accessDenied(authentication.getUser(), action, mainRequest, permission.names(), null);",
    "conflict": "auditTrail.accessDenied(authentication.getUser(), action, mainRequest, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75048,
    "v2": "auditTrailService.accessDenied(current.getUser(), action, request, roleNames);",
    "resolution": "auditTrailService.accessDenied(current.getUser(), action, request, roleNames, null);",
    "conflict": "auditTrailService.accessDenied(current.getUser(), action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75051,
    "v2": "auditTrail.accessGranted(user, randomAlphaOfLengthBetween(6, 40), message, new String[] { \"role\" });",
    "resolution": "auditTrail.accessGranted(user, randomAlphaOfLengthBetween(6, 40), message, new String[] { \"role\" }, randomBoolean() ? randomSpecificIndices() : null);",
    "conflict": "auditTrail.accessGranted(user, randomAlphaOfLengthBetween(6, 40), message, randomBoolean() ? randomSpecificIndices() : null);"
  },
  {
    "devdecision": "Manual",
    "id": 75052,
    "v2": "auditTrail.accessGranted(user, \"internal:foo\", message, new String[] { \"role\" });",
    "resolution": "auditTrail.accessGranted(user, \"internal:foo\", message, new String[] { \"role\" }, randomBoolean() ? randomSpecificIndices() : null);",
    "conflict": "auditTrail.accessGranted(user, \"internal:foo\", message, randomBoolean() ? randomSpecificIndices() : null);"
  },
  {
    "devdecision": "Manual",
    "id": 75053,
    "v2": "auditTrail.accessDenied(user, randomAlphaOfLengthBetween(6, 40), message, new String[] { \"role\" });",
    "resolution": "auditTrail.accessDenied(user, randomAlphaOfLengthBetween(6, 40), message, new String[] { \"role\" }, randomBoolean() ? randomSpecificIndices() : null);",
    "conflict": "auditTrail.accessDenied(user, randomAlphaOfLengthBetween(6, 40), message, randomBoolean() ? randomSpecificIndices() : null);"
  },
  {
    "devdecision": "Manual",
    "id": 75060,
    "v2": "auditTrail.accessGranted(user, \"_action\", message, new String[] { role });",
    "resolution": "auditTrail.accessGranted(user, \"_action\", message, new String[] { role }, randomBoolean() ? specificIndices : null);",
    "conflict": "auditTrail.accessGranted(user, \"_action\", message, randomBoolean() ? specificIndices : null);"
  },
  {
    "devdecision": "Manual",
    "id": 75064,
    "v2": "auditTrail.accessGranted(user, \"internal:_action\", message, new String[] { role });",
    "resolution": "auditTrail.accessGranted(user, \"internal:_action\", message, new String[] { role }, null);",
    "conflict": "auditTrail.accessGranted(user, \"internal:_action\", message, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75066,
    "v2": "auditTrail.accessDenied(user, \"_action\", message, new String[] { role });",
    "resolution": "auditTrail.accessDenied(user, \"_action\", message, new String[] { role }, null);",
    "conflict": "auditTrail.accessDenied(user, \"_action\", message, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75068,
    "v2": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"indices:\", request, new String[] { SystemUser.ROLE_NAME });",
    "resolution": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"indices:\", request, new String[] { SystemUser.ROLE_NAME }, null);",
    "conflict": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"indices:\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75069,
    "v2": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"cluster:admin/whatever\", request, new String[] { SystemUser.ROLE_NAME });",
    "resolution": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"cluster:admin/whatever\", request, new String[] { SystemUser.ROLE_NAME }, null);",
    "conflict": "verify(auditTrail).accessDenied(SystemUser.INSTANCE, \"cluster:admin/whatever\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75071,
    "v2": "verify(auditTrail).accessDenied(user, \"indices:a\", request, Role.EMPTY.names());",
    "resolution": "verify(auditTrail).accessDenied(user, \"indices:a\", request, Role.EMPTY.names(), null);",
    "conflict": "verify(auditTrail).accessDenied(user, \"indices:a\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75072,
    "v2": "verify(auditTrail).accessGranted(user, SearchAction.NAME, request, Role.EMPTY.names());",
    "resolution": "verify(auditTrail).accessGranted(user, SearchAction.NAME, request, Role.EMPTY.names(), null);",
    "conflict": "verify(auditTrail).accessGranted(user, SearchAction.NAME, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75073,
    "v2": "verify(auditTrail).accessDenied(user, SearchAction.NAME, request, Role.EMPTY.names());",
    "resolution": "verify(auditTrail).accessDenied(user, SearchAction.NAME, request, Role.EMPTY.names(), null);",
    "conflict": "verify(auditTrail).accessDenied(user, SearchAction.NAME, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75075,
    "v2": "verify(auditTrail).accessDenied(user, DeleteIndexAction.NAME, request, Role.EMPTY.names());",
    "resolution": "verify(auditTrail).accessDenied(user, DeleteIndexAction.NAME, request, Role.EMPTY.names(), null);",
    "conflict": "verify(auditTrail).accessDenied(user, DeleteIndexAction.NAME, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75077,
    "v2": "verify(auditTrail).accessDenied(user, \"whatever\", request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(user, \"whatever\", request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(user, \"whatever\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75079,
    "v2": "verify(auditTrail).accessGranted(user, request.v1(), request.v2(), new String[] { ElasticUser.ROLE_NAME });",
    "resolution": "verify(auditTrail).accessGranted(user, request.v1(), request.v2(), new String[] { ElasticUser.ROLE_NAME }, null);",
    "conflict": "verify(auditTrail).accessGranted(user, request.v1(), request.v2(), null);"
  },
  {
    "devdecision": "Manual",
    "id": 75080,
    "v2": "verify(auditTrail).accessDenied(user, SearchAction.NAME, searchRequest, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(user, SearchAction.NAME, searchRequest, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(user, SearchAction.NAME, searchRequest, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75081,
    "v2": "verify(auditTrail).accessGranted(user, SearchAction.NAME, searchRequest, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessGranted(user, SearchAction.NAME, searchRequest, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessGranted(user, SearchAction.NAME, searchRequest, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75084,
    "v2": "verify(auditTrail).accessDenied(user, \"indices:a\", request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(user, \"indices:a\", request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(user, \"indices:a\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75085,
    "v2": "verify(auditTrail).accessDenied(user, IndicesAliasesAction.NAME, request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(user, IndicesAliasesAction.NAME, request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(user, IndicesAliasesAction.NAME, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75086,
    "v2": "verify(auditTrail).accessGranted(user, CreateIndexAction.NAME, request, new String[] { role.getName()});",
    "resolution": "verify(auditTrail).accessGranted(user, CreateIndexAction.NAME, request, new String[] { role.getName()}, null);",
    "conflict": "verify(auditTrail).accessGranted(user, CreateIndexAction.NAME, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75087,
    "v2": "verify(auditTrail).accessDenied(anonymousUser, \"indices:a\", request, new String[] { role.getName() });",
    "resolution": "",
    "conflict": "verify(auditTrail).accessDenied(anonymousUser, \"indices:a\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75088,
    "v2": "verify(auditTrail).accessDenied(anonymousUser, \"indices:a\", request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(anonymousUser, \"indices:a\", request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(anonymousUser, \"indices:a\", request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75092,
    "v2": "verify(auditTrail).accessDenied(user, action, request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(user, action, request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(user, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75095,
    "v2": "verify(auditTrail).accessGranted(user, action, request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessGranted(user, action, request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessGranted(user, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75096,
    "v2": "verify(auditTrail).accessGranted(superuser, action, request, superuser.roles());",
    "resolution": "verify(auditTrail).accessGranted(superuser, action, request, superuser.roles(), null);",
    "conflict": "verify(auditTrail).accessGranted(superuser, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75097,
    "v2": "verify(auditTrail).accessGranted(superuser, action, request, superuser.roles());",
    "resolution": "verify(auditTrail).accessGranted(superuser, action, request, superuser.roles(), null);",
    "conflict": "verify(auditTrail).accessGranted(superuser, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75098,
    "v2": "verify(auditTrail).accessDenied(user, action, request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(user, action, request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(user, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75099,
    "v2": "verify(auditTrail).accessGranted(user, action, request, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessGranted(user, action, request, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessGranted(user, action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75102,
    "v2": "verify(auditTrail).accessDenied(user, action, proxiedRequest, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessDenied(user, action, proxiedRequest, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessDenied(user, action, proxiedRequest, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75103,
    "v2": "verify(auditTrail).accessGranted(user, action, clearScrollRequest, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessGranted(user, action, clearScrollRequest, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessGranted(user, action, clearScrollRequest, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75104,
    "v2": "verify(auditTrail).accessGranted(user, action, clearScrollRequest, new String[] { role.getName() });",
    "resolution": "verify(auditTrail).accessGranted(user, action, clearScrollRequest, new String[] { role.getName() }, null);",
    "conflict": "verify(auditTrail).accessGranted(user, action, clearScrollRequest, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75108,
    "v2": "verify(auditTrail).accessDenied(differentRealmType.getUser(), action, request, original.getUser().roles());",
    "resolution": "verify(auditTrail).accessDenied(differentRealmType.getUser(), action, request, original.getUser().roles(), null);",
    "conflict": "verify(auditTrail).accessDenied(differentRealmType.getUser(), action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75109,
    "v2": "verify(auditTrail).accessDenied(differentUser.getUser(), action, request, original.getUser().roles());",
    "resolution": "verify(auditTrail).accessDenied(differentUser.getUser(), action, request, original.getUser().roles(), null);",
    "conflict": "verify(auditTrail).accessDenied(differentUser.getUser(), action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75110,
    "v2": "verify(auditTrail).accessDenied(diffRunAs.getUser(), action, request, original.getUser().roles());",
    "resolution": "verify(auditTrail).accessDenied(diffRunAs.getUser(), action, request, original.getUser().roles(), null);",
    "conflict": "verify(auditTrail).accessDenied(diffRunAs.getUser(), action, request, null);"
  },
  {
    "devdecision": "Manual",
    "id": 75111,
    "v2": "verify(auditTrail).accessDenied(runAsDiffType.getUser(), action, request, original.getUser().roles());",
    "resolution": "verify(auditTrail).accessDenied(runAsDiffType.getUser(), action, request, original.getUser().roles(), null);",
    "conflict": "verify(auditTrail).accessDenied(runAsDiffType.getUser(), action, request, null);"
  },
  {
    "devdecision": "Combination",
    "id": 75120,
    "v2": "",
    "resolution": "import org.elasticsearch.ElasticsearchParseException;",
    "conflict": "import org.elasticsearch.ElasticsearchParseException; import java.text.SimpleDateFormat;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75126,
    "v2": "import org.elasticsearch.common.collect.Tuple;",
    "resolution": "import org.elasticsearch.common.collect.Tuple;import org.elasticsearch.common.Nullable;",
    "conflict": "import org.elasticsearch.common.Nullable;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75128,
    "v2": "import java.text.SimpleDateFormat;",
    "resolution": "import java.text.SimpleDateFormat;import org.elasticsearch.ElasticsearchParseException;",
    "conflict": "import org.elasticsearch.ElasticsearchParseException;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75145,
    "v2": "import org.elasticsearch.xpack.security.crypto.CryptoService;",
    "resolution": "import org.elasticsearch.xpack.sql.plugin.SqlPlugin;import org.elasticsearch.xpack.security.crypto.CryptoService;",
    "conflict": "import org.elasticsearch.xpack.sql.plugin.SqlPlugin;"
  },
  {
    "devdecision": "Manual",
    "id": 75160,
    "v2": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregation;",
    "resolution": "import org.elasticsearch.search.aggregations.bucket.InternalSingleBucketAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75168,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Manual",
    "id": 75170,
    "v2": "",
    "resolution": "import org.elasticsearch.test.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75171,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75172,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Version 1",
    "id": 75175,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.metrics.percentiles.InternalPercentilesRanksTestCase; import org.elasticsearch.search.aggregations.metrics.percentiles.ParsedPercentiles;",
    "conflict": "import org.elasticsearch.search.aggregations.metrics.percentiles.InternalPercentilesRanksTestCase; import org.elasticsearch.search.aggregations.metrics.percentiles.ParsedPercentiles;"
  },
  {
    "devdecision": "Combination",
    "id": 75176,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.metrics.percentiles.ParsedPercentiles;",
    "conflict": "import org.elasticsearch.search.aggregations.metrics.percentiles.InternalPercentilesRanksTestCase; import org.elasticsearch.search.aggregations.metrics.percentiles.ParsedPercentiles;"
  },
  {
    "devdecision": "Combination",
    "id": 75177,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75178,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75180,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Combination",
    "id": 75181,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.ParsedAggregation;",
    "conflict": "import org.elasticsearch.search.aggregations.InternalAggregationTestCase; import org.elasticsearch.search.aggregations.ParsedAggregation;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75189,
    "v2": "import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;",
    "resolution": "import org.elasticsearch.search.aggregations.metrics.percentiles.ParsedPercentiles;import org.elasticsearch.search.aggregations.metrics.percentiles.Percentile;",
    "conflict": "import org.elasticsearch.search.aggregations.metrics.percentiles.ParsedPercentiles;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75193,
    "v2": "import java.util.function.Supplier;",
    "resolution": "import java.util.stream.Collectors;import java.util.function.Supplier;",
    "conflict": "import java.util.stream.Collectors;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75199,
    "v2": "import org.elasticsearch.action.bulk.BulkRequest;",
    "resolution": "import org.elasticsearch.action.bulk.BulkRequest;import org.elasticsearch.action.delete.DeleteRequest;",
    "conflict": "import org.elasticsearch.action.delete.DeleteRequest;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75204,
    "v2": "import org.elasticsearch.action.bulk.BulkRequest; import org.elasticsearch.action.bulk.BulkShardRequest;",
    "resolution": "import org.elasticsearch.action.bulk.BulkRequest; import org.elasticsearch.action.bulk.BulkShardRequest;",
    "conflict": ""
  },
  {
    "devdecision": "None",
    "id": 75214,
    "v2": "final Transport.Connection connection = getConnection(node);",
    "resolution": "sendRequest(connection, action, request, options, handler);",
    "conflict": "taskManager.registerChildTask(parentTask, connection.getNode().getId());"
  },
  {
    "devdecision": "Manual",
    "id": 75220,
    "v2": "DiscoveryNode node = nodeIdToDiscoveryNode.apply(dfsResult.shardTarget().getNodeId());",
    "resolution": "Transport.Connection connection = nodeIdToConnection.apply(dfsResult.shardTarget().getNodeId());",
    "conflict": "Transport.Connection connection = nodeIdToConnection.apply(dfsResult.shardTarget().nodeId());"
  },
  {
    "devdecision": "Manual",
    "id": 75221,
    "v2": "DiscoveryNode node = nodeIdToDiscoveryNode.apply(dfsResult.shardTarget().getNodeId());",
    "resolution": "Transport.Connection connection = nodeIdToConnection.apply(dfsResult.shardTarget().getNodeId());",
    "conflict": "Transport.Connection connection = nodeIdToConnection.apply(dfsResult.shardTarget().nodeId());"
  },
  {
    "devdecision": "Manual",
    "id": 75222,
    "v2": "DiscoveryNode node = nodeIdToDiscoveryNode.apply(queryResult.shardTarget().getNodeId());",
    "resolution": "Transport.Connection connection = nodeIdToConnection.apply(queryResult.shardTarget().getNodeId());",
    "conflict": "Transport.Connection connection = nodeIdToConnection.apply(queryResult.shardTarget().nodeId());"
  },
  {
    "devdecision": "Manual",
    "id": 75223,
    "v2": "DiscoveryNode node = nodeIdToDiscoveryNode.apply(queryResult.shardTarget().getNodeId());",
    "resolution": "Transport.Connection connection = nodeIdToConnection.apply(queryResult.shardTarget().getNodeId());",
    "conflict": "Transport.Connection connection = nodeIdToConnection.apply(queryResult.shardTarget().nodeId());"
  },
  {
    "devdecision": "Concatenation",
    "id": 75225,
    "v2": "import org.elasticsearch.common.network.IfConfig;",
    "resolution": "import org.elasticsearch.common.settings.KeyStoreWrapper;import org.elasticsearch.common.network.IfConfig;",
    "conflict": "import org.elasticsearch.common.settings.KeyStoreWrapper;"
  },
  {
    "devdecision": "Version 2",
    "id": 75226,
    "v2": "final Channel channel = nodeChannels.getChannels().get(0); // one channel is guaranteed by the connection profile",
    "resolution": "final Channel channel = nodeChannels.getChannels().get(0); // one channel is guaranteed by the connection profile",
    "conflict": "Channel channel = nodeChannels.getChannels().get(0);"
  },
  {
    "devdecision": "Version 2",
    "id": 75230,
    "v2": "indexRequest.setSeqNo(indexResult.getSeqNo());",
    "resolution": "indexRequest.setSeqNo(indexResult.getSeqNo());",
    "conflict": "indexRequest.seqNo(indexResult.getSeqNo());"
  },
  {
    "devdecision": "Version 2",
    "id": 75231,
    "v2": "deleteRequest.setSeqNo(deleteResult.getSeqNo());",
    "resolution": "deleteRequest.setSeqNo(deleteResult.getSeqNo());",
    "conflict": "deleteRequest.seqNo(deleteResult.getSeqNo());"
  },
  {
    "devdecision": "Version 1",
    "id": 75232,
    "v2": "import org.elasticsearch.ExceptionsHelper; import org.elasticsearch.ResourceAlreadyExistsException;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 75242,
    "v2": "import org.elasticsearch.ingest.IngestService;",
    "resolution": "import org.elasticsearch.ingest.IngestService;import org.elasticsearch.node.NodeClosedException;",
    "conflict": "import org.elasticsearch.node.NodeClosedException;"
  },
  {
    "devdecision": "Combination",
    "id": 75252,
    "v2": "",
    "resolution": "this.globalCheckpointSyncer = globalCheckpointSyncer;",
    "conflict": "this.globalCheckpointSyncer = globalCheckpointSyncer;         this.indexAnalyzers = registry.build(indexSettings);"
  },
  {
    "devdecision": "Manual",
    "id": 75253,
    "v2": "IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, mapperService, refreshTask, fsyncTask);",
    "resolution": "IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, mapperService, refreshTask, fsyncTask, globalCheckpointTask);",
    "conflict": "IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, indexAnalyzers, refreshTask, fsyncTask, globalCheckpointTask);"
  },
  {
    "devdecision": "Manual",
    "id": 75275,
    "v2": "indexService = indicesService.createIndex(index, emptyList());",
    "resolution": "indexService = indicesService.createIndex(index, emptyList(), shardId -> {});",
    "conflict": "indexService = indicesService.createIndex(nodeServicesProvider, index, emptyList(), shardId -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 75276,
    "v2": "IndexService dummyIndexService = indicesService.createIndex(tmpIndexMetadata, Collections.emptyList());",
    "resolution": "IndexService dummyIndexService = indicesService.createIndex(tmpIndexMetadata, Collections.emptyList(), shardId -> {});",
    "conflict": "IndexService dummyIndexService = indicesService.createIndex(nodeServicesProvider, tmpIndexMetadata, Collections.emptyList(), shardId -> {});"
  },
  {
    "devdecision": "Manual",
    "id": 75277,
    "v2": "indexService = indicesService.createIndex(indexMetaData, Collections.emptyList());",
    "resolution": "indexService = indicesService.createIndex(indexMetaData, Collections.emptyList(), shardId -> {});",
    "conflict": "indexService = indicesService.createIndex(nodeServicesProvider, indexMetaData, Collections.emptyList(), shardId -> {});"
  },
  {
    "devdecision": "Concatenation",
    "id": 75281,
    "v2": "import java.util.function.LongSupplier;",
    "resolution": "import java.util.function.LongSupplier;import java.util.function.Consumer;",
    "conflict": "import java.util.function.Consumer;"
  },
  {
    "devdecision": "Manual",
    "id": 75292,
    "v2": "return new Engine.Delete(type, id, uid, version, versionType, origin, startTime);",
    "resolution": "return new Engine.Delete(type, id, uid, seqNo, version, versionType, origin, startTime);",
    "conflict": "return new Engine.Delete(type, id, uid, seqNo, version, versionType, origin, startTime, false);"
  },
  {
    "devdecision": "Manual",
    "id": 75299,
    "v2": "public synchronized IndexService createIndex(IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners) throws IOException {",
    "resolution": "public synchronized IndexService createIndex(IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners, Consumer<ShardId> globalCheckpointSyncer) throws IOException {",
    "conflict": "public synchronized IndexService createIndex(final NodeServicesProvider nodeServicesProvider, IndexMetaData indexMetaData, List<IndexEventListener> builtInListeners, Consumer<ShardId> globalCheckpointSyncer) throws IOException {"
  },
  {
    "devdecision": "Combination",
    "id": 75305,
    "v2": "",
    "resolution": "private final Consumer<ShardId> globalCheckpointSyncer;",
    "conflict": "private final NodeServicesProvider nodeServicesProvider;     private final Consumer<ShardId> globalCheckpointSyncer;"
  },
  {
    "devdecision": "Combination",
    "id": 75308,
    "v2": "",
    "resolution": "this.globalCheckpointSyncer = globalCheckpointSyncer;",
    "conflict": "this.nodeServicesProvider = nodeServicesProvider;         this.globalCheckpointSyncer = globalCheckpointSyncer;"
  },
  {
    "devdecision": "Manual",
    "id": 75327,
    "v2": "final Engine.Delete operation = new Engine.Delete(\"test\", \"1\", newUid(\"test#1\"), i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime());",
    "resolution": "final Engine.Delete operation = new Engine.Delete(\"test\", \"1\", newUid(\"test#1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime());",
    "conflict": "final Engine.Delete operation = new Engine.Delete(\"test\", \"1\", newUid(\"test#1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), false);"
  },
  {
    "devdecision": "Manual",
    "id": 75343,
    "v2": "engine.delete(new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));",
    "resolution": "engine.delete(new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));",
    "conflict": "engine.delete(new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), false));"
  },
  {
    "devdecision": "Manual",
    "id": 75344,
    "v2": "engine.delete(new Engine.Delete(\"test\", \"2\", newUid(\"2\"), 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));",
    "resolution": "engine.delete(new Engine.Delete(\"test\", \"2\", newUid(\"2\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));",
    "conflict": "engine.delete(new Engine.Delete(\"test\", \"2\", newUid(\"2\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 10, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), false));"
  },
  {
    "devdecision": "Manual",
    "id": 75360,
    "v2": "Engine.Index secondIndexRequestReplica = new Engine.Index(newUid(\"1\"), doc, result.getVersion(), firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);",
    "resolution": "Engine.Index secondIndexRequestReplica = new Engine.Index(newUid(\"1\"), doc, result.getSeqNo(), result.getVersion(), firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);",
    "conflict": "Engine.Index secondIndexRequestReplica = new Engine.Index(newUid(\"1\"), doc, secondIndexRequest.seqNo(), firstIndexRequest.version(), firstIndexRequest.versionType().versionTypeForReplicationAndRecovery(), REPLICA, System.nanoTime(), autoGeneratedIdTimestamp, isRetry);"
  },
  {
    "devdecision": "Combination",
    "id": 75362,
    "v2": "",
    "resolution": "import org.elasticsearch.action.support.replication.TransportReplicationAction.ReplicaResponse;",
    "conflict": "import org.elasticsearch.action.support.replication.TransportReplicationAction.ReplicaResponse; import org.elasticsearch.action.support.replication.TransportWriteAction;"
  },
  {
    "devdecision": "Version 1",
    "id": 75375,
    "v2": "protected void beforeIndexDeletion() throws IOException {",
    "resolution": "protected void beforeIndexDeletion() throws Exception {",
    "conflict": "protected void beforeIndexDeletion() throws Exception {"
  },
  {
    "devdecision": "Concatenation",
    "id": 75379,
    "v2": "import static org.hamcrest.Matchers.containsString;",
    "resolution": "import static org.hamcrest.Matchers.containsString;import static org.hamcrest.CoreMatchers.instanceOf;",
    "conflict": "import static org.hamcrest.CoreMatchers.instanceOf;"
  },
  {
    "devdecision": "None",
    "id": 75387,
    "v2": "import org.elasticsearch.action.support.replication.ReplicationRequest;",
    "resolution": "import org.elasticsearch.action.support.replication.TransportWriteAction;",
    "conflict": "import org.elasticsearch.action.support.replication.TransportWriteAction;"
  },
  {
    "devdecision": "Manual",
    "id": 75395,
    "v2": "public DocWriteResponse(ShardId shardId, String type, String id, long version, Result result) {",
    "resolution": "public DocWriteResponse(ShardId shardId, String type, String id, long seqNo, long version, Result result) {",
    "conflict": "public DocWriteResponse(ShardId shardId, String type, String id, long seqNo, long version) {"
  },
  {
    "devdecision": "Manual",
    "id": 75399,
    "v2": "updateResponse = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getVersion(), response.getResult());",
    "resolution": "updateResponse = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), response.getResult());",
    "conflict": "updateResponse = new UpdateResponse(response.getShardInfo(), response.getShardId(), response.getType(), response.getId(), response.getSeqNo(), response.getVersion(), false);"
  },
  {
    "devdecision": "Manual",
    "id": 75404,
    "v2": "final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());",
    "resolution": "final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.seqNo(), request.version(), request.versionType(), request.getAutoGeneratedTimestamp(), request.isRetry());",
    "conflict": "final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.seqNo(), request.version(), request.versionType());"
  },
  {
    "devdecision": "Manual",
    "id": 75405,
    "v2": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), operation.isCreated());",
    "resolution": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), operation.isCreated());",
    "conflict": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), created);"
  },
  {
    "devdecision": "Manual",
    "id": 75406,
    "v2": "pendingActions.incrementAndGet();",
    "resolution": "pendingActions.incrementAndGet(); // increase by 1 until we finish all primary coordination",
    "conflict": "pendingShards.incrementAndGet(); // increase by 1 until we finish all primary coordination"
  },
  {
    "devdecision": "Manual",
    "id": 75408,
    "v2": "* {@link #acquireReplicaOperationLock(ShardId, long, String, ActionListener)}.",
    "resolution": "* {@link #acquireReplicaOperationLock(ShardId, long, String, ActionListener)}",
    "conflict": "* {@link #acquireReplicaOperationLock(ShardId, long, ActionListener)}"
  },
  {
    "devdecision": "Manual",
    "id": 75418,
    "v2": "IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, indexAnalyzers, refreshTask, fsyncTask);",
    "resolution": "IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, indexAnalyzers, refreshTask, fsyncTask, globalCheckpointTask);",
    "conflict": "IOUtils.close(bitsetFilterCache, indexCache, indexFieldData, analysisService, refreshTask, fsyncTask, globalCheckpointTask);"
  },
  {
    "devdecision": "Concatenation",
    "id": 75435,
    "v2": "out.writeLong(autoGeneratedIdTimestamp);",
    "resolution": "out.writeVLong(seqNo);            out.writeLong(autoGeneratedIdTimestamp);",
    "conflict": "out.writeVLong(seqNo);"
  },
  {
    "devdecision": "Concatenation",
    "id": 75441,
    "v2": "final Set<String> markedAsStaleCopies = ConcurrentCollections.newConcurrentSet();",
    "resolution": "final Set<String> markedAsStaleCopies = ConcurrentCollections.newConcurrentSet();        final Map<String, Long> generatedLocalCheckpoints = ConcurrentCollections.newConcurrentMap();",
    "conflict": "final Map<String, Long> generatedLocalCheckpoints = ConcurrentCollections.newConcurrentMap();"
  },
  {
    "devdecision": "Version 2",
    "id": 75446,
    "v2": "nodesBuilder.add(node);",
    "resolution": "nodesBuilder.add(node);",
    "conflict": "nodesBuilder.put(node);"
  },
  {
    "devdecision": "Manual",
    "id": 75451,
    "v2": "final Engine.Index operation = new Engine.Index(newUid(\"test#1\"), doc, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "final Engine.Index operation = new Engine.Index(newUid(\"test#1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "final Engine.Index operation = new Engine.Index(newUid(\"test#1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, i, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75453,
    "v2": "create = new Engine.Index(newUid(\"1\"), doc, create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "resolution": "create = new Engine.Index(newUid(\"1\"), doc, create.seqNo(), create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "conflict": "create = new Engine.Index(newUid(\"1\"), doc, create.seqNo(), create.version(), create.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75454,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), index.version(), index.versionType().versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75456,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75457,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 3L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75459,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc,SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75460,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 3L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75462,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 13, VersionType.EXTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 13, VersionType.EXTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 13, VersionType.EXTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75463,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75465,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75468,
    "v2": "Engine.Index create = new Engine.Index(newUid(\"1\"), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "Engine.Index create = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "Engine.Index create = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75469,
    "v2": "create = new Engine.Index(newUid(\"1\"), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "resolution": "create = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0, -1, false);",
    "conflict": "create = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75470,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, index.version(), VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA,  0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), index.version(), VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA,  0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), index.version(), VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75471,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75474,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0, -1, false);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 75475,
    "v2": "engine.index(new Engine.Index(newUid(\"1\"), doc, 1, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));",
    "resolution": "engine.index(new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));",
    "conflict": "engine.index(new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));"
  },
  {
    "devdecision": "Manual",
    "id": 75476,
    "v2": "engine.index(new Engine.Index(newUid(\"1\"), doc, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));",
    "resolution": "engine.index(new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));",
    "conflict": "engine.index(new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));"
  },
  {
    "devdecision": "Manual",
    "id": 75477,
    "v2": "engine.index(new Engine.Index(newUid(\"2\"), doc, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));",
    "resolution": "engine.index(new Engine.Index(newUid(\"2\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime(), -1, false));",
    "conflict": "engine.index(new Engine.Index(newUid(\"2\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, Engine.Operation.Origin.PRIMARY, System.nanoTime()));"
  },
  {
    "devdecision": "Manual",
    "id": 75480,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75482,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(uuidValue), doc, 1, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1, VersionType.EXTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75483,
    "v2": "Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "Engine.Index idxRequest = new Engine.Index(newUid(uuidValue), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2, VersionType.EXTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75485,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_DELETED, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75486,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75487,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(0)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Manual",
    "id": 75489,
    "v2": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "resolution": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime(), -1, false);",
    "conflict": "Engine.Index firstIndexRequest = new Engine.Index(newUid(Integer.toString(i)), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL, PRIMARY, System.nanoTime());"
  },
  {
    "devdecision": "Version 2",
    "id": 75492,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.indices.recovery.RecoveryTargetHandler; import org.elasticsearch.indices.recovery.RecoveryTargetService;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75497,
    "v2": "assertEquals(455, total.getTranslogSizeInBytes());",
    "resolution": "assertEquals(455, total.getTranslogSizeInBytes());        assertEquals(437, total.getTranslogSizeInBytes());",
    "conflict": "assertEquals(437, total.getTranslogSizeInBytes());"
  },
  {
    "devdecision": "Version 2",
    "id": 75499,
    "v2": "assertEquals(ex.getMessage(), \"Checkpoint file translog-2.ckp already exists but has corrupted content expected: Checkpoint{offset=3123, numOps=55, translogFileGeneration= 2} but got: Checkpoint{offset=0, numOps=0, translogFileGeneration= 0}\");",
    "resolution": "assertEquals(ex.getMessage(), \"Checkpoint file translog-2.ckp already exists but has corrupted content expected: Checkpoint{offset=3123, numOps=55, translogFileGeneration= 2} but got: Checkpoint{offset=0, numOps=0, translogFileGeneration= 0}\");",
    "conflict": "assertEquals(ex.getMessage(), \"Checkpoint file translog-2.ckp already exists but has corrupted content expected: Checkpoint{offset=2738, numOps=55, translogFileGeneration= 2} but got: Checkpoint{offset=0, numOps=0, translogFileGeneration= 0}\");"
  },
  {
    "devdecision": "Concatenation",
    "id": 75500,
    "v2": "import org.elasticsearch.common.component.AbstractComponent;",
    "resolution": "import org.elasticsearch.common.component.AbstractComponent;import org.elasticsearch.common.SuppressForbidden;",
    "conflict": "import org.elasticsearch.common.SuppressForbidden;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75501,
    "v2": "import java.util.stream.Collectors;",
    "resolution": "import java.util.stream.Collectors;import java.util.function.Consumer;",
    "conflict": "import java.util.function.Consumer;"
  },
  {
    "devdecision": "Version 2",
    "id": 75502,
    "v2": "public class ClusterStateChanges extends AbstractComponent {",
    "resolution": "public class ClusterStateChanges extends AbstractComponent {",
    "conflict": "class ClusterStateChanges {"
  },
  {
    "devdecision": "Version 2",
    "id": 75505,
    "v2": "import org.apache.logging.log4j.Logger;",
    "resolution": "import org.apache.logging.log4j.Logger;",
    "conflict": ""
  },
  {
    "devdecision": "None",
    "id": 75514,
    "v2": "private final ExtensionPoint.ClassSet<IndexTemplateFilter> indexTemplateFilters = new ExtensionPoint.ClassSet<>(\"index_template_filter\", IndexTemplateFilter.class);",
    "resolution": "private final ClusterService clusterService;",
    "conflict": "private final ExtensionPoint.SelectedType<ShardsAllocator> shardsAllocators = new ExtensionPoint.SelectedType<>(\"shards_allocator\", ShardsAllocator.class);"
  },
  {
    "devdecision": "Concatenation",
    "id": 75517,
    "v2": "import org.elasticsearch.search.SearchModule;",
    "resolution": "import org.elasticsearch.search.SearchRequestParsers;import org.elasticsearch.search.SearchModule;",
    "conflict": "import org.elasticsearch.search.SearchRequestParsers;"
  },
  {
    "devdecision": "Manual",
    "id": 75521,
    "v2": "",
    "resolution": "import org.elasticsearch.rest.action.RestActions; import org.elasticsearch.rest.action.search.RestSearchAction; import org.elasticsearch.search.SearchRequestParsers;",
    "conflict": "import org.elasticsearch.rest.action.support.RestActions; import org.elasticsearch.search.SearchRequestParsers;"
  },
  {
    "devdecision": "Version 1",
    "id": 75526,
    "v2": "Collection<String> unknownDocIds = new ArrayList<>();",
    "resolution": "Collection<RatedDocumentKey> unknownDocIds = new ArrayList<RatedDocumentKey>();",
    "conflict": "Collection<RatedDocumentKey> unknownDocIds = new ArrayList<RatedDocumentKey>();"
  },
  {
    "devdecision": "Manual",
    "id": 75527,
    "v2": "Map<String, Collection<String>> unknownDocs = new HashMap<>();",
    "resolution": "Map<String, Collection<RatedDocumentKey>> unknownDocs = new HashMap<>();",
    "conflict": "Map<String, Collection<RatedDocumentKey>> unknownDocs = new HashMap<String, Collection<RatedDocumentKey>>();"
  },
  {
    "devdecision": "Concatenation",
    "id": 75529,
    "v2": "import org.elasticsearch.common.settings.ClusterSettings;",
    "resolution": "import org.elasticsearch.common.settings.ClusterSettings;import org.elasticsearch.common.network.NetworkModule;",
    "conflict": "import org.elasticsearch.common.network.NetworkModule;"
  },
  {
    "devdecision": "Version 2",
    "id": 75531,
    "v2": "searchModule = new SearchModule(Settings.EMPTY, new NamedWriteableRegistry(), false, emptyList());",
    "resolution": "searchModule = new SearchModule(Settings.EMPTY, new NamedWriteableRegistry(), false, emptyList());",
    "conflict": "searchModule = new SearchModule(Settings.EMPTY, new NamedWriteableRegistry(), false, new ArrayList<>());"
  },
  {
    "devdecision": "Manual",
    "id": 75540,
    "v2": "public interface GceComputeService extends LifecycleComponent {",
    "resolution": "public interface GceInstancesService extends LifecycleComponent {",
    "conflict": "public interface GceInstancesService extends LifecycleComponent<GceInstancesService> {"
  },
  {
    "devdecision": "Manual",
    "id": 75561,
    "v2": "boolean useThrottleRetries);",
    "resolution": "boolean useThrottleRetries, Boolean pathStyleAccess);",
    "conflict": "Boolean pathStyleAccess);"
  },
  {
    "devdecision": "Manual",
    "id": 75562,
    "v2": "boolean useThrottleRetries) {",
    "resolution": "boolean useThrottleRetries, Boolean pathStyleAccess) {",
    "conflict": "Boolean pathStyleAccess) {"
  },
  {
    "devdecision": "Concatenation",
    "id": 75564,
    "v2": "import com.amazonaws.ClientConfiguration;",
    "resolution": "import com.amazonaws.ClientConfiguration;import com.amazonaws.services.s3.AmazonS3;",
    "conflict": "import com.amazonaws.services.s3.AmazonS3;"
  },
  {
    "devdecision": "Manual",
    "id": 75566,
    "v2": "blobStore = new S3BlobStore(settings, s3Service.client(endpoint, protocol, region, key, secret, maxRetries, useThrottleRetries),",
    "resolution": "blobStore = new S3BlobStore(settings, s3Service.client(endpoint, protocol, region, key, secret, maxRetries, useThrottleRetries, pathStyleAccess),",
    "conflict": "blobStore = new S3BlobStore(settings, s3Service.client(endpoint, protocol, region, key, secret, maxRetries, pathStyleAccess),"
  },
  {
    "devdecision": "Concatenation",
    "id": 75571,
    "v2": "import org.elasticsearch.xpack.support.clock.Clock;",
    "resolution": "import org.elasticsearch.xpack.support.clock.Clock;import org.elasticsearch.xpack.watcher.Watcher;",
    "conflict": "import org.elasticsearch.xpack.watcher.Watcher;"
  },
  {
    "devdecision": "None",
    "id": 75572,
    "v2": "import org.elasticsearch.xpack.watcher.support.validation.WatcherSettingsValidation;",
    "resolution": "import org.elasticsearch.xpack.watcher.transform.Transform;",
    "conflict": "import org.elasticsearch.xpack.support.clock.Clock;"
  },
  {
    "devdecision": "Version 2",
    "id": 75578,
    "v2": "new BulkItemResponse.Failure(request.index(), updateRequest.type(), updateRequest.id(), e)));",
    "resolution": "new BulkItemResponse.Failure(request.index(), updateRequest.type(), updateRequest.id(), e)));",
    "conflict": "new BulkItemResponse.Failure(request.index(), updateRequest.type(), updateRequest.id(), t)));"
  },
  {
    "devdecision": "Version 2",
    "id": 75579,
    "v2": "new BulkItemResponse.Failure(request.index(), indexRequest.type(), indexRequest.id(), e)));",
    "resolution": "new BulkItemResponse.Failure(request.index(), indexRequest.type(), indexRequest.id(), e)));",
    "conflict": "new BulkItemResponse.Failure(request.index(), indexRequest.type(), indexRequest.id(), t)));"
  },
  {
    "devdecision": "Version 2",
    "id": 75580,
    "v2": "new BulkItemResponse.Failure(request.index(), deleteRequest.type(), deleteRequest.id(), e)));",
    "resolution": "new BulkItemResponse.Failure(request.index(), deleteRequest.type(), deleteRequest.id(), e)));",
    "conflict": "new BulkItemResponse.Failure(request.index(), deleteRequest.type(), deleteRequest.id(), t)));"
  },
  {
    "devdecision": "Version 1",
    "id": 75581,
    "v2": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.version(), created);",
    "resolution": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), created);",
    "conflict": "IndexResponse response = new IndexResponse(shardId, request.type(), request.id(), request.seqNo(), request.version(), created);"
  },
  {
    "devdecision": "Manual",
    "id": 75582,
    "v2": "* {@link #acquireReplicaOperationLock(ShardId, long, ActionListener)}.",
    "resolution": "* {@link #acquireReplicaOperationLock(ShardId, long, ActionListener)}",
    "conflict": "* {@link #getReplicaShardReference(ShardId, long)} (ShardId, long)}."
  },
  {
    "devdecision": "Version 1",
    "id": 75598,
    "v2": "ParsedDocument doc = new ParsedDocument(versionField, id, type, null, -1, -1, Arrays.asList(document), source, null);",
    "resolution": "ParsedDocument doc = new ParsedDocument(versionField, seqNoField, id, type, null, -1, -1, Arrays.asList(document), source, null);",
    "conflict": "ParsedDocument doc = new ParsedDocument(versionField, seqNoField, id, type, null, -1, -1, Arrays.asList(document), source, null);"
  },
  {
    "devdecision": "Version 1",
    "id": 75600,
    "v2": "assertThat(doc.rootDoc().getFields().size(), equalTo(11)); // also includes _uid (1), type (2), source (1)",
    "resolution": "assertThat(doc.rootDoc().getFields().size(), equalTo(24)); // also includes all other meta fields",
    "conflict": "assertThat(doc.rootDoc().getFields().size(), equalTo(24)); // also includes all other meta fields"
  },
  {
    "devdecision": "Version 1",
    "id": 75601,
    "v2": "assertThat(doc.rootDoc().getFields().size(), equalTo(8)); // also includes _uid (1), type (2), source (1)",
    "resolution": "assertThat(doc.rootDoc().getFields().size(), equalTo(20)); // also includes all other meta fields",
    "conflict": "assertThat(doc.rootDoc().getFields().size(), equalTo(20)); // also includes all other meta fields"
  },
  {
    "devdecision": "Version 1",
    "id": 75602,
    "v2": "assertThat(doc.rootDoc().getFields().size(), equalTo(8)); // also includes _uid (1), type (2), source (1)",
    "resolution": "assertThat(doc.rootDoc().getFields().size(), equalTo(20)); // also includes all other meta fields",
    "conflict": "assertThat(doc.rootDoc().getFields().size(), equalTo(20)); // also includes all other meta fields"
  },
  {
    "devdecision": "Version 2",
    "id": 75608,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.ingest.IngestService; import org.elasticsearch.node.service.NodeService;"
  },
  {
    "devdecision": "Version 1",
    "id": 75611,
    "v2": "",
    "resolution": "import java.util.HashMap; import java.util.Map;",
    "conflict": "import java.util.HashMap; import java.util.Map;"
  },
  {
    "devdecision": "Manual",
    "id": 75621,
    "v2": "registryBuilder.registerProcessor(\"remove\", (registry) -> (tag, config) -> {",
    "resolution": "processorFactories.put(\"remove\", (factories, tag, config) -> {",
    "conflict": "processorFactories.put(\"remove\", (factories, config) -> {"
  },
  {
    "devdecision": "Version 2",
    "id": 75622,
    "v2": "static abstract class Factory implements Processor.Factory {",
    "resolution": "static abstract class Factory implements Processor.Factory {",
    "conflict": "static abstract class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Manual",
    "id": 75623,
    "v2": "public AbstractStringProcessor create(String processorTag, Map<String, Object> config) throws Exception {",
    "resolution": "public AbstractStringProcessor create(Map<String, Processor.Factory> registry, String tag, Map<String, Object> config) throws Exception {",
    "conflict": "public AbstractStringProcessor doCreate(Map<String, Processor.Factory> registry, String processorTag, Map<String, Object> config) throws Exception {"
  },
  {
    "devdecision": "Version 2",
    "id": 75624,
    "v2": "public static final class Factory implements Processor.Factory {",
    "resolution": "public static final class Factory implements Processor.Factory {",
    "conflict": "public static final class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Version 2",
    "id": 75629,
    "v2": "public static final class Factory implements Processor.Factory {",
    "resolution": "public static final class Factory implements Processor.Factory {",
    "conflict": "public static final class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Version 2",
    "id": 75632,
    "v2": "public final static class Factory implements Processor.Factory {",
    "resolution": "public final static class Factory implements Processor.Factory {",
    "conflict": "public final static class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Version 2",
    "id": 75636,
    "v2": "public static final class Factory implements Processor.Factory {",
    "resolution": "public static final class Factory implements Processor.Factory {",
    "conflict": "public static final class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Version 2",
    "id": 75639,
    "v2": "public static final class Factory implements Processor.Factory {",
    "resolution": "public static final class Factory implements Processor.Factory {",
    "conflict": "public static final class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Version 2",
    "id": 75641,
    "v2": "public static final class Factory implements Processor.Factory {",
    "resolution": "public static final class Factory implements Processor.Factory {",
    "conflict": "public static final class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Manual",
    "id": 75651,
    "v2": "ForEachProcessor forEachProcessor = forEachFactory.create(null, config);",
    "resolution": "ForEachProcessor forEachProcessor = forEachFactory.create(registry, null, config);",
    "conflict": "ForEachProcessor forEachProcessor = forEachFactory.create(registry, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75652,
    "v2": "forEachFactory.create(null, config);",
    "resolution": "forEachFactory.create(registry, null, config);",
    "conflict": "forEachFactory.create(registry, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75653,
    "v2": "forEachFactory.create(null, config);",
    "resolution": "forEachFactory.create(registry, null, config);",
    "conflict": "forEachFactory.create(registry, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75655,
    "v2": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"tag\", config));",
    "resolution": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));",
    "conflict": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, config));"
  },
  {
    "devdecision": "Manual",
    "id": 75656,
    "v2": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"tag\", config));",
    "resolution": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));",
    "conflict": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, config));"
  },
  {
    "devdecision": "Manual",
    "id": 75657,
    "v2": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"tag\", config));",
    "resolution": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));",
    "conflict": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, config));"
  },
  {
    "devdecision": "Manual",
    "id": 75658,
    "v2": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"tag\", config));",
    "resolution": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));",
    "conflict": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, config));"
  },
  {
    "devdecision": "Manual",
    "id": 75659,
    "v2": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(\"tag\", config));",
    "resolution": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, null, config));",
    "conflict": "ElasticsearchParseException e = expectThrows(ElasticsearchParseException.class, () -> factory.create(null, config));"
  },
  {
    "devdecision": "Manual",
    "id": 75665,
    "v2": "() -> factory.create(randomAsciiOfLength(10), configMap));",
    "resolution": "() -> factory.create(null, randomAsciiOfLength(10), configMap));",
    "conflict": "() -> factory.doCreate(null, randomAsciiOfLength(10), configMap));"
  },
  {
    "devdecision": "Manual",
    "id": 75666,
    "v2": "() -> factory.create(randomAsciiOfLength(10), configMap));",
    "resolution": "() -> factory.create(null, randomAsciiOfLength(10), configMap));",
    "conflict": "() -> factory.doCreate(null, randomAsciiOfLength(10), configMap));"
  },
  {
    "devdecision": "Manual",
    "id": 75670,
    "v2": "Processor splitProcessor = (new SplitProcessor.Factory()).create(\"tag\", splitConfig);",
    "resolution": "Processor splitProcessor = (new SplitProcessor.Factory()).create(null, null, splitConfig);",
    "conflict": "Processor splitProcessor = (new SplitProcessor.Factory()).create(null, splitConfig);"
  },
  {
    "devdecision": "Version 2",
    "id": 75673,
    "v2": "public static final class Factory implements Processor.Factory {",
    "resolution": "public static final class Factory implements Processor.Factory {",
    "conflict": "public static final class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Manual",
    "id": 75675,
    "v2": "AttachmentProcessor processor = factory.create(processorTag, config);",
    "resolution": "AttachmentProcessor processor = factory.create(null, processorTag, config);",
    "conflict": "AttachmentProcessor processor = factory.create(null, config);"
  },
  {
    "devdecision": "Version 2",
    "id": 75678,
    "v2": "public static final class Factory implements Processor.Factory {",
    "resolution": "public static final class Factory implements Processor.Factory {",
    "conflict": "public static final class Factory extends AbstractProcessorFactory {"
  },
  {
    "devdecision": "Manual",
    "id": 75680,
    "v2": "GeoIpProcessor processor = factory.create(processorTag, config);",
    "resolution": "GeoIpProcessor processor = factory.create(null, processorTag, config);",
    "conflict": "GeoIpProcessor processor = (GeoIpProcessor)factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75681,
    "v2": "GeoIpProcessor processor = factory.create(processorTag, config);",
    "resolution": "GeoIpProcessor processor = factory.create(null, processorTag, config);",
    "conflict": "GeoIpProcessor processor = (GeoIpProcessor)factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75682,
    "v2": "GeoIpProcessor processor = factory.create(null, config);",
    "resolution": "GeoIpProcessor processor = factory.create(null, null, config);",
    "conflict": "GeoIpProcessor processor = (GeoIpProcessor)factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75683,
    "v2": "GeoIpProcessor processor = factory.create(null, config);",
    "resolution": "GeoIpProcessor processor = factory.create(null, null, config);",
    "conflict": "GeoIpProcessor processor = (GeoIpProcessor)factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75684,
    "v2": "GeoIpProcessor processor = factory.create(null, config);",
    "resolution": "GeoIpProcessor processor = factory.create(null, null, config);",
    "conflict": "GeoIpProcessor processor = (GeoIpProcessor)factory.create(null, config);"
  },
  {
    "devdecision": "Manual",
    "id": 75685,
    "v2": "factory.create(\"tag\", config);",
    "resolution": "factory.create(null, null, config);",
    "conflict": "factory.create(null, config);"
  },
  {
    "devdecision": "Version 2",
    "id": 75693,
    "v2": "import java.util.Arrays;",
    "resolution": "import java.util.Arrays;",
    "conflict": "import java.util.ArrayList;"
  },
  {
    "devdecision": "Version 2",
    "id": 75700,
    "v2": "public void close() throws IOException {",
    "resolution": "public void close() throws IOException {",
    "conflict": "public synchronized void close() throws IOException {"
  },
  {
    "devdecision": "Concatenation",
    "id": 75701,
    "v2": "import org.elasticsearch.plugins.AnalysisPlugin;",
    "resolution": "import org.elasticsearch.plugins.AnalysisPlugin;import org.elasticsearch.plugins.MapperPlugin;",
    "conflict": "import org.elasticsearch.plugins.MapperPlugin;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75702,
    "v2": "import org.elasticsearch.plugins.AnalysisPlugin;",
    "resolution": "import org.elasticsearch.plugins.AnalysisPlugin;import org.elasticsearch.plugins.MapperPlugin;",
    "conflict": "import org.elasticsearch.plugins.MapperPlugin;"
  },
  {
    "devdecision": "Manual",
    "id": 75810,
    "v2": "setState(217);",
    "resolution": "setState(221);",
    "conflict": "setState(190);"
  },
  {
    "devdecision": "Manual",
    "id": 75813,
    "v2": "setState(222);",
    "resolution": "setState(226);",
    "conflict": "setState(195);"
  },
  {
    "devdecision": "Manual",
    "id": 75814,
    "v2": "setState(225);",
    "resolution": "setState(229);",
    "conflict": "setState(198);"
  },
  {
    "devdecision": "Manual",
    "id": 75818,
    "v2": "setState(232);",
    "resolution": "setState(236);",
    "conflict": "setState(205);"
  },
  {
    "devdecision": "Manual",
    "id": 75820,
    "v2": "setState(237);",
    "resolution": "setState(241);",
    "conflict": "setState(210);"
  },
  {
    "devdecision": "Manual",
    "id": 75822,
    "v2": "setState(242);",
    "resolution": "setState(246);",
    "conflict": "setState(215);"
  },
  {
    "devdecision": "Manual",
    "id": 75824,
    "v2": "setState(247);",
    "resolution": "setState(251);",
    "conflict": "setState(220);"
  },
  {
    "devdecision": "Manual",
    "id": 75826,
    "v2": "setState(252);",
    "resolution": "setState(256);",
    "conflict": "setState(225);"
  },
  {
    "devdecision": "Manual",
    "id": 75836,
    "v2": "setState(294);",
    "resolution": "setState(298);",
    "conflict": "setState(267);"
  },
  {
    "devdecision": "Manual",
    "id": 75844,
    "v2": "setState(315);",
    "resolution": "setState(319);",
    "conflict": "setState(288);"
  },
  {
    "devdecision": "Manual",
    "id": 75848,
    "v2": "setState(324);",
    "resolution": "setState(328);",
    "conflict": "setState(297);"
  },
  {
    "devdecision": "Manual",
    "id": 75851,
    "v2": "setState(332);",
    "resolution": "setState(336);",
    "conflict": "setState(305);"
  },
  {
    "devdecision": "Manual",
    "id": 75856,
    "v2": "setState(349);",
    "resolution": "setState(353);",
    "conflict": "setState(322);"
  },
  {
    "devdecision": "Manual",
    "id": 75861,
    "v2": "setState(370);",
    "resolution": "setState(374);",
    "conflict": "setState(343);"
  },
  {
    "devdecision": "Manual",
    "id": 75862,
    "v2": "setState(371);",
    "resolution": "setState(375);",
    "conflict": "setState(344);"
  },
  {
    "devdecision": "Manual",
    "id": 75872,
    "v2": "setState(407);",
    "resolution": "setState(411);",
    "conflict": "setState(378);"
  },
  {
    "devdecision": "Manual",
    "id": 75874,
    "v2": "setState(410);",
    "resolution": "setState(414);",
    "conflict": "setState(381);"
  },
  {
    "devdecision": "Version 1",
    "id": 75876,
    "v2": "writer.invokeDynamic(\"iterator\", desc, DEF_BOOTSTRAP_HANDLE, (Object)DefBootstrap.ITERATOR, (Object)0);",
    "resolution": "writer.invokeDynamic(\"iterator\", desc, DEF_BOOTSTRAP_HANDLE, (Object)DefBootstrap.ITERATOR);",
    "conflict": "writer.invokeDynamic(\"iterator\", desc, DEF_BOOTSTRAP_HANDLE, (Object)DefBootstrap.ITERATOR);"
  },
  {
    "devdecision": "Concatenation",
    "id": 75877,
    "v2": "import org.elasticsearch.index.IndexSettings;",
    "resolution": "import org.elasticsearch.index.seqno.SequenceNumbersService;import org.elasticsearch.index.IndexSettings;",
    "conflict": "import org.elasticsearch.index.seqno.SequenceNumbersService;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75878,
    "v2": "private boolean forcedRefresh;",
    "resolution": "private boolean forcedRefresh;    private long seqNo;",
    "conflict": "private long seqNo;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75880,
    "v2": "forcedRefresh = in.readBoolean();",
    "resolution": "forcedRefresh = in.readBoolean();        seqNo = in.readZLong();",
    "conflict": "seqNo = in.readZLong();"
  },
  {
    "devdecision": "Concatenation",
    "id": 75881,
    "v2": "out.writeBoolean(forcedRefresh);",
    "resolution": "out.writeBoolean(forcedRefresh);        out.writeZLong(seqNo);",
    "conflict": "out.writeZLong(seqNo);"
  },
  {
    "devdecision": "Version 2",
    "id": 75886,
    "v2": "final ShardId primaryId = primaryRouting.shardId();",
    "resolution": "final ShardId primaryId = primaryRouting.shardId();",
    "conflict": "final ShardId shardId = primaryRouting.shardId();"
  },
  {
    "devdecision": "Combination",
    "id": 75890,
    "v2": "",
    "resolution": "import org.elasticsearch.action.ActionResponse;",
    "conflict": "import org.elasticsearch.action.ActionResponse; import org.elasticsearch.action.ReplicationResponse;"
  },
  {
    "devdecision": "Version 1",
    "id": 75893,
    "v2": "class PrimaryShardReference implements ReplicationOperation.Primary<Request, ReplicaRequest, PrimaryResult>, Releasable {",
    "resolution": "class ShardReference implements Releasable {",
    "conflict": "class ShardReference implements Releasable {"
  },
  {
    "devdecision": "Concatenation",
    "id": 75897,
    "v2": "import org.elasticsearch.index.shard.RefreshListeners;",
    "resolution": "import org.elasticsearch.index.shard.RefreshListeners;import org.elasticsearch.index.seqno.SequenceNumbersService;",
    "conflict": "import org.elasticsearch.index.seqno.SequenceNumbersService;"
  },
  {
    "devdecision": "Manual",
    "id": 75905,
    "v2": "final EConstant econstant = new EConstant(location, constant);",
    "resolution": "EConstant econstant = new EConstant(location, constant);",
    "conflict": "EConstant econstant = new EConstant(line, offset, location, constant);"
  },
  {
    "devdecision": "Manual",
    "id": 75908,
    "v2": "final ECast ecast = new ECast(location, econstant, cast);",
    "resolution": "ECast ecast = new ECast(location, econstant, cast);",
    "conflict": "ECast ecast = new ECast(line, offset, location, econstant, cast);"
  },
  {
    "devdecision": "Manual",
    "id": 75935,
    "v2": "for (AStatement statement : statements) {             // TODO: why are we checking only statements 0..n-1 (this effectively checks only the previous statement)",
    "resolution": "for (int index = 0; index < statements.size(); ++index) { AStatement statement = statements.get(index);",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 75939,
    "v2": "",
    "resolution": "import org.elasticsearch.index.seqno.LocalCheckpointService;",
    "conflict": "import org.elasticsearch.index.percolator.PercolatorFieldMapper; import org.elasticsearch.index.seqno.LocalCheckpointService;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75940,
    "v2": "import org.elasticsearch.index.shard.DocsStats;",
    "resolution": "import org.elasticsearch.index.shard.DocsStats;import org.elasticsearch.index.seqno.SequenceNumbersService;",
    "conflict": "import org.elasticsearch.index.seqno.SequenceNumbersService;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75942,
    "v2": "import org.elasticsearch.index.shard.DocsStats;",
    "resolution": "import org.elasticsearch.index.shard.DocsStats;import org.elasticsearch.index.seqno.SequenceNumbersService;",
    "conflict": "import org.elasticsearch.index.seqno.SequenceNumbersService;"
  },
  {
    "devdecision": "Manual",
    "id": 75954,
    "v2": "this(uid, Versions.MATCH_ANY, VersionType.INTERNAL);",
    "resolution": "this(uid, SequenceNumbersService.UNASSIGNED_SEQ_NO, Versions.MATCH_ANY, VersionType.INTERNAL);",
    "conflict": "this(uid, 0, 0, VersionType.EXTERNAL);"
  },
  {
    "devdecision": "Combination",
    "id": 75957,
    "v2": "",
    "resolution": "import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction;",
    "conflict": "import org.elasticsearch.index.percolator.PercolatorFieldMapper; import org.elasticsearch.index.seqno.GlobalCheckpointSyncAction;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75958,
    "v2": "import java.util.concurrent.atomic.AtomicInteger;",
    "resolution": "import java.util.function.Consumer;import java.util.concurrent.atomic.AtomicInteger;",
    "conflict": "import java.util.function.Consumer;"
  },
  {
    "devdecision": "Concatenation",
    "id": 75960,
    "v2": "import org.elasticsearch.index.shard.DocsStats;",
    "resolution": "import org.elasticsearch.index.shard.DocsStats;import org.elasticsearch.index.seqno.SequenceNumbersService;",
    "conflict": "import org.elasticsearch.index.seqno.SequenceNumbersService;"
  },
  {
    "devdecision": "Manual",
    "id": 75981,
    "v2": "public static Type promoteNumeric(final Definition definition, final Type from0, final Type from1, final boolean decimal) {",
    "resolution": "public static Type promoteNumeric(Type from0, Type from1, boolean decimal) {",
    "conflict": "public static Type promoteNumeric(final Type from0, final Type from1, final boolean decimal, final boolean primitive) {"
  },
  {
    "devdecision": "Manual",
    "id": 75983,
    "v2": "return promoteNumeric(definition, from0, from1, true);",
    "resolution": "return promoteNumeric(from0, from1, true);",
    "conflict": "return promoteNumeric(from0, from1, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 75984,
    "v2": "return promoteNumeric(definition, from0, from1, false);",
    "resolution": "return promoteNumeric(from0, from1, false);",
    "conflict": "return promoteNumeric(from0, from1, false, true);"
  },
  {
    "devdecision": "Manual",
    "id": 75986,
    "v2": "return promoteNumeric(definition, from0, from1, true);",
    "resolution": "return promoteNumeric(from0, from1, true);",
    "conflict": "return promoteNumeric(from0, from1, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76002,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76003,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76004,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76005,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76006,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, false);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, false);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, false, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76007,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, false);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, false);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, false, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76008,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, false);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, false);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, false, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76009,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, false);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, false);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, false, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76010,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, false);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, false);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, false, true);"
  },
  {
    "devdecision": "Version 1",
    "id": 76014,
    "v2": "expression.write(settings, definition, adapter);",
    "resolution": "expression.write(adapter);",
    "conflict": "expression.write(adapter);"
  },
  {
    "devdecision": "Manual",
    "id": 76015,
    "v2": "final Type promote = AnalyzerCaster.promoteEquality(definition, left.actual, right.actual);",
    "resolution": "final Type promote = AnalyzerCaster.promoteEquality(left.actual, right.actual);",
    "conflict": "final Type promote = AnalyzerCaster.promoteReference(left.actual, right.actual);"
  },
  {
    "devdecision": "Manual",
    "id": 76016,
    "v2": "final Type promote = AnalyzerCaster.promoteEquality(definition, left.actual, right.actual);",
    "resolution": "final Type promote = AnalyzerCaster.promoteEquality(left.actual, right.actual);",
    "conflict": "final Type promote = AnalyzerCaster.promoteReference(left.actual, right.actual);"
  },
  {
    "devdecision": "Manual",
    "id": 76017,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76018,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76019,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76020,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, left.actual, right.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(left.actual, right.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76026,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, child.actual, false);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(child.actual, false);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(child.actual, false, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76027,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, child.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(child.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(child.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76028,
    "v2": "final Type promote = AnalyzerCaster.promoteNumeric(definition, child.actual, true);",
    "resolution": "final Type promote = AnalyzerCaster.promoteNumeric(child.actual, true);",
    "conflict": "final Type promote = AnalyzerCaster.promoteNumeric(child.actual, true, true);"
  },
  {
    "devdecision": "Manual",
    "id": 76029,
    "v2": "adapter.invokeStatic(DEF_TYPE, DEF_NOT_CALL);",
    "resolution": "adapter.invokeStatic(DEF_UTIL_TYPE, DEF_NOT_CALL);",
    "conflict": "adapter.invokeStatic(Definition.DEF_UTIL_TYPE.type, DEF_NOT_CALL);"
  },
  {
    "devdecision": "Manual",
    "id": 76030,
    "v2": "adapter.invokeStatic(DEF_TYPE, DEF_NEG_CALL);",
    "resolution": "adapter.invokeStatic(DEF_UTIL_TYPE, DEF_NEG_CALL);",
    "conflict": "adapter.invokeStatic(Definition.DEF_UTIL_TYPE.type, DEF_NEG_CALL);"
  },
  {
    "devdecision": "Manual",
    "id": 76032,
    "v2": "cast = AnalyzerCaster.getLegalCast(definition, location, before, after, true, false);",
    "resolution": "cast = AnalyzerCaster.getLegalCast(location, before, after, true, false);",
    "conflict": "cast = AnalyzerCaster.getLegalCast(location, before, after, true);"
  },
  {
    "devdecision": "Combination",
    "id": 76040,
    "v2": "",
    "resolution": "import org.elasticsearch.index.seqno.SequenceNumbersService;",
    "conflict": "import org.elasticsearch.common.xcontent.XContentBuilderString; import org.elasticsearch.index.seqno.SequenceNumbersService;"
  },
  {
    "devdecision": "Version 1",
    "id": 76048,
    "v2": "import org.elasticsearch.index.shard.TranslogRecoveryPerformer;",
    "resolution": "import org.elasticsearch.index.seqno.SeqNoStats;",
    "conflict": "import org.elasticsearch.index.seqno.SeqNoStats;"
  },
  {
    "devdecision": "Manual",
    "id": 76051,
    "v2": "private Field version;",
    "resolution": "private Field version;  private Field seqNo;",
    "conflict": "private Field uid, version, seqNo;"
  },
  {
    "devdecision": "Manual",
    "id": 76052,
    "v2": "private final Field version;",
    "resolution": "private final String uid; private final String id; private final String type;  private final Field version; private final Field seqNo;",
    "conflict": "private final Field uid, version, seqNo;"
  },
  {
    "devdecision": "Combination",
    "id": 76058,
    "v2": "",
    "resolution": "import org.elasticsearch.index.seqno.SeqNoStats;",
    "conflict": "import org.elasticsearch.index.seqno.SeqNoStats; import org.elasticsearch.index.SearchSlowLog;"
  },
  {
    "devdecision": "Manual",
    "id": 76064,
    "v2": "return new ParsedDocument(versionField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingUpdate);",
    "resolution": "return new ParsedDocument(versionField, seqNoField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingUpdate);",
    "conflict": "return new ParsedDocument(uidField, versionField, seqNoField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingUpdate);"
  },
  {
    "devdecision": "Manual",
    "id": 76067,
    "v2": "assertFieldNames(set(\"a\", \"a.keyword\", \"b\", \"b.c\", \"_uid\", \"_type\", \"_version\", \"_source\", \"_all\"), doc);",
    "resolution": "assertFieldNames(set(\"a\", \"a.keyword\", \"b\", \"b.c\", \"_uid\", \"_type\", \"_version\", \"_seq_no\", \"_source\", \"_all\"), doc);",
    "conflict": "assertFieldNames(set(\"a\", \"b\", \"b.c\", \"_uid\", \"_type\", \"_version\", \"_seq_no\", \"_source\", \"_all\"), doc);"
  },
  {
    "devdecision": "Manual",
    "id": 76068,
    "v2": "assertFieldNames(set(\"field\", \"field.keyword\", \"_uid\", \"_type\", \"_version\", \"_source\", \"_all\"), doc);",
    "resolution": "assertFieldNames(set(\"field\", \"field.keyword\", \"_uid\", \"_type\", \"_version\", \"_seq_no\", \"_source\", \"_all\"), doc);",
    "conflict": "assertFieldNames(set(\"field\", \"_uid\", \"_type\", \"_version\", \"_seq_no\", \"_source\", \"_all\"), doc);"
  },
  {
    "devdecision": "Manual",
    "id": 76069,
    "v2": "return new ParsedDocument(versionField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingUpdate);",
    "resolution": "return new ParsedDocument(versionField, seqNoField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingUpdate);",
    "conflict": "return new ParsedDocument(uidField, versionField, seqNoField, id, type, routing, timestamp, ttl, Arrays.asList(document), source, mappingUpdate);"
  },
  {
    "devdecision": "Concatenation",
    "id": 76076,
    "v2": "import com.amazonaws.Protocol;",
    "resolution": "import com.amazonaws.Protocol;import com.amazonaws.services.s3.AmazonS3;",
    "conflict": "import com.amazonaws.services.s3.AmazonS3;"
  },
  {
    "devdecision": "Version 1",
    "id": 76086,
    "v2": "builder.field(\"name\", node.getNode().name());",
    "resolution": "builder.field(\"name\", node.getNode().getName());",
    "conflict": "builder.field(\"name\", node.getNode().getName());"
  },
  {
    "devdecision": "Version 1",
    "id": 76087,
    "v2": "builder.field(\"name\", node.getNode().name());",
    "resolution": "builder.field(\"name\", node.getNode().getName());",
    "conflict": "builder.field(\"name\", node.getNode().getName());"
  },
  {
    "devdecision": "Version 1",
    "id": 76089,
    "v2": "builder.field(\"name\", node.getNode().name());",
    "resolution": "builder.field(\"name\", node.getNode().getName());",
    "conflict": "builder.field(\"name\", node.getNode().getName());"
  },
  {
    "devdecision": "Version 1",
    "id": 76090,
    "v2": "builder.field(\"name\", node.getNode().name());",
    "resolution": "builder.field(\"name\", node.getNode().getName());",
    "conflict": "builder.field(\"name\", node.getNode().getName());"
  },
  {
    "devdecision": "Version 2",
    "id": 76092,
    "v2": "public static final ParseField REVERSE_FIELD = new ParseField(\"reverse\");",
    "resolution": "public static final ParseField REVERSE_FIELD = new ParseField(\"reverse\");",
    "conflict": "public static final ScoreSortBuilder PROTOTYPE = new ScoreSortBuilder();"
  },
  {
    "devdecision": "Version 2",
    "id": 76095,
    "v2": "try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request.primaryTerm())) {",
    "resolution": "try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request.primaryTerm())) {",
    "conflict": "try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request)) {"
  },
  {
    "devdecision": "Version 1",
    "id": 76106,
    "v2": ")",
    "resolution": ")",
    "conflict": ")"
  },
  {
    "devdecision": "Version 2",
    "id": 76108,
    "v2": "return indexShard.getPrimaryTerm();",
    "resolution": "return indexShard.getPrimaryTerm();",
    "conflict": "return routingEntry().primaryTerm();"
  },
  {
    "devdecision": "Version 2",
    "id": 76109,
    "v2": "builder.startObject(IndexMetaData.KEY_PRIMARY_TERMS);",
    "resolution": "builder.startObject(IndexMetaData.KEY_PRIMARY_TERMS);",
    "conflict": "builder.startObject(\"primary_terms\");"
  },
  {
    "devdecision": "Version 2",
    "id": 76110,
    "v2": "// index metadata",
    "resolution": "// index metadata",
    "conflict": "// index metdata data"
  },
  {
    "devdecision": "Combination",
    "id": 76120,
    "v2": "",
    "resolution": "seqNoService = new SequenceNumbersService(shardId, engineConfig.getIndexSettings());",
    "conflict": "this.warmer = engineConfig.getWarmer();             seqNoService = new SequenceNumbersService(shardId, engineConfig.getIndexSettings());"
  },
  {
    "devdecision": "Version 2",
    "id": 76124,
    "v2": "indexShardRoutingBuilder.addShard(TestShardRouting.newShardRouting(index, 0, primaryNode, relocatingNode, null, true,",
    "resolution": "indexShardRoutingBuilder.addShard(TestShardRouting.newShardRouting(index, 0, primaryNode, relocatingNode, null, true,",
    "conflict": "indexShardRoutingBuilder.addShard(TestShardRouting.newShardRouting(index, 0, primaryNode, relocatingNode, null, primaryTerm, true,"
  },
  {
    "devdecision": "Version 2",
    "id": 76127,
    "v2": "assertThat(clusterState.metaData().index(\"test\").primaryTerm(0), equalTo(2L));",
    "resolution": "assertThat(clusterState.metaData().index(\"test\").primaryTerm(0), equalTo(2L));",
    "conflict": "assertThat(routingTable.index(\"test\").shard(0).primaryShard().primaryTerm(), equalTo(2L));"
  },
  {
    "devdecision": "Version 2",
    "id": 76128,
    "v2": "assertThat(clusterState.metaData().index(\"test\").primaryTerm(0), equalTo(2L));",
    "resolution": "assertThat(clusterState.metaData().index(\"test\").primaryTerm(0), equalTo(2L));",
    "conflict": "assertThat(routingNodes.node(nodeIdRemaining).shardsWithState(INITIALIZING).get(0).primaryTerm(), equalTo(2L));"
  },
  {
    "devdecision": "Version 2",
    "id": 76131,
    "v2": "indexShard.acquireReplicaOperationLock(indexShard.getPrimaryTerm());",
    "resolution": "indexShard.acquireReplicaOperationLock(indexShard.getPrimaryTerm());",
    "conflict": "indexShard.acquireReplicaOperationLock(indexShard.routingEntry().primaryTerm());"
  },
  {
    "devdecision": "Combination",
    "id": 76138,
    "v2": "",
    "resolution": "import org.elasticsearch.index.shard.IndexingStats;",
    "conflict": "import org.elasticsearch.index.shard.IndexingStats; import org.elasticsearch.index.suggest.stats.SuggestStats;"
  },
  {
    "devdecision": "Version 1",
    "id": 76144,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.AggregatorBuilder; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilder;",
    "conflict": "import org.elasticsearch.search.aggregations.AggregatorBuilder; import org.elasticsearch.search.aggregations.pipeline.PipelineAggregatorBuilder;"
  },
  {
    "devdecision": "Manual",
    "id": 76153,
    "v2": "ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), test.cache().getPercolatorQueryCache(), shard, new CommonStatsFlags()), shard.commitStats());",
    "resolution": "ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), test.cache().getPercolatorQueryCache(), shard, new CommonStatsFlags()), shard.commitStats(), shard.seqNoStats());",
    "conflict": "ShardStats stats = new ShardStats(shard.routingEntry(), shard.shardPath(), new CommonStats(indicesService.getIndicesQueryCache(), shard, new CommonStatsFlags()), shard.commitStats(), shard.seqNoStats());"
  },
  {
    "devdecision": "Concatenation",
    "id": 76154,
    "v2": "import org.elasticsearch.common.transport.TransportAddress;",
    "resolution": "import org.elasticsearch.common.transport.TransportAddress;import org.elasticsearch.node.Node;",
    "conflict": "import org.elasticsearch.node.Node;"
  },
  {
    "devdecision": "Version 2",
    "id": 76169,
    "v2": "import static org.elasticsearch.common.settings.Settings.settingsBuilder; import static org.elasticsearch.common.util.CollectionUtils.arrayAsArrayList;",
    "resolution": "import static org.elasticsearch.common.settings.Settings.settingsBuilder; import static org.elasticsearch.common.util.CollectionUtils.arrayAsArrayList;",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 76173,
    "v2": "namedWriteableRegistry.registerPrototype(SortBuilder.class, FieldSortBuilder.PROTOTYPE);",
    "resolution": "namedWriteableRegistry.registerPrototype(SortBuilder.class, FieldSortBuilder.PROTOTYPE);        namedWriteableRegistry.registerPrototype(SortBuilder.class, ScriptSortBuilder.PROTOTYPE);",
    "conflict": "namedWriteableRegistry.registerPrototype(SortBuilder.class, ScriptSortBuilder.PROTOTYPE);"
  },
  {
    "devdecision": "Version 1",
    "id": 76174,
    "v2": "ingestStats = in.readOptionalWritable(IngestStats.PROTO::readFrom);",
    "resolution": "ingestStats = in.readOptionalWritable(IngestStats::new);",
    "conflict": "ingestStats = in.readOptionalWritable(IngestStats::new);"
  },
  {
    "devdecision": "Version 1",
    "id": 76181,
    "v2": "import org.elasticsearch.index.shard.ShardId;",
    "resolution": "import org.elasticsearch.index.query.QueryShardContext;",
    "conflict": "import org.elasticsearch.index.query.QueryShardContext;"
  },
  {
    "devdecision": "Version 1",
    "id": 76183,
    "v2": "suggestionContext.setShard(shardId);",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 76184,
    "v2": "import org.elasticsearch.index.shard.ShardId;",
    "resolution": "import org.elasticsearch.index.query.QueryShardContext;",
    "conflict": "import org.elasticsearch.index.query.QueryShardContext;"
  },
  {
    "devdecision": "Version 1",
    "id": 76185,
    "v2": "public static class SuggestionContext {",
    "resolution": "public abstract static class SuggestionContext {",
    "conflict": "public abstract static class SuggestionContext {"
  },
  {
    "devdecision": "Manual",
    "id": 76232,
    "v2": "public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, boolean dynamic, Scope scope) {",
    "resolution": "public Setting(Key key, Function<Settings, String> defaultValue, Function<String, T> parser, SettingsProperty... properties) {",
    "conflict": "public Setting(String key, Function<Settings, String> defaultValue, Function<String, T> parser, SettingsProperty... properties) {"
  },
  {
    "devdecision": "Version 1",
    "id": 76241,
    "v2": "",
    "resolution": "import org.elasticsearch.common.settings.Setting.SettingsProperty; import org.elasticsearch.common.settings.Settings;",
    "conflict": "import org.elasticsearch.common.settings.Setting.SettingsProperty; import org.elasticsearch.common.settings.Settings;"
  },
  {
    "devdecision": "Manual",
    "id": 76250,
    "v2": "builder = RestActions.getRestSearchSource(restContent, indicesQueriesRegistry, parseFieldMatcher, aggParsers);",
    "resolution": "RestActions.parseRestSearchSource(searchRequest.source(), restContent, indicesQueriesRegistry, parseFieldMatcher,",
    "conflict": "RestActions.parseRestSearchSource(searchRequest.source(), restContent, indicesQueriesRegistry, parseFieldMatcher);"
  },
  {
    "devdecision": "Manual",
    "id": 76252,
    "v2": "return SearchSourceBuilder.parseSearchSource(parser, queryParseContext, aggParsers);",
    "resolution": "source.parseXContent(parser, queryParseContext, aggParsers);",
    "conflict": "source.parseXContent(parser, queryParseContext);"
  },
  {
    "devdecision": "Manual",
    "id": 76271,
    "v2": "try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId())) {",
    "resolution": "try (Releasable ignored = getIndexShardReferenceOnReplica(request.shardId(), request.primaryTerm())) {",
    "conflict": "try (Releasable ignored = getIndexShardOperationsCounterOnReplica(request.shardId(), request.primaryTerm)) {"
  },
  {
    "devdecision": "Manual",
    "id": 76278,
    "v2": "private IndexMetaData(Index index, long version, State state, int numberOfShards, int numberOfReplicas, Settings settings,",
    "resolution": "private IndexMetaData(Index index, long version, long[] primaryTerms, State state, int numberOfShards, int numberOfReplicas, Settings settings,",
    "conflict": "private IndexMetaData(String index, long version, long[] primaryTerms, State state, int numberOfShards, int numberOfReplicas, Settings settings,"
  },
  {
    "devdecision": "Concatenation",
    "id": 76285,
    "v2": "* @param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.",
    "resolution": "* @param existingAllocationId allocation id to use. If null, a fresh allocation id is generated.             * If a primary is initalized, it's term is incremented.",
    "conflict": "* If a primary is initalized, it's term is incremented."
  },
  {
    "devdecision": "Manual",
    "id": 76287,
    "v2": "indicesRouting.put(indexRoutingTable.value.getIndex().getName(), indexRoutingTable.value);",
    "resolution": "indicesRouting.put(indexRoutingTable.value.getIndex().getName(), indexRoutingTable.value.normalizePrimaryTerms());",
    "conflict": "indicesRouting.put(indexRoutingTable.value.index(), indexRoutingTable.value.normalizeVersionsAndPrimaryTerms());"
  },
  {
    "devdecision": "Manual",
    "id": 76291,
    "v2": "return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primary, ShardRoutingState.INITIALIZING, unassignedInfo,",
    "resolution": "return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource,primaryTerm, primary,",
    "conflict": "return new ShardRouting(index, shardId, relocatingNodeId, currentNodeId, restoreSource, primaryTerm, primary, ShardRoutingState.INITIALIZING, version, unassignedInfo,"
  },
  {
    "devdecision": "Combination",
    "id": 76294,
    "v2": "",
    "resolution": "sb.append(\", t[\").append(primaryTerm).append(\"]\");",
    "conflict": "sb.append(\", v[\").append(version).append(\"]\");         sb.append(\", t[\").append(primaryTerm).append(\"]\");"
  },
  {
    "devdecision": "Version 2",
    "id": 76300,
    "v2": "",
    "resolution": "",
    "conflict": "this.mergePolicyConfig = new MergePolicyConfig(logger, settings);"
  },
  {
    "devdecision": "Concatenation",
    "id": 76305,
    "v2": "import org.elasticsearch.index.SearchSlowLog;",
    "resolution": "import org.elasticsearch.index.SearchSlowLog;import org.elasticsearch.index.seqno.SeqNoStats;",
    "conflict": "import org.elasticsearch.index.seqno.SeqNoStats;"
  },
  {
    "devdecision": "Version 2",
    "id": 76307,
    "v2": "protected void prepareTargetForTranslog(final int totalTranslogOps) throws IOException {",
    "resolution": "protected void prepareTargetForTranslog(final int totalTranslogOps) throws IOException {",
    "conflict": "protected void prepareTargetForTranslog(final Translog.View translogView) {"
  },
  {
    "devdecision": "Manual",
    "id": 76310,
    "v2": "final ShardRouting routing = TestShardRouting.newShardRouting(\"test\", 0, \"xyz\", \"def\", false, ShardRoutingState.STARTED);",
    "resolution": "final ShardRouting routing = TestShardRouting.newShardRouting(\"test\", 0, \"xyz\", \"def\", 1, false, ShardRoutingState.STARTED);",
    "conflict": "final ShardRouting routing = TestShardRouting.newShardRouting(\"test\", 0, \"xyz\", \"def\", 1, false, ShardRoutingState.STARTED, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76311,
    "v2": "copy == 0, ShardRoutingState.STARTED);",
    "resolution": "null, 1, copy == 0, ShardRoutingState.STARTED);",
    "conflict": "1, copy == 0, ShardRoutingState.STARTED, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76323,
    "v2": "ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_1 = ShardRouting.newUnassigned(\"test\", 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76326,
    "v2": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));",
    "resolution": "ShardRouting shard = ShardRouting.newUnassigned(new Index(\"test\",\"_na_\"), 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));",
    "conflict": "ShardRouting shard = ShardRouting.newUnassigned(\"test\", 0, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));"
  },
  {
    "devdecision": "Manual",
    "id": 76331,
    "v2": "return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primary(), routing.state(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());",
    "resolution": "return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primaryTerm(), routing.primary(), routing.state(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());",
    "conflict": "return new ShardRouting(routing.index(), routing.shardId().id(), routing.currentNodeId(), routing.relocatingNodeId(), restoreSource, routing.primaryTerm(), routing.primary(), routing.state(), routing.version(), routing.unassignedInfo(), routing.allocationId(), true, routing.getExpectedShardSize());"
  },
  {
    "devdecision": "Manual",
    "id": 76341,
    "v2": "ShardRouting shard = TestShardRouting.newShardRouting(\"test\", 1, null, null, null, true, ShardRoutingState.UNASSIGNED, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));",
    "resolution": "ShardRouting shard = TestShardRouting.newShardRouting(\"test\", 1, null, null, null, 1, true, ShardRoutingState.UNASSIGNED, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));",
    "conflict": "ShardRouting shard = TestShardRouting.newShardRouting(\"test\", 1, null, null, null, 1, true, ShardRoutingState.UNASSIGNED, 1, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, null));"
  },
  {
    "devdecision": "Manual",
    "id": 76342,
    "v2": "ShardRouting routing = TestShardRouting.newShardRouting(index, shard, ip, null, null, primary, state);",
    "resolution": "ShardRouting routing = TestShardRouting.newShardRouting(index, shard, ip, null, null, 1, primary, state);",
    "conflict": "ShardRouting routing = TestShardRouting.newShardRouting(index, shard, ip, null, null, 1, primary, state, 1);"
  },
  {
    "devdecision": "Manual",
    "id": 76358,
    "v2": "ShardRouting test_1 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 1, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting test_1 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 1, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_1 = ShardRouting.newUnassigned(\"test\", 1, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76359,
    "v2": "ShardRouting test_2 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 2, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting test_2 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 2, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_2 = ShardRouting.newUnassigned(\"test\", 2, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76360,
    "v2": "ShardRouting test_3 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 3, null, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting test_3 = ShardRouting.newUnassigned(indexMetaData.getIndex(), 3, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_3 = ShardRouting.newUnassigned(\"test\", 3, null, 1, true, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76362,
    "v2": "ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting test_1 = ShardRouting.newUnassigned(index, 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_1 = ShardRouting.newUnassigned(\"test\", 1, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76363,
    "v2": "ShardRouting test_2 = ShardRouting.newUnassigned(index, 2, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting test_2 = ShardRouting.newUnassigned(index, 2, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_2 = ShardRouting.newUnassigned(\"test\", 2, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76364,
    "v2": "ShardRouting test_3 = ShardRouting.newUnassigned(index, 3, null, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting test_3 = ShardRouting.newUnassigned(index, 3, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting test_3 = ShardRouting.newUnassigned(\"test\", 3, null, 1, false, new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76365,
    "v2": "ShardRouting other_0 = ShardRouting.newUnassigned(new Index(\"other\", \"_NA_\"), 0, null, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "resolution": "ShardRouting other_0 = ShardRouting.newUnassigned(new Index(\"other\", \"_NA_\"), 0, null, 1, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));",
    "conflict": "ShardRouting other_0 = ShardRouting.newUnassigned(\"other\", 0, null, 1, randomBoolean(), new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED, \"foo\"));"
  },
  {
    "devdecision": "Manual",
    "id": 76375,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1l, VersionType.INTERNAL, Engine.Operation.Origin.PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76376,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 3L, VersionType.INTERNAL, PRIMARY, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3l, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76377,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L, VersionType.INTERNAL, PRIMARY, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc,SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 1l, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76378,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 3L, VersionType.INTERNAL, PRIMARY, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 3l, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76379,
    "v2": "Engine.Delete delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 1L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "resolution": "Engine.Delete delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "conflict": "Engine.Delete delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 1l, VersionType.INTERNAL, PRIMARY, 0, false);"
  },
  {
    "devdecision": "Manual",
    "id": 76380,
    "v2": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 3L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "resolution": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "conflict": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 3l, VersionType.INTERNAL, PRIMARY, 0, false);"
  },
  {
    "devdecision": "Manual",
    "id": 76381,
    "v2": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 2L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "resolution": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "conflict": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 2l, VersionType.INTERNAL, PRIMARY, 0, false);"
  },
  {
    "devdecision": "Manual",
    "id": 76382,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L, VersionType.INTERNAL, PRIMARY, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2l, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76383,
    "v2": "Engine.Delete delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 1L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "resolution": "Engine.Delete delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 1L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "conflict": "Engine.Delete delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 1l, VersionType.INTERNAL, PRIMARY, 0, false);"
  },
  {
    "devdecision": "Manual",
    "id": 76384,
    "v2": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 3L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "resolution": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 3L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "conflict": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 3l, VersionType.INTERNAL, PRIMARY, 0, false);"
  },
  {
    "devdecision": "Manual",
    "id": 76385,
    "v2": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 2L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "resolution": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0, false);",
    "conflict": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), SequenceNumbersService.UNASSIGNED_SEQ_NO, 2l, VersionType.INTERNAL, PRIMARY, 0, false);"
  },
  {
    "devdecision": "Manual",
    "id": 76386,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L, VersionType.INTERNAL, PRIMARY, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2L, VersionType.INTERNAL, PRIMARY, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, SequenceNumbersService.UNASSIGNED_SEQ_NO, 2l, VersionType.INTERNAL, PRIMARY, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76387,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1l, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76388,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2L",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2l"
  },
  {
    "devdecision": "Manual",
    "id": 76389,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 1L",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1L",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 1l"
  },
  {
    "devdecision": "Manual",
    "id": 76390,
    "v2": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 3L",
    "resolution": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), delete.seqNo(), 3L",
    "conflict": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), delete.seqNo(), 3l"
  },
  {
    "devdecision": "Manual",
    "id": 76391,
    "v2": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), 3L",
    "resolution": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), delete.seqNo(), 3L",
    "conflict": "delete = new Engine.Delete(\"test\", \"1\", newUid(\"1\"), delete.seqNo(), 3l"
  },
  {
    "devdecision": "Manual",
    "id": 76392,
    "v2": "index = new Engine.Index(newUid(\"1\"), doc, 2L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);",
    "resolution": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2L, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);",
    "conflict": "index = new Engine.Index(newUid(\"1\"), doc, index.seqNo(), 2l, VersionType.INTERNAL.versionTypeForReplicationAndRecovery(), REPLICA, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 76396,
    "v2": "indexShard.acquireReplicaOperationLock();",
    "resolution": "indexShard.acquireReplicaOperationLock(indexShard.routingEntry().primaryTerm());",
    "conflict": "indexShard.incrementOperationCounterOnPrimary();"
  },
  {
    "devdecision": "Manual",
    "id": 76406,
    "v2": "routingTable.addShard(TestShardRouting.newShardRouting(\"test\", i, \"xyz\", null, null, j == 0, state, unassignedInfo));",
    "resolution": "routingTable.addShard(TestShardRouting.newShardRouting(\"test\", i, \"xyz\", null, null, primaryTerm, j == 0, state, unassignedInfo));",
    "conflict": "routingTable.addShard(TestShardRouting.newShardRouting(\"test\", i, \"xyz\", null, null, primaryTerm, j == 0, state, 0, unassignedInfo));"
  },
  {
    "devdecision": "Manual",
    "id": 76411,
    "v2": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test\", \"_na_\", 0), \"type\", String.valueOf(i), 1, delete));",
    "resolution": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test\", \"_na_\", 0), \"type\", String.valueOf(i), i, 1, delete));",
    "conflict": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test\", 0), \"type\", String.valueOf(i), i, 1, delete));"
  },
  {
    "devdecision": "Manual",
    "id": 76412,
    "v2": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test-\" + index, \"_na_\", 0), \"type\", String.valueOf(i), 1, delete));",
    "resolution": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test-\" + index, \"_na_\", 0), \"type\", String.valueOf(i), i, 1, delete));",
    "conflict": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test-\" + index, 0), \"type\", String.valueOf(i), i, 1, delete));"
  },
  {
    "devdecision": "Version 2",
    "id": 76420,
    "v2": "import org.elasticsearch.indices.TermsLookup;",
    "resolution": "import org.elasticsearch.indices.TermsLookup;",
    "conflict": "import org.elasticsearch.indices.cache.query.terms.TermsLookup;"
  },
  {
    "devdecision": "Version 2",
    "id": 76423,
    "v2": "import org.apache.lucene.analysis.Analyzer;",
    "resolution": "import org.apache.lucene.analysis.Analyzer;",
    "conflict": "import org.apache.lucene.util.BytesRef;"
  },
  {
    "devdecision": "Version 2",
    "id": 76425,
    "v2": "public abstract static class SuggestionContext {",
    "resolution": "public abstract static class SuggestionContext {",
    "conflict": "public static class SuggestionContext {"
  },
  {
    "devdecision": "Version 2",
    "id": 76428,
    "v2": "final CompletionSuggestionContext suggestion = new CompletionSuggestionContext(shardContext);",
    "resolution": "final CompletionSuggestionContext suggestion = new CompletionSuggestionContext(shardContext);",
    "conflict": "final CompletionSuggestionContext suggestion = new CompletionSuggestionContext(completionSuggester, mapperService);"
  },
  {
    "devdecision": "Version 2",
    "id": 76429,
    "v2": "public static final CompletionSuggester PROTOTYPE = new CompletionSuggester();",
    "resolution": "public static final CompletionSuggester PROTOTYPE = new CompletionSuggester();",
    "conflict": "static final CompletionSuggester PROTOTYPE = new CompletionSuggester();"
  },
  {
    "devdecision": "Manual",
    "id": 76430,
    "v2": "protected SuggestionContext build(QueryShardContext context) throws IOException {",
    "resolution": "protected SuggestionContext innerBuild(QueryShardContext context) throws IOException {",
    "conflict": "protected SuggestionContext innerBuild(QueryShardContext context) throws IOException {"
  },
  {
    "devdecision": "Version 2",
    "id": 76439,
    "v2": "public static final TermSuggester PROTOTYPE = new TermSuggester();",
    "resolution": "public static final TermSuggester PROTOTYPE = new TermSuggester();",
    "conflict": "static final TermSuggester PROTOTYPE = new TermSuggester();"
  },
  {
    "devdecision": "Manual",
    "id": 76440,
    "v2": "",
    "resolution": "import org.elasticsearch.search.suggest.DirectSpellcheckerSettings;",
    "conflict": "import org.elasticsearch.search.suggest.DirectSpellcheckerSettings; import org.elasticsearch.search.suggest.SuggestUtils;"
  },
  {
    "devdecision": "Version 2",
    "id": 76444,
    "v2": "suggesters = new Suggesters(Collections.emptyMap());",
    "resolution": "suggesters = new Suggesters(Collections.emptyMap());",
    "conflict": "suggesters = new Suggesters(Collections.emptyMap(), scriptService, null);"
  },
  {
    "devdecision": "Manual",
    "id": 76446,
    "v2": "suggestBuilder.setText(randomAsciiOfLengthBetween(5, 50));",
    "resolution": "suggestBuilder.setGlobalText(randomAsciiOfLengthBetween(5, 50));",
    "conflict": "suggestBuilder.setText(\"This is some global Text\");"
  },
  {
    "devdecision": "Version 2",
    "id": 76457,
    "v2": "",
    "resolution": "",
    "conflict": "import com.carrotsearch.hppc.ObjectObjectAssociativeContainer;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76458,
    "v2": "private SearchLookup searchLookup;",
    "resolution": "private final FetchPhase fetchPhase;    private SearchLookup searchLookup;",
    "conflict": "private final FetchPhase fetchPhase;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76459,
    "v2": "this.queryShardContext = queryShardContext;",
    "resolution": "this.fetchPhase = null;        this.queryShardContext = queryShardContext;",
    "conflict": "this.fetchPhase = null;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76463,
    "v2": "private final QueryShardContext queryShardContext;",
    "resolution": "private FetchPhase fetchPhase;    private final QueryShardContext queryShardContext;",
    "conflict": "private FetchPhase fetchPhase;"
  },
  {
    "devdecision": "Version 1",
    "id": 76471,
    "v2": "",
    "resolution": "private boolean prune = DEFAULT_COLLATE_PRUNE;     private List<DirectCandidateGenerator> generators = new ArrayList<>();",
    "conflict": "private boolean prune = DEFAULT_COLLATE_PRUNE;     private List<DirectCandidateGenerator> generators = new ArrayList<>();"
  },
  {
    "devdecision": "Version 1",
    "id": 76480,
    "v2": "List<RescoreBuilder<?>> rescoreBuilders = new ArrayList<>();",
    "resolution": "rescoreBuilders = new ArrayList<>();",
    "conflict": "rescoreBuilders = new ArrayList<>();"
  },
  {
    "devdecision": "Manual",
    "id": 76488,
    "v2": ".extendedBounds(0L, (long) numBuckets_empty_rnd - 1)",
    "resolution": ".extendedBounds(new ExtendedBounds(0L, (long) numBuckets_empty_rnd - 1))",
    "conflict": ".extendedBounds(new ExtendedBounds(0l, (long) numBuckets_empty_rnd - 1))"
  },
  {
    "devdecision": "Version 2",
    "id": 76503,
    "v2": "import java.util.Map;",
    "resolution": "import java.util.Map;",
    "conflict": "import java.util.function.Function;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76512,
    "v2": "import org.elasticsearch.env.Environment;",
    "resolution": "import org.elasticsearch.env.Environment;import org.elasticsearch.common.util.concurrent.ThreadContext;",
    "conflict": "import org.elasticsearch.common.util.concurrent.ThreadContext;"
  },
  {
    "devdecision": "Version 2",
    "id": 76516,
    "v2": "import org.elasticsearch.node.Node;",
    "resolution": "import org.elasticsearch.node.Node;",
    "conflict": "import org.elasticsearch.common.util.concurrent.ThreadContext;"
  },
  {
    "devdecision": "Version 1",
    "id": 76534,
    "v2": "import org.elasticsearch.common.HasContextAndHeaders;",
    "resolution": "import org.elasticsearch.common.ParseField;",
    "conflict": "import org.elasticsearch.common.ParseField;"
  },
  {
    "devdecision": "Manual",
    "id": 76559,
    "v2": "public static final String INDEX_MAPPER_DYNAMIC_SETTING = \"index.mapper.dynamic\";     public static final String INDEX_MAPPING_NESTED_FIELDS_LIMIT_SETTING = \"index.mapping.nested_fields.limit\";",
    "resolution": "public static final Setting<Long> INDEX_MAPPING_NESTED_FIELDS_LIMIT_SETTING = Setting.longSetting(\"index.mapping.nested_fields.limit\", 50l, 0, false, Setting.Scope.INDEX);",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 76561,
    "v2": "",
    "resolution": "import org.elasticsearch.common.settings.Setting;",
    "conflict": "import org.elasticsearch.common.io.stream.NamedWriteableRegistry; import org.elasticsearch.common.settings.Setting;"
  },
  {
    "devdecision": "Manual",
    "id": 76578,
    "v2": "public class IndexingMemoryController extends AbstractComponent implements IndexEventListener, Closeable {",
    "resolution": "public class IndexingMemoryController extends AbstractComponent implements Closeable {",
    "conflict": "public class IndexingMemoryController extends AbstractLifecycleComponent<IndexingMemoryController> {"
  },
  {
    "devdecision": "Version 1",
    "id": 76590,
    "v2": "\"  \\\"size_in_bytes\\\" : 431\\n\" +",
    "resolution": "\"  \\\"size_in_bytes\\\" : 437\\n\" +",
    "conflict": "\"  \\\"size_in_bytes\\\" : 437\\n\" +"
  },
  {
    "devdecision": "Version 1",
    "id": 76591,
    "v2": "1 + randomInt(100000),",
    "resolution": "opCount, 1 + randomInt(100000),",
    "conflict": "opCount, 1 + randomInt(100000),"
  },
  {
    "devdecision": "Version 2",
    "id": 76592,
    "v2": "",
    "resolution": "",
    "conflict": "import com.carrotsearch.hppc.IntObjectHashMap;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76593,
    "v2": "import org.elasticsearch.search.aggregations.support.AggregationContext;",
    "resolution": "import org.elasticsearch.search.fetch.FetchPhase;import org.elasticsearch.search.aggregations.support.AggregationContext;",
    "conflict": "import org.elasticsearch.search.fetch.FetchPhase;"
  },
  {
    "devdecision": "Manual",
    "id": 76609,
    "v2": "iwc.setRAMBufferSizeMB(engineConfig.getIndexingBufferSize().mbFrac());",
    "resolution": "iwc.setUseCompoundFile(engineConfig.isCompoundOnFlush());",
    "conflict": "iwc.setUseCompoundFile(engineConfig.isCompoundOnFlush());"
  },
  {
    "devdecision": "Version 2",
    "id": 76616,
    "v2": "newFile = TranslogWriter.create(shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), getChannelFactory(), config.getBufferSize());",
    "resolution": "newFile = TranslogWriter.create(shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), getChannelFactory(), config.getBufferSize());",
    "conflict": "newFile = TranslogWriter.create(config.getType(), shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), config.getBufferSizeBytes(), getChannelFactory());"
  },
  {
    "devdecision": "Version 1",
    "id": 76633,
    "v2": "controller.assertBuffers(shard1, new ByteSizeValue(10, ByteSizeUnit.MB)); // translog is maxed at 64K",
    "resolution": "controller.assertBuffer(shard1, 1);",
    "conflict": "controller.assertBuffer(shard1, 1);"
  },
  {
    "devdecision": "Version 1",
    "id": 76634,
    "v2": "controller.assertBuffers(shard2, new ByteSizeValue(10, ByteSizeUnit.MB)); // translog is maxed at 64K",
    "resolution": "controller.assertBuffer(shard2, 1);",
    "conflict": "controller.assertBuffer(shard2, 1);"
  },
  {
    "devdecision": "Version 1",
    "id": 76636,
    "v2": "controller.assertBuffers(shard0, new ByteSizeValue(5, ByteSizeUnit.MB));         controller.assertBuffers(shard1, new ByteSizeValue(5, ByteSizeUnit.MB));",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 76642,
    "v2": "copy == 0, ShardRoutingState.STARTED, 0);",
    "resolution": "1, copy == 0, ShardRoutingState.STARTED, 0);",
    "conflict": "1, copy == 0, ShardRoutingState.STARTED, 0);"
  },
  {
    "devdecision": "Version 1",
    "id": 76652,
    "v2": "this.retryDelayStateSync = settings.getAsTime(INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC, TimeValue.timeValueMillis(500));",
    "resolution": "this.retryDelayStateSync = INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC_SETTING.get(settings);",
    "conflict": "this.retryDelayStateSync = INDICES_RECOVERY_RETRY_DELAY_STATE_SYNC_SETTING.get(settings);"
  },
  {
    "devdecision": "Concatenation",
    "id": 76659,
    "v2": "import org.elasticsearch.common.Randomness;",
    "resolution": "import org.elasticsearch.common.Randomness;import org.elasticsearch.common.settings.ClusterSettings;",
    "conflict": "import org.elasticsearch.common.settings.ClusterSettings;"
  },
  {
    "devdecision": "Version 1",
    "id": 76664,
    "v2": "List<T> list = arrayAsArrayList(values);",
    "resolution": "List<T> list = new ArrayList<>(values);",
    "conflict": "List<T> list = new ArrayList<>(values);"
  },
  {
    "devdecision": "Manual",
    "id": 76676,
    "v2": "newFile = TranslogWriter.create(config.getType(), shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), config.getBufferSize(), getChannelFactory());",
    "resolution": "newFile = TranslogWriter.create(config.getType(), shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), config.getBufferSizeBytes(), getChannelFactory());",
    "conflict": "newFile = TranslogWriter.create(config.getType(), shardId, translogUUID, fileGeneration, location.resolve(getFilename(fileGeneration)), new OnCloseRunnable(), config.getBufferSizeBytes());"
  },
  {
    "devdecision": "Manual",
    "id": 76693,
    "v2": "controller.assertBuffers(shard1, new ByteSizeValue(10, ByteSizeUnit.MB), new ByteSizeValue(64, ByteSizeUnit.KB)); // translog is maxed at 64K",
    "resolution": "controller.assertBuffer(shard1, new ByteSizeValue(1, ByteSizeUnit.MB));",
    "conflict": "controller.assertBuffer(shard2, new ByteSizeValue(1, ByteSizeUnit.MB));"
  },
  {
    "devdecision": "Version 2",
    "id": 76701,
    "v2": "public class DeleteResponse extends DocWriteResponse {",
    "resolution": "public class DeleteResponse extends DocWriteResponse {",
    "conflict": "public class DeleteResponse extends ActionWriteResponse implements StatusToXContent {"
  },
  {
    "devdecision": "Version 2",
    "id": 76705,
    "v2": "public class IndexResponse extends DocWriteResponse {",
    "resolution": "public class IndexResponse extends DocWriteResponse {",
    "conflict": "public class IndexResponse extends ActionWriteResponse implements StatusToXContent {"
  },
  {
    "devdecision": "Manual",
    "id": 76716,
    "v2": "private WriteResult shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, MetaData metaData,",
    "resolution": "private WriteResult<IndexResponse> shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, MetaData metaData,",
    "conflict": "private WriteResult<IndexResponse> shardIndexOperation(BulkShardRequest request, IndexRequest indexRequest, ClusterState clusterState,"
  },
  {
    "devdecision": "Version 2",
    "id": 76718,
    "v2": "WriteResult<DeleteResponse> result = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);",
    "resolution": "WriteResult<DeleteResponse> result = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);",
    "conflict": "WriteResult result = TransportDeleteAction.executeDeleteRequestOnPrimary(deleteRequest, indexShard);"
  },
  {
    "devdecision": "Version 2",
    "id": 76729,
    "v2": "return new Tuple<>(response, request);",
    "resolution": "return new Tuple<>(response, request);",
    "conflict": "return new Tuple<>(response, shardRequest.request);"
  },
  {
    "devdecision": "Version 1",
    "id": 76730,
    "v2": "final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.version(), request.versionType());",
    "resolution": "final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.seqNo(), request.version(), request.versionType());",
    "conflict": "final Engine.Index operation = indexShard.prepareIndexOnReplica(sourceToParse, request.seqNo(), request.version(), request.versionType());"
  },
  {
    "devdecision": "Version 2",
    "id": 76735,
    "v2": "shardId, consistencyLevel, sizeActive, requiredNumber, transportPrimaryAction, request);",
    "resolution": "shardId, consistencyLevel, sizeActive, requiredNumber, transportPrimaryAction, request);",
    "conflict": "shard.shardId(), consistencyLevel, sizeActive, requiredNumber, actionName, internalRequest.request);"
  },
  {
    "devdecision": "Version 1",
    "id": 76739,
    "v2": "shardId.getIndex(), shardId.getId(), entry.getKey(), entry.getValue(), restStatus, false",
    "resolution": "shardId.getIndex(), shardId.getId(), entry.getKey(), entry.getValue(), restStatus, false",
    "conflict": "shardId.getIndex(), shardId.getId(), entry.getKey(), entry.getValue(), restStatus, false"
  },
  {
    "devdecision": "Version 2",
    "id": 76746,
    "v2": "final ShardId shardId = new ShardId(getResult.getIndex(), request.shardId());",
    "resolution": "final ShardId shardId = new ShardId(getResult.getIndex(), request.shardId());",
    "conflict": "final ShardId shardId = new ShardId(request.index(), request.shardId());"
  },
  {
    "devdecision": "Version 2",
    "id": 76747,
    "v2": "UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(), getResult.getVersion(), false);",
    "resolution": "UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(), getResult.getVersion(), false);",
    "conflict": "UpdateResponse update = new UpdateResponse(new ShardId(getResult.getIndex(), request.shardId()), getResult.getType(), getResult.getId(), getResult.getVersion(), false);"
  },
  {
    "devdecision": "Version 2",
    "id": 76748,
    "v2": "UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(), getResult.getVersion(), false);",
    "resolution": "UpdateResponse update = new UpdateResponse(shardId, getResult.getType(), getResult.getId(), getResult.getVersion(), false);",
    "conflict": "UpdateResponse update = new UpdateResponse(new ShardId(getResult.getIndex(), request.shardId()), getResult.getType(), getResult.getId(), getResult.getVersion(), false);"
  },
  {
    "devdecision": "Version 1",
    "id": 76755,
    "v2": "return prepareIndex(docMapper(source.type()), source, version, versionType, Engine.Operation.Origin.PRIMARY);",
    "resolution": "return prepareIndex(docMapper(source.type()), source, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, versionType, Engine.Operation.Origin.PRIMARY);",
    "conflict": "return prepareIndex(docMapper(source.type()), source, SequenceNumbersService.UNASSIGNED_SEQ_NO, version, versionType, Engine.Operation.Origin.PRIMARY);"
  },
  {
    "devdecision": "Version 2",
    "id": 76759,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.ElasticsearchException; import org.elasticsearch.action.DocWriteResponse;"
  },
  {
    "devdecision": "Version 1",
    "id": 76766,
    "v2": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test\", 0), \"type\", String.valueOf(i), 1, delete));",
    "resolution": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test\", 0), \"type\", String.valueOf(i), i, 1, delete));",
    "conflict": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test\", 0), \"type\", String.valueOf(i), i, 1, delete));"
  },
  {
    "devdecision": "Version 1",
    "id": 76767,
    "v2": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test-\" + index, 0), \"type\", String.valueOf(i), 1, delete));",
    "resolution": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test-\" + index, 0), \"type\", String.valueOf(i), i, 1, delete));",
    "conflict": "items[i] = new BulkItemResponse(i, \"delete\", new DeleteResponse(new ShardId(\"test-\" + index, 0), \"type\", String.valueOf(i), i, 1, delete));"
  },
  {
    "devdecision": "Version 1",
    "id": 76771,
    "v2": "final WriteResult<IndexResponse> result = executeIndexRequestOnPrimary(request, indexShard);",
    "resolution": "final WriteResult<IndexResponse> result = executeIndexRequestOnPrimary(request, indexShard, mappingUpdatedAction);",
    "conflict": "final WriteResult<IndexResponse> result = executeIndexRequestOnPrimary(request, indexShard, mappingUpdatedAction);"
  },
  {
    "devdecision": "Concatenation",
    "id": 76775,
    "v2": "import com.carrotsearch.hppc.cursors.IntObjectCursor;",
    "resolution": "import com.carrotsearch.hppc.cursors.IntObjectCursor;import com.carrotsearch.hppc.LongArrayList;",
    "conflict": "import com.carrotsearch.hppc.LongArrayList;"
  },
  {
    "devdecision": "Version 2",
    "id": 76778,
    "v2": "",
    "resolution": "",
    "conflict": "this.mappings = mappings;         this.customs = customs;"
  },
  {
    "devdecision": "Version 2",
    "id": 76787,
    "v2": "new ClusterStateHealth(clusterState.metaData(), result.routingTable()),",
    "resolution": "new ClusterStateHealth(clusterState.metaData(), result.routingTable()),",
    "conflict": "new ClusterStateHealth(result.metaData(), result.routingTable()),"
  },
  {
    "devdecision": "Manual",
    "id": 76790,
    "v2": "* @param changed a flag to determine whether the actual {@link RoutingTable} has been changed",
    "resolution": "* @param changed      a flag to determine whether the actual {@link RoutingTable} has been changed",
    "conflict": "*  @param changed a flag to determine whether the actual {@link RoutingTable} has been changed"
  },
  {
    "devdecision": "Version 2",
    "id": 76791,
    "v2": "import java.util.concurrent.atomic.AtomicBoolean; import java.util.stream.Collectors;",
    "resolution": "import java.util.concurrent.atomic.AtomicBoolean; import java.util.stream.Collectors;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 76808,
    "v2": "assertFieldNames(set(\"a\", \"b\", \"b.c\", \"_uid\", \"_type\", \"_version\", \"_source\", \"_all\"), doc);",
    "resolution": "assertFieldNames(set(\"a\", \"b\", \"b.c\", \"_uid\", \"_type\", \"_version\", \"_seq_no\", \"_source\", \"_all\"), doc);",
    "conflict": "assertFieldNames(set(\"a\", \"b\", \"b.c\", \"_uid\", \"_type\", \"_version\", \"_seq_no\", \"_source\", \"_all\"), doc);"
  },
  {
    "devdecision": "Version 2",
    "id": 76830,
    "v2": "import static java.util.Collections.unmodifiableMap; import static org.elasticsearch.common.Strings.hasLength;",
    "resolution": "import static java.util.Collections.unmodifiableMap; import static org.elasticsearch.common.Strings.hasLength;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 76832,
    "v2": "",
    "resolution": "",
    "conflict": "import com.google.common.collect.ImmutableMap;"
  },
  {
    "devdecision": "Version 1",
    "id": 76833,
    "v2": "import org.elasticsearch.common.bytes.BytesArray;",
    "resolution": "import org.elasticsearch.common.xcontent.XContentBuilder;",
    "conflict": "import org.elasticsearch.common.xcontent.XContentBuilder;"
  },
  {
    "devdecision": "Version 2",
    "id": 76834,
    "v2": "",
    "resolution": "",
    "conflict": "import com.google.common.collect.Iterators;"
  },
  {
    "devdecision": "Version 2",
    "id": 76835,
    "v2": "",
    "resolution": "",
    "conflict": "import com.google.common.collect.Iterators;"
  },
  {
    "devdecision": "Version 2",
    "id": 76836,
    "v2": "private final Function<String, TypeParser> typeParsers;",
    "resolution": "private final Function<String, TypeParser> typeParsers;",
    "conflict": "private final Map<String, TypeParser> typeParsers;"
  },
  {
    "devdecision": "None",
    "id": 76838,
    "v2": "import com.google.common.collect.ImmutableMap;",
    "resolution": "import com.carrotsearch.hppc.ObjectHashSet;",
    "conflict": "import com.google.common.collect.Iterators;"
  },
  {
    "devdecision": "Version 2",
    "id": 76842,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.action.search.SearchType; import org.elasticsearch.common.geo.GeoPoint;"
  },
  {
    "devdecision": "Version 2",
    "id": 76874,
    "v2": "",
    "resolution": "",
    "conflict": "import com.google.common.io.Resources;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76880,
    "v2": "import org.elasticsearch.plugins.Plugin;",
    "resolution": "import org.elasticsearch.index.query.QueryBuilders;import org.elasticsearch.plugins.Plugin;",
    "conflict": "import org.elasticsearch.index.query.QueryBuilders;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76881,
    "v2": "import org.elasticsearch.script.groovy.GroovyPlugin;",
    "resolution": "import org.elasticsearch.search.highlight.HighlightBuilder;import org.elasticsearch.script.groovy.GroovyPlugin;",
    "conflict": "import org.elasticsearch.search.highlight.HighlightBuilder;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76882,
    "v2": "import org.elasticsearch.plugins.Plugin;",
    "resolution": "import org.elasticsearch.common.unit.TimeValue;import org.elasticsearch.plugins.Plugin;",
    "conflict": "import org.elasticsearch.common.unit.TimeValue;"
  },
  {
    "devdecision": "Concatenation",
    "id": 76888,
    "v2": "import static org.hamcrest.Matchers.greaterThanOrEqualTo;",
    "resolution": "import static org.hamcrest.Matchers.greaterThanOrEqualTo;import static java.util.Collections.singleton;",
    "conflict": "import static java.util.Collections.singleton;"
  },
  {
    "devdecision": "Version 1",
    "id": 76889,
    "v2": "import com.google.common.collect.ImmutableSet;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 76915,
    "v2": "throw new ParsingException(context, \"Failed to parse\", e);",
    "resolution": "throw new ParsingException(context.parseContext(), \"Failed to parse\", e);",
    "conflict": "throw new QueryParsingException(context.parseContext(), \"Failed to parse\", e);"
  },
  {
    "devdecision": "Manual",
    "id": 76917,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public BoolQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {",
    "conflict": "public BoolQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76919,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public BoostingQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public BoostingQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76922,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public CommonTermsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public CommonTermsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76926,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public ConstantScoreQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public ConstantScoreQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76928,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public DisMaxQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public DisMaxQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Combination",
    "id": 76929,
    "v2": "import org.apache.lucene.search.*; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 76930,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public ExistsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public ExistsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76932,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public FieldMaskingSpanQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public FieldMaskingSpanQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76934,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76938,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76942,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public GeoDistanceRangeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public GeoDistanceRangeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76946,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public GeoPolygonQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public GeoPolygonQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76951,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public GeoShapeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public GeoShapeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Version 1",
    "id": 76954,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParseField;",
    "conflict": "import org.elasticsearch.common.ParseField;"
  },
  {
    "devdecision": "Manual",
    "id": 76955,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public Builder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public Builder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76957,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76959,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Version 1",
    "id": 76962,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public IdsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public IdsQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {"
  },
  {
    "devdecision": "Manual",
    "id": 76966,
    "v2": "throw new ParsingException(context, \"Failed to parse\", e);",
    "resolution": "throw new ParsingException(context.parseContext(), \"Failed to parse\", e);",
    "conflict": "throw new QueryParsingException(context.parseContext(), \"Failed to parse\", e);"
  },
  {
    "devdecision": "Manual",
    "id": 76967,
    "v2": "public ParsedQuery parse(String source) throws ParsingException {",
    "resolution": "public ParsedQuery parse(String source) throws ParsingException, QueryShardException {",
    "conflict": "public ParsedQuery parse(String source) throws QueryParsingException, QueryShardException {"
  },
  {
    "devdecision": "Manual",
    "id": 76969,
    "v2": "throw new ParsingException(context, \"Failed to parse\", e);",
    "resolution": "throw new ParsingException(context.parseContext(), \"Failed to parse\", e);",
    "conflict": "throw new QueryParsingException(context.parseContext(), \"Failed to parse\", e);"
  },
  {
    "devdecision": "Manual",
    "id": 76970,
    "v2": "throw new ParsingException(getParseContext(), \"request does not support [\" + fieldName + \"]\");",
    "resolution": "throw new ParsingException(getShardContext().parseContext(), \"request does not support [\" + fieldName + \"]\");",
    "conflict": "throw new QueryParsingException(getShardContext().parseContext(), \"request does not support [\" + fieldName + \"]\");"
  },
  {
    "devdecision": "Manual",
    "id": 76972,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Version 1",
    "id": 76977,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public MatchAllQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public MatchAllQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {"
  },
  {
    "devdecision": "Manual",
    "id": 76979,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public MatchQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public MatchQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76983,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public MissingQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public MissingQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76986,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public MoreLikeThisQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public MoreLikeThisQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76990,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public MultiMatchQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public MultiMatchQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76991,
    "v2": "throw new ParsingException(parseContext, \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");",
    "resolution": "throw new ParsingException(parseContext, \"[\" + MultiMatchQueryBuilder.NAME + \"] query does not support [\" + currentFieldName + \"]\");",
    "conflict": "throw new QueryParsingException(parseContext, \"[\" + MultiMatchQueryBuilder.NAME + \"] query does not support [\" + currentFieldName + \"]\");"
  },
  {
    "devdecision": "Manual",
    "id": 76995,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public NestedQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public NestedQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76997,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public NotQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public NotQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 76998,
    "v2": "throw new ParsingException(parseContext, \"filter is required when using `not` query\");",
    "resolution": "throw new ParsingException(parseContext, \"query is required when using `not` query\");",
    "conflict": "throw new QueryParsingException(parseContext, \"query is required when using `not` query\");"
  },
  {
    "devdecision": "Manual",
    "id": 76999,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public PrefixQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public PrefixQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Combination",
    "id": 77002,
    "v2": "import org.elasticsearch.common.ParsingException; import org.elasticsearch.common.settings.Settings;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 77009,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77016,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public RangeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public RangeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77018,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public RegexpQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public RegexpQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77020,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public ScriptQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public ScriptQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Combination",
    "id": 77021,
    "v2": "import org.apache.lucene.search.Query; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 77022,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SimpleQueryStringBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public SimpleQueryStringBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77023,
    "v2": "throw new ParsingException(parseContext, \"[\" + NAME + \"] query does not support [\" + currentFieldName + \"]\");",
    "resolution": "throw new ParsingException(parseContext, \"[\" + SimpleQueryStringBuilder.NAME + \"] query does not support [\" + currentFieldName + \"]\");",
    "conflict": "throw new QueryParsingException(parseContext, \"[\" + SimpleQueryStringBuilder.NAME + \"] query does not support [\" + currentFieldName + \"]\");"
  },
  {
    "devdecision": "Manual",
    "id": 77025,
    "v2": "throw new ParsingException(parseContext, \"[\" + NAME + \"] unsupported field [\" + parser.currentName() + \"]\");",
    "resolution": "throw new ParsingException(parseContext, \"[\" + SimpleQueryStringBuilder.NAME + \"] unsupported field [\" + parser.currentName() + \"]\");",
    "conflict": "throw new QueryParsingException(parseContext, \"[\" + SimpleQueryStringBuilder.NAME + \"] unsupported field [\" + parser.currentName() + \"]\");"
  },
  {
    "devdecision": "Manual",
    "id": 77026,
    "v2": "throw new ParsingException(parseContext, \"[\" + NAME + \"] query text missing\");",
    "resolution": "throw new ParsingException(parseContext, \"[\" + SimpleQueryStringBuilder.NAME + \"] query text missing\");",
    "conflict": "throw new QueryParsingException(parseContext, \"[\" + SimpleQueryStringBuilder.NAME + \"] query text missing\");"
  },
  {
    "devdecision": "Manual",
    "id": 77028,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SpanContainingQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public SpanContainingQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77033,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SpanFirstQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public SpanFirstQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77039,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SpanNearQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public SpanNearQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77042,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SpanNotQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public SpanNotQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77046,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SpanOrQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public SpanOrQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77049,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SpanTermQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, ParsingException {",
    "conflict": "public SpanTermQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77051,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public SpanWithinQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public SpanWithinQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77054,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public TermQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public TermQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77056,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77059,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public TypeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public TypeQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77062,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public WildcardQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public WildcardQueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Combination",
    "id": 77063,
    "v2": "import org.apache.lucene.search.Query; import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.common.ParsingException;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 77064,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77066,
    "v2": "public ScoreFunction parse(QueryParseContext parseContext, XContentParser parser) throws IOException, ParsingException {",
    "resolution": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, ParsingException {",
    "conflict": "public ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Manual",
    "id": 77067,
    "v2": "throw new ParsingException(parseContext, \"unknown field [{}]\", fieldName);",
    "resolution": "throw new ParsingException(context.parseContext(), \"unknown field [{}]\", fieldName);",
    "conflict": "throw new QueryParsingException(context.parseContext(), \"unknown field [{}]\", fieldName);"
  },
  {
    "devdecision": "Manual",
    "id": 77068,
    "v2": "throw new ParsingException(parseContext, \"field [{}] is of type [{}], but only numeric types are supported.\", fieldName, fieldType);",
    "resolution": "throw new ParsingException(context.parseContext(), \"field [{}] is of type [{}], but only numeric types are supported.\", fieldName, fieldType);",
    "conflict": "throw new QueryParsingException(context.parseContext(), \"field [{}] is of type [{}], but only numeric types are supported.\", fieldName, fieldType);"
  },
  {
    "devdecision": "Manual",
    "id": 77072,
    "v2": "ScoreFunction parse(QueryParseContext parseContext, XContentParser parser) throws IOException, ParsingException;",
    "resolution": "ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, ParsingException;",
    "conflict": "ScoreFunction parse(QueryShardContext context, XContentParser parser) throws IOException, QueryParsingException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77076,
    "v2": "public InnerHitsSubSearchContext parse(QueryParseContext parserContext) throws IOException, ParsingException {",
    "resolution": "public InnerHitsSubSearchContext parse(XContentParser parser) throws IOException {",
    "conflict": "public InnerHitsSubSearchContext parse(XContentParser parser) throws IOException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77077,
    "v2": "throw new ParsingException(parserContext, \"Failed to parse [_inner_hits]\", e);",
    "resolution": "throw new IOException(\"Failed to parse [_inner_hits]\");",
    "conflict": "throw new IOException(\"Failed to parse [_inner_hits]\");"
  },
  {
    "devdecision": "Version 1",
    "id": 77082,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77083,
    "v2": "throws IOException, ParsingException {",
    "resolution": "throws IOException, QueryShardException {",
    "conflict": "throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77084,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77085,
    "v2": "throws IOException, ParsingException {",
    "resolution": "throws IOException, QueryShardException {",
    "conflict": "throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77086,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77087,
    "v2": "throws IOException, ParsingException {",
    "resolution": "throws IOException, QueryShardException {",
    "conflict": "throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77088,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77089,
    "v2": "throws IOException, ParsingException {",
    "resolution": "throws IOException, QueryShardException {",
    "conflict": "throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77091,
    "v2": "throws IOException, ParsingException {",
    "resolution": "throws IOException, QueryShardException {",
    "conflict": "throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77092,
    "v2": "import org.elasticsearch.index.query.TestParsingException;",
    "resolution": "import org.elasticsearch.index.query.*;",
    "conflict": "import org.elasticsearch.index.query.*;"
  },
  {
    "devdecision": "Version 1",
    "id": 77093,
    "v2": "new Throwable(\"this exception is unknown\", new ParsingException(new Index(\"foo\"), 1, 2, \"foobar\", null) ), // somethin unknown",
    "resolution": "new Throwable(\"this exception is unknown\", new QueryShardException(new Index(\"foo\"), \"foobar\", null) ), // somethin unknown",
    "conflict": "new Throwable(\"this exception is unknown\", new QueryShardException(new Index(\"foo\"), \"foobar\", null) ), // somethin unknown"
  },
  {
    "devdecision": "Manual",
    "id": 77095,
    "v2": "} catch (ParsingException e) {",
    "resolution": "} catch (QueryShardException e) {",
    "conflict": "} catch (QueryShardException e) {"
  },
  {
    "devdecision": "Manual",
    "id": 77096,
    "v2": "} catch (ParsingException e) {",
    "resolution": "} catch (QueryShardException e) {",
    "conflict": "} catch (QueryShardException e) {"
  },
  {
    "devdecision": "Manual",
    "id": 77099,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException {",
    "conflict": "public QueryBuilder fromXContent(QueryParseContext parseContext) throws IOException, QueryParsingException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77101,
    "v2": "public Query parse(QueryParseContext parseContext) throws IOException, ParsingException {",
    "resolution": "public QueryBuilder getBuilderPrototype() {",
    "conflict": "public QueryBuilder getBuilderPrototype() {"
  },
  {
    "devdecision": "Version 1",
    "id": 77103,
    "v2": "assertThat(e.getRootCause(), instanceOf(ParsingException.class));",
    "resolution": "assertThat(e.getRootCause(), instanceOf(QueryShardException.class));",
    "conflict": "assertThat(e.getRootCause(), instanceOf(QueryShardException.class));"
  },
  {
    "devdecision": "Version 1",
    "id": 77105,
    "v2": "assertThat(e.getRootCause(), instanceOf(ParsingException.class));",
    "resolution": "assertThat(e.getRootCause(), instanceOf(QueryShardException.class));",
    "conflict": "assertThat(e.getRootCause(), instanceOf(QueryShardException.class));"
  },
  {
    "devdecision": "Version 1",
    "id": 77106,
    "v2": "assertThat(e.getRootCause(), instanceOf(ParsingException.class));",
    "resolution": "assertThat(e.getRootCause(), instanceOf(QueryShardException.class));",
    "conflict": "assertThat(e.getRootCause(), instanceOf(QueryShardException.class));"
  },
  {
    "devdecision": "Version 1",
    "id": 77107,
    "v2": "assertThat(e.getCause(), instanceOf(ParsingException.class));",
    "resolution": "assertThat(e.getCause(), instanceOf(QueryShardException.class));",
    "conflict": "assertThat(e.getCause(), instanceOf(QueryShardException.class));"
  },
  {
    "devdecision": "Version 1",
    "id": 77108,
    "v2": "import org.elasticsearch.common.ParsingException;",
    "resolution": "import org.elasticsearch.index.query.QueryShardException;",
    "conflict": "import org.elasticsearch.index.query.QueryShardException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77109,
    "v2": "throws IOException, ParsingException {",
    "resolution": "throws IOException, QueryShardException {",
    "conflict": "throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Version 2",
    "id": 77111,
    "v2": "",
    "resolution": "",
    "conflict": "import com.google.common.base.Preconditions;"
  },
  {
    "devdecision": "Manual",
    "id": 77114,
    "v2": "seed = hash(parseContext.nowInMillis());",
    "resolution": "seed = hash(context.nowInMillis());",
    "conflict": "seed = Longs.hashCode(context.nowInMillis());"
  },
  {
    "devdecision": "Version 1",
    "id": 77119,
    "v2": "assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, pluginUrl));",
    "resolution": "assertStatusOk(String.format(Locale.ROOT, \"install %s --verbose\", pluginUrl));",
    "conflict": "assertStatusOk(String.format(Locale.ROOT, \"install %s --verbose\", pluginUrl));"
  },
  {
    "devdecision": "Version 1",
    "id": 77123,
    "v2": "point.resetFromGeoHash(parser.text());",
    "resolution": "geohash = parser.text();",
    "conflict": "geohash = parser.text();"
  },
  {
    "devdecision": "Combination",
    "id": 77128,
    "v2": "import org.elasticsearch.common.bytes.BytesArray; import org.elasticsearch.common.collect.HppcMaps;",
    "resolution": "import org.elasticsearch.common.bytes.BytesArray;",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 77131,
    "v2": "private String scoreMode;",
    "resolution": "private ScoreMode scoreMode = DEFAULT_SCORE_MODE;",
    "conflict": "private ScoreType scoreType = ScoreType.NONE;"
  },
  {
    "devdecision": "Version 1",
    "id": 77140,
    "v2": "import org.apache.lucene.search.*; import org.apache.lucene.search.join.ScoreMode;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "None",
    "id": 77143,
    "v2": "private Float boost;",
    "resolution": "private Float maxBoost;",
    "conflict": "private final QueryBuilder filterBuilder;"
  },
  {
    "devdecision": "Manual",
    "id": 77147,
    "v2": "client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", termQuery(\"field2\", parentChildIndexGenerator.getQueryValue())).scoreMode(\"max\")).execute().actionGet();",
    "resolution": "client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", termQuery(\"field2\", parentChildIndexGenerator.getQueryValue())).scoreMode(ScoreMode.Max)).execute().actionGet();",
    "conflict": "client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", termQuery(\"field2\", parentChildIndexGenerator.getQueryValue())).scoreType(ScoreType.MAX)).execute().actionGet();"
  },
  {
    "devdecision": "Manual",
    "id": 77148,
    "v2": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", termQuery(\"field2\", parentChildIndexGenerator.getQueryValue())).scoreMode(\"max\")).execute().actionGet();",
    "resolution": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", termQuery(\"field2\", parentChildIndexGenerator.getQueryValue())).scoreMode(ScoreMode.Max)).execute().actionGet();",
    "conflict": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", termQuery(\"field2\", parentChildIndexGenerator.getQueryValue())).scoreType(ScoreType.MAX)).execute().actionGet();"
  },
  {
    "devdecision": "Manual",
    "id": 77149,
    "v2": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreMode(\"max\")).execute().actionGet();",
    "resolution": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreMode(ScoreMode.Max)).execute().actionGet();",
    "conflict": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreType(ScoreType.MAX)).execute().actionGet();"
  },
  {
    "devdecision": "Version 1",
    "id": 77150,
    "v2": "client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", termQuery(\"field1\", parentChildIndexGenerator.getQueryValue())).scoreMode(\"score\")).execute().actionGet();",
    "resolution": "client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", termQuery(\"field1\", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();",
    "conflict": "client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", termQuery(\"field1\", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();"
  },
  {
    "devdecision": "Version 1",
    "id": 77151,
    "v2": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", termQuery(\"field1\", parentChildIndexGenerator.getQueryValue())).scoreMode(\"score\")).execute().actionGet();",
    "resolution": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", termQuery(\"field1\", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();",
    "conflict": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", termQuery(\"field1\", parentChildIndexGenerator.getQueryValue())).score(true)).execute().actionGet();"
  },
  {
    "devdecision": "Version 1",
    "id": 77152,
    "v2": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", matchAllQuery()).scoreMode(\"score\")).execute().actionGet();",
    "resolution": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", matchAllQuery()).score(true)).execute().actionGet();",
    "conflict": "SearchResponse searchResponse = client.prepareSearch(indexName).setQuery(hasParentQuery(\"parent\", matchAllQuery()).score(true)).execute().actionGet();"
  },
  {
    "devdecision": "Manual",
    "id": 77153,
    "v2": ".setQuery(hasChildQuery(\"child\", matchQuery(\"field2\", i)).scoreMode(\"max\"))",
    "resolution": ".setQuery(hasChildQuery(\"child\", matchQuery(\"field2\", i)).scoreMode(ScoreMode.Max))",
    "conflict": ".setQuery(hasChildQuery(\"child\", matchQuery(\"field2\", i)).scoreType(ScoreType.MAX))"
  },
  {
    "devdecision": "Version 1",
    "id": 77155,
    "v2": "import java.util.Locale;",
    "resolution": "import java.util.concurrent.ExecutionException;",
    "conflict": "import java.util.concurrent.ExecutionException;"
  },
  {
    "devdecision": "Manual",
    "id": 77159,
    "v2": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(\"max\"))",
    "resolution": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(ScoreMode.Max))",
    "conflict": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(ScoreType.MAX))"
  },
  {
    "devdecision": "Version 1",
    "id": 77160,
    "v2": ".setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreMode(\"score\"))",
    "resolution": ".setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).score(true))",
    "conflict": ".setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).score(true))"
  },
  {
    "devdecision": "Manual",
    "id": 77161,
    "v2": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(\"max\"))",
    "resolution": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(ScoreMode.Max))",
    "conflict": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(ScoreType.MAX))"
  },
  {
    "devdecision": "Manual",
    "id": 77162,
    "v2": ".boostMode(CombineFunction.REPLACE.getName())).scoreMode(\"total\")).get();",
    "resolution": ".boostMode(CombineFunction.REPLACE.getName())).scoreMode(ScoreMode.Total)).get();",
    "conflict": ".boostMode(CombineFunction.REPLACE.getName())).scoreType(ScoreType.SUM)).get();"
  },
  {
    "devdecision": "Manual",
    "id": 77163,
    "v2": ".boostMode(CombineFunction.REPLACE.getName())).scoreMode(\"max\")).get();",
    "resolution": ".boostMode(CombineFunction.REPLACE.getName())).scoreMode(ScoreMode.Max)).get();",
    "conflict": ".boostMode(CombineFunction.REPLACE.getName())).scoreType(ScoreType.MAX)).get();"
  },
  {
    "devdecision": "Manual",
    "id": 77164,
    "v2": ".boostMode(CombineFunction.REPLACE.getName())).scoreMode(\"avg\")).get();",
    "resolution": ".boostMode(CombineFunction.REPLACE.getName())).scoreMode(ScoreMode.Avg)).get();",
    "conflict": ".boostMode(CombineFunction.REPLACE.getName())).scoreType(ScoreType.AVG)).get();"
  },
  {
    "devdecision": "Version 1",
    "id": 77165,
    "v2": ".boostMode(CombineFunction.REPLACE.getName())).scoreMode(\"score\"))",
    "resolution": ".boostMode(CombineFunction.REPLACE.getName())).score(true))",
    "conflict": ".boostMode(CombineFunction.REPLACE.getName())).score(true))"
  },
  {
    "devdecision": "Manual",
    "id": 77166,
    "v2": "response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\")).scoreMode(\"max\"))",
    "resolution": "response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\")).scoreMode(ScoreMode.Max))",
    "conflict": "response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasChildQuery(\"child\", matchQuery(\"text\", \"value\")).scoreType(ScoreType.MAX))"
  },
  {
    "devdecision": "Version 1",
    "id": 77167,
    "v2": "response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasParentQuery(\"child\", matchQuery(\"text\", \"value\")).scoreMode(\"score\"))",
    "resolution": "response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasParentQuery(\"child\", matchQuery(\"text\", \"value\")).score(true))",
    "conflict": "response = client().prepareSearch(\"test\").setQuery(QueryBuilders.hasParentQuery(\"child\", matchQuery(\"text\", \"value\")).score(true))"
  },
  {
    "devdecision": "Manual",
    "id": 77168,
    "v2": ".setQuery(hasChildQuery(\"child\", prefixQuery(\"c_field\", \"c\")).scoreMode(\"max\")).addSort(\"p_field\", SortOrder.ASC)",
    "resolution": ".setQuery(hasChildQuery(\"child\", prefixQuery(\"c_field\", \"c\")).scoreMode(ScoreMode.Max)).addSort(\"p_field\", SortOrder.ASC)",
    "conflict": ".setQuery(hasChildQuery(\"child\", prefixQuery(\"c_field\", \"c\")).scoreType(ScoreType.MAX)).addSort(\"p_field\", SortOrder.ASC)"
  },
  {
    "devdecision": "Version 1",
    "id": 77169,
    "v2": ".setQuery(hasParentQuery(\"parent\", prefixQuery(\"p_field\", \"p\")).scoreMode(\"score\")).addSort(\"c_field\", SortOrder.ASC)",
    "resolution": ".setQuery(hasParentQuery(\"parent\", prefixQuery(\"p_field\", \"p\")).score(true)).addSort(\"c_field\", SortOrder.ASC)",
    "conflict": ".setQuery(hasParentQuery(\"parent\", prefixQuery(\"p_field\", \"p\")).score(true)).addSort(\"c_field\", SortOrder.ASC)"
  },
  {
    "devdecision": "Manual",
    "id": 77170,
    "v2": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreMode(\"total\")).get();",
    "resolution": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreMode(ScoreMode.Total)).get();",
    "conflict": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreType(ScoreType.SUM)).get();"
  },
  {
    "devdecision": "Version 1",
    "id": 77171,
    "v2": "hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).scoreMode(\"score\"))).get();",
    "resolution": "hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).score(true))).get();",
    "conflict": "hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).score(true))).get();"
  },
  {
    "devdecision": "Manual",
    "id": 77172,
    "v2": "searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreMode(\"total\"))",
    "resolution": "searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreMode(ScoreMode.Total))",
    "conflict": "searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"yellow\")).scoreType(ScoreType.SUM))"
  },
  {
    "devdecision": "Version 1",
    "id": 77173,
    "v2": "hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).scoreMode(\"score\"))).get();",
    "resolution": "hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).score(true))).get();",
    "conflict": "hasParentQuery(\"parent\", termQuery(\"p_field\", \"p_value2\")).score(true))).get();"
  },
  {
    "devdecision": "Manual",
    "id": 77174,
    "v2": "SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreMode(\"total\"))",
    "resolution": "SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreMode(ScoreMode.Total))",
    "conflict": "SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", matchAllQuery()).scoreType(ScoreType.SUM))"
  },
  {
    "devdecision": "Manual",
    "id": 77175,
    "v2": "String scoreMode = ScoreMode.values()[getRandom().nextInt(ScoreMode.values().length)].name().toLowerCase(Locale.ROOT);",
    "resolution": "ScoreMode scoreMode = randomFrom(ScoreMode.values());",
    "conflict": "ScoreType scoreMode = ScoreType.values()[getRandom().nextInt(ScoreType.values().length)];"
  },
  {
    "devdecision": "Manual",
    "id": 77176,
    "v2": "SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(\"max\").queryName(\"test\"))",
    "resolution": "SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(ScoreMode.Max).queryName(\"test\"))",
    "conflict": "SearchResponse searchResponse = client().prepareSearch(\"test\").setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(ScoreType.MAX).queryName(\"test\"))"
  },
  {
    "devdecision": "Version 1",
    "id": 77177,
    "v2": "searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreMode(\"score\").queryName(\"test\"))",
    "resolution": "searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).score(true).queryName(\"test\"))",
    "conflict": "searchResponse = client().prepareSearch(\"test\").setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).score(true).queryName(\"test\"))"
  },
  {
    "devdecision": "Manual",
    "id": 77178,
    "v2": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(\"max\"))",
    "resolution": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreMode(ScoreMode.Max))",
    "conflict": ".setQuery(hasChildQuery(\"child\", termQuery(\"c_field\", \"1\")).scoreType(ScoreType.MAX))"
  },
  {
    "devdecision": "Version 1",
    "id": 77179,
    "v2": ".setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).scoreMode(\"score\"))",
    "resolution": ".setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).score(true))",
    "conflict": ".setQuery(hasParentQuery(\"parent\", termQuery(\"p_field\", \"1\")).score(true))"
  },
  {
    "devdecision": "Manual",
    "id": 77181,
    "v2": "response = minMaxQuery(\"none\", 0, null);",
    "resolution": "response = minMaxQuery(ScoreMode.None, 0, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 0, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77182,
    "v2": "response = minMaxQuery(\"none\", 1, null);",
    "resolution": "response = minMaxQuery(ScoreMode.None, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 1, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77183,
    "v2": "response = minMaxQuery(\"none\", 2, null);",
    "resolution": "response = minMaxQuery(ScoreMode.None, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 2, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77184,
    "v2": "response = minMaxQuery(\"none\", 3, null);",
    "resolution": "response = minMaxQuery(ScoreMode.None, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 3, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77185,
    "v2": "response = minMaxQuery(\"none\", 4, null);",
    "resolution": "response = minMaxQuery(ScoreMode.None, 4, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 4, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77187,
    "v2": "response = minMaxQuery(\"total\", 1, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Total, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 1, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77188,
    "v2": "response = minMaxQuery(\"total\", 2, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Total, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 2, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77189,
    "v2": "response = minMaxQuery(\"total\", 3, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Total, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 3, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77191,
    "v2": "response = minMaxQuery(\"total\", 0, 3);",
    "resolution": "response = minMaxQuery(ScoreMode.Total, 0, 3);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 0, 3);"
  },
  {
    "devdecision": "Manual",
    "id": 77192,
    "v2": "response = minMaxQuery(\"total\", 0, 2);",
    "resolution": "response = minMaxQuery(ScoreMode.Total, 0, 2);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 0, 2);"
  },
  {
    "devdecision": "Manual",
    "id": 77193,
    "v2": "response = minMaxQuery(\"total\", 2, 2);",
    "resolution": "response = minMaxQuery(ScoreMode.Total, 2, 2);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 2, 2);"
  },
  {
    "devdecision": "Manual",
    "id": 77194,
    "v2": "response = minMaxQuery(\"total\", 3, 2);",
    "resolution": "response = minMaxQuery(ScoreMode.Total, 3, 2);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 3, 2);"
  },
  {
    "devdecision": "Manual",
    "id": 77195,
    "v2": "response = minMaxQuery(\"max\", 0, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Max, 0, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 0, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77196,
    "v2": "response = minMaxQuery(\"max\", 1, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Max, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 1, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77197,
    "v2": "response = minMaxQuery(\"max\", 2, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Max, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 2, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77198,
    "v2": "response = minMaxQuery(\"max\", 3, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Max, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 3, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77199,
    "v2": "response = minMaxQuery(\"max\", 4, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Max, 4, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 4, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77200,
    "v2": "response = minMaxQuery(\"avg\", 0, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Avg, 0, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 0, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77201,
    "v2": "response = minMaxQuery(\"avg\", 1, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Avg, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 1, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77202,
    "v2": "response = minMaxQuery(\"avg\", 2, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Avg, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 2, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77203,
    "v2": "response = minMaxQuery(\"avg\", 3, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Avg, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 3, 0);"
  },
  {
    "devdecision": "Manual",
    "id": 77204,
    "v2": "response = minMaxQuery(\"avg\", 4, null);",
    "resolution": "response = minMaxQuery(ScoreMode.Avg, 4, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 4, 0);"
  },
  {
    "devdecision": "Version 1",
    "id": 77206,
    "v2": "if (nodeSpecificClusterState.version() < currentState.version() && Objects.equals(nodeSpecificClusterState.nodes().masterNodeId(), currentState.nodes().masterNodeId())) {",
    "resolution": "if (currentState.supersedes(nodeSpecificClusterState)) {",
    "conflict": "if (currentState.supersedes(nodeSpecificClusterState)) {"
  },
  {
    "devdecision": "Combination",
    "id": 77207,
    "v2": "",
    "resolution": "import org.elasticsearch.ElasticsearchException;",
    "conflict": "import com.google.common.collect.Sets; import org.elasticsearch.ElasticsearchException;"
  },
  {
    "devdecision": "Version 1",
    "id": 77208,
    "v2": "import java.util.Objects; import java.util.Queue;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77210,
    "v2": "",
    "resolution": "import org.elasticsearch.ElasticsearchException;",
    "conflict": "import com.google.common.collect.Maps; import org.elasticsearch.ElasticsearchException;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77213,
    "v2": "import java.util.function.Predicate;",
    "resolution": "import java.util.function.Predicate;import java.util.concurrent.atomic.AtomicReference;",
    "conflict": "import java.util.concurrent.atomic.AtomicReference;"
  },
  {
    "devdecision": "Version 2",
    "id": 77215,
    "v2": "",
    "resolution": "",
    "conflict": "import com.google.common.base.Predicate; import com.google.common.collect.ImmutableList;"
  },
  {
    "devdecision": "Version 1",
    "id": 77222,
    "v2": "",
    "resolution": "static final QueryFilterBuilder PROTOTYPE = new QueryFilterBuilder(null);",
    "conflict": "static final QueryFilterBuilder PROTOTYPE = new QueryFilterBuilder(null);"
  },
  {
    "devdecision": "Version 2",
    "id": 77244,
    "v2": "",
    "resolution": "",
    "conflict": "import org.apache.lucene.search.join.ScoreMode; import org.elasticsearch.Version;"
  },
  {
    "devdecision": "Version 2",
    "id": 77247,
    "v2": "private String[] stopWords = null;",
    "resolution": "private String[] stopWords = null;",
    "conflict": "private float boostTerms = -1;"
  },
  {
    "devdecision": "None",
    "id": 77256,
    "v2": "import org.elasticsearch.cluster.metadata.MetaData;",
    "resolution": "import org.elasticsearch.common.bytes.BytesArray;",
    "conflict": "import org.elasticsearch.common.Strings;"
  },
  {
    "devdecision": "Manual",
    "id": 77258,
    "v2": "private SearchResponse minMaxQuery(String scoreType, int minChildren, int maxChildren) throws SearchPhaseExecutionException {",
    "resolution": "private SearchResponse minMaxQuery(ScoreType scoreType, int minChildren, int maxChildren) throws SearchPhaseExecutionException {",
    "conflict": "private SearchResponse minMaxQuery(ScoreType scoreType, int minChildren, int maxChildren, int cutoff) throws SearchPhaseExecutionException {"
  },
  {
    "devdecision": "Version 2",
    "id": 77259,
    "v2": ".minChildren(minChildren).maxChildren(maxChildren))",
    "resolution": ".minChildren(minChildren).maxChildren(maxChildren))",
    "conflict": ".minChildren(minChildren).maxChildren(maxChildren).shortCircuitCutoff(cutoff))"
  },
  {
    "devdecision": "Version 2",
    "id": 77260,
    "v2": ".minChildren(minChildren).maxChildren(maxChildren)))",
    "resolution": ".minChildren(minChildren).maxChildren(maxChildren)))",
    "conflict": ".minChildren(minChildren).maxChildren(maxChildren).shortCircuitCutoff(cutoff)))"
  },
  {
    "devdecision": "Manual",
    "id": 77261,
    "v2": "response = minMaxQuery(\"none\", 0, 0);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 0, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 0, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77262,
    "v2": "response = minMaxQuery(\"none\", 1, 0);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 1, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77263,
    "v2": "response = minMaxQuery(\"none\", 2, 0);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 2, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77264,
    "v2": "response = minMaxQuery(\"none\", 3, 0);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 3, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77266,
    "v2": "response = minMaxQuery(\"none\", 0, 3);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 0, 3);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 0, 3, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77267,
    "v2": "response = minMaxQuery(\"none\", 0, 2);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 0, 2);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 0, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77268,
    "v2": "response = minMaxQuery(\"none\", 2, 2);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 2, 2);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 2, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77269,
    "v2": "response = minMaxQuery(\"none\", 3, 2);",
    "resolution": "response = minMaxQuery(ScoreType.NONE, 3, 2);",
    "conflict": "response = minMaxQuery(ScoreType.NONE, 3, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77270,
    "v2": "response = minMaxQuery(\"sum\", 0, 0);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 0, 0);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 0, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77271,
    "v2": "response = minMaxQuery(\"sum\", 1, 0);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 1, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77272,
    "v2": "response = minMaxQuery(\"sum\", 2, 0);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 2, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77273,
    "v2": "response = minMaxQuery(\"sum\", 3, 0);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 3, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77275,
    "v2": "response = minMaxQuery(\"sum\", 0, 3);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 0, 3);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 0, 3, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77276,
    "v2": "response = minMaxQuery(\"sum\", 0, 2);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 0, 2);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 0, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77277,
    "v2": "response = minMaxQuery(\"sum\", 2, 2);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 2, 2);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 2, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77278,
    "v2": "response = minMaxQuery(\"sum\", 3, 2);",
    "resolution": "response = minMaxQuery(ScoreType.SUM, 3, 2);",
    "conflict": "response = minMaxQuery(ScoreType.SUM, 3, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77279,
    "v2": "response = minMaxQuery(\"max\", 0, 0);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 0, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 0, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77280,
    "v2": "response = minMaxQuery(\"max\", 1, 0);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 1, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77281,
    "v2": "response = minMaxQuery(\"max\", 2, 0);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 2, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77282,
    "v2": "response = minMaxQuery(\"max\", 3, 0);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 3, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77284,
    "v2": "response = minMaxQuery(\"max\", 0, 3);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 0, 3);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 0, 3, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77285,
    "v2": "response = minMaxQuery(\"max\", 0, 2);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 0, 2);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 0, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77286,
    "v2": "response = minMaxQuery(\"max\", 2, 2);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 2, 2);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 2, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77287,
    "v2": "response = minMaxQuery(\"max\", 3, 2);",
    "resolution": "response = minMaxQuery(ScoreType.MAX, 3, 2);",
    "conflict": "response = minMaxQuery(ScoreType.MAX, 3, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77288,
    "v2": "response = minMaxQuery(\"avg\", 0, 0);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 0, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 0, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77289,
    "v2": "response = minMaxQuery(\"avg\", 1, 0);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 1, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 1, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77290,
    "v2": "response = minMaxQuery(\"avg\", 2, 0);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 2, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 2, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77291,
    "v2": "response = minMaxQuery(\"avg\", 3, 0);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 3, 0);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 3, 0, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77293,
    "v2": "response = minMaxQuery(\"avg\", 0, 3);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 0, 3);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 0, 3, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77294,
    "v2": "response = minMaxQuery(\"avg\", 0, 2);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 0, 2);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 0, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77295,
    "v2": "response = minMaxQuery(\"avg\", 2, 2);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 2, 2);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 2, 2, cutoff);"
  },
  {
    "devdecision": "Manual",
    "id": 77296,
    "v2": "response = minMaxQuery(\"avg\", 3, 2);",
    "resolution": "response = minMaxQuery(ScoreType.AVG, 3, 2);",
    "conflict": "response = minMaxQuery(ScoreType.AVG, 3, 2, cutoff);"
  },
  {
    "devdecision": "Version 2",
    "id": 77318,
    "v2": "import org.apache.lucene.search.join.BitSetProducer;",
    "resolution": "import org.apache.lucene.search.join.BitSetProducer;",
    "conflict": "import org.apache.lucene.search.join.BitDocIdSetFilter;"
  },
  {
    "devdecision": "Version 1",
    "id": 77319,
    "v2": "import org.apache.lucene.search.BooleanQuery; import org.apache.lucene.search.Query;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Combination",
    "id": 77324,
    "v2": "import java.util.Collection; import java.util.Collections;",
    "resolution": "import java.util.Collections;",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77326,
    "v2": "* @param parseContext",
    "resolution": "* @param context",
    "conflict": "* @param context"
  },
  {
    "devdecision": "Version 1",
    "id": 77328,
    "v2": "import org.elasticsearch.index.fielddata.plain.DoubleArrayIndexFieldData; import org.elasticsearch.index.mapper.FieldMapper;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 77340,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "None",
    "id": 77343,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.cluster.routing.ShardRouting;",
    "conflict": "import org.elasticsearch.action.support.broadcast.BroadcastShardResponse;"
  },
  {
    "devdecision": "None",
    "id": 77344,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import com.google.common.collect.Sets;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "None",
    "id": 77345,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.cluster.metadata.IndexMetaData;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77346,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77347,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "None",
    "id": 77348,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.cluster.ClusterInfoService;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Combination",
    "id": 77349,
    "v2": "",
    "resolution": "import java.util.Collections;",
    "conflict": "import java.util.Collections; import java.util.Iterator;"
  },
  {
    "devdecision": "None",
    "id": 77350,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.common.inject.internal.Errors;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77351,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "None",
    "id": 77352,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.common.inject.internal.Errors;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "None",
    "id": 77354,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.elasticsearch.common.inject.internal.Errors;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77355,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77356,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "None",
    "id": 77357,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import com.google.common.collect.Sets;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "None",
    "id": 77359,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.apache.lucene.util.CollectionUtil;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77364,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "None",
    "id": 77367,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "import org.apache.lucene.search.Filter;",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77368,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "Version 1",
    "id": 77370,
    "v2": "import com.google.common.collect.ImmutableList;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 77371,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.Collections;import java.util.ArrayList;",
    "conflict": "import java.util.Collections;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77372,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.ArrayList;import java.util.Collection;",
    "conflict": "import java.util.Collection;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77373,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.ArrayList;import java.util.Collection;",
    "conflict": "import java.util.Collection;"
  },
  {
    "devdecision": "Concatenation",
    "id": 77374,
    "v2": "import java.util.ArrayList;",
    "resolution": "import java.util.ArrayList;import java.util.Collection;",
    "conflict": "import java.util.Collection;"
  },
  {
    "devdecision": "Version 1",
    "id": 77377,
    "v2": "this.parseContext = parseContext;",
    "resolution": "this.context = context;",
    "conflict": "this.context = context;"
  },
  {
    "devdecision": "Manual",
    "id": 77379,
    "v2": "private ArrayList<QueryBuilder> filters = new ArrayList<>();",
    "resolution": "private final ArrayList<QueryBuilder> filters = new ArrayList<>();",
    "conflict": "private final ArrayList<QueryBuilder> filters = Lists.newArrayList();"
  },
  {
    "devdecision": "Manual",
    "id": 77380,
    "v2": "ArrayList<Query> queries = new ArrayList<>();",
    "resolution": "final ArrayList<QueryBuilder> queries = new ArrayList<>();",
    "conflict": "final ArrayList<QueryBuilder> queries = newArrayList();"
  },
  {
    "devdecision": "Version 2",
    "id": 77381,
    "v2": "import static org.elasticsearch.common.lucene.search.Queries.fixNegativeQueryIfNeeded;",
    "resolution": "import static org.elasticsearch.common.lucene.search.Queries.fixNegativeQueryIfNeeded;",
    "conflict": "import static com.google.common.collect.Lists.newArrayList;"
  },
  {
    "devdecision": "Version 1",
    "id": 77384,
    "v2": "private ArrayList<QueryBuilder> queries = new ArrayList<>();",
    "resolution": "public static final String NAME = \"dis_max\";",
    "conflict": "public static final String NAME = \"dis_max\";"
  },
  {
    "devdecision": "Manual",
    "id": 77385,
    "v2": "List<Query> queries = new ArrayList<>();",
    "resolution": "final List<QueryBuilder> queries = new ArrayList<>();",
    "conflict": "final List<QueryBuilder> queries = newArrayList();"
  },
  {
    "devdecision": "Manual",
    "id": 77391,
    "v2": "moreLikeFields = Collections.singletonList(parseContext.defaultField());",
    "resolution": "moreLikeFields = Collections.singletonList(context.defaultField());",
    "conflict": "moreLikeFields = Lists.newArrayList(context.defaultField());"
  },
  {
    "devdecision": "Version 2",
    "id": 77392,
    "v2": "",
    "resolution": "",
    "conflict": "import com.google.common.collect.Lists;"
  },
  {
    "devdecision": "Manual",
    "id": 77395,
    "v2": "private ArrayList<QueryBuilder> filters = new ArrayList<>();",
    "resolution": "private final ArrayList<QueryBuilder> filters = new ArrayList<>();",
    "conflict": "private final ArrayList<QueryBuilder> filters = Lists.newArrayList();"
  },
  {
    "devdecision": "Manual",
    "id": 77396,
    "v2": "ArrayList<Query> queries = new ArrayList<>();",
    "resolution": "final ArrayList<QueryBuilder> queries = new ArrayList<>();",
    "conflict": "final ArrayList<QueryBuilder> queries = newArrayList();"
  },
  {
    "devdecision": "Manual",
    "id": 77399,
    "v2": "List<SpanQuery> clauses = new ArrayList<>();",
    "resolution": "List<SpanQueryBuilder> clauses = new ArrayList<>();",
    "conflict": "List<SpanQueryBuilder> clauses = newArrayList();"
  },
  {
    "devdecision": "Manual",
    "id": 77400,
    "v2": "List<SpanQuery> clauses = new ArrayList<>();",
    "resolution": "List<SpanQueryBuilder> clauses = new ArrayList<>();",
    "conflict": "List<SpanQueryBuilder> clauses = newArrayList();"
  },
  {
    "devdecision": "Version 2",
    "id": 77405,
    "v2": "public InnerHitsSubSearchContext parse(QueryParseContext parserContext) throws IOException, QueryParsingException {",
    "resolution": "public InnerHitsSubSearchContext parse(QueryParseContext parserContext) throws IOException, QueryParsingException {",
    "conflict": "public Tuple<String, SubSearchContext> parse(QueryParseContext parserContext) throws IOException, QueryShardException {"
  },
  {
    "devdecision": "Version 2",
    "id": 77410,
    "v2": "private List<ZenPing> zenPings = Collections.emptyList();",
    "resolution": "private List<ZenPing> zenPings = Collections.emptyList();",
    "conflict": "private volatile List<? extends ZenPing> zenPings = Collections.emptyList();"
  },
  {
    "devdecision": "Combination",
    "id": 77412,
    "v2": "import com.google.common.collect.ImmutableList; import com.google.common.collect.Sets;",
    "resolution": "import com.google.common.collect.Sets;",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 77413,
    "v2": "import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;",
    "resolution": "import org.elasticsearch.action.admin.cluster.state.ClusterStateResponse;import org.elasticsearch.action.search.SearchResponse;",
    "conflict": "import org.elasticsearch.action.search.SearchResponse;"
  },
  {
    "devdecision": "Version 1",
    "id": 77414,
    "v2": "private float boost = -1;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77415,
    "v2": "private Boolean escape;",
    "resolution": "static final QueryStringQueryBuilder PROTOTYPE = new QueryStringQueryBuilder(null);",
    "conflict": "static final QueryStringQueryBuilder PROTOTYPE = new QueryStringQueryBuilder(null);"
  },
  {
    "devdecision": "Version 2",
    "id": 77417,
    "v2": "assertStatusOk(String.format(Locale.ROOT, \"install %s --verbose\", pluginUrl));",
    "resolution": "assertStatusOk(String.format(Locale.ROOT, \"install %s --verbose\", pluginUrl));",
    "conflict": "assertStatusOk(String.format(Locale.ROOT, \"install %s --url %s --verbose\", pluginName, pluginUrl));"
  },
  {
    "devdecision": "None",
    "id": 77473,
    "v2": "import org.elasticsearch.ElasticsearchException;",
    "resolution": "import org.elasticsearch.Version;",
    "conflict": "import org.apache.lucene.util.LuceneTestCase.Slow;"
  },
  {
    "devdecision": "Version 2",
    "id": 77513,
    "v2": "throw new WatcherInactiveException(\"could not register execution [{}]. current executions are sealed and forbid registrations of additional executions.\", id);",
    "resolution": "throw new WatcherInactiveException(\"could not register execution [{}]. current executions are sealed and forbid registrations of additional executions.\", id);",
    "conflict": "throw new IllegalStateException(\"put execution forbidden, because we're sealed\");"
  },
  {
    "devdecision": "Version 2",
    "id": 77514,
    "v2": "throw new WatcherInactiveException(\"not started\");",
    "resolution": "throw new WatcherInactiveException(\"not started\");",
    "conflict": "throw new IllegalStateException(\"not started\");"
  },
  {
    "devdecision": "Version 2",
    "id": 77515,
    "v2": "throw new WatcherInactiveException(\"not started\");",
    "resolution": "throw new WatcherInactiveException(\"not started\");",
    "conflict": "throw new IllegalStateException(\"not started\");"
  },
  {
    "devdecision": "Concatenation",
    "id": 77523,
    "v2": "import org.elasticsearch.common.unit.TimeValue;",
    "resolution": "import org.elasticsearch.common.unit.TimeValue;import org.elasticsearch.env.Environment;",
    "conflict": "import org.elasticsearch.env.Environment;"
  },
  {
    "devdecision": "Manual",
    "id": 77530,
    "v2": "ExecutableEmailAction executable = new EmailActionFactory(ImmutableSettings.EMPTY, emailService, engine, htmlSanitizer)",
    "resolution": "ExecutableEmailAction executable = new EmailActionFactory(Settings.EMPTY, emailService, engine, htmlSanitizer)",
    "conflict": "ExecutableEmailAction executable = new EmailActionFactory(Settings.EMPTY, emailService, engine)"
  },
  {
    "devdecision": "Manual",
    "id": 77531,
    "v2": "ExecutableEmailAction parsed = new EmailActionFactory(ImmutableSettings.EMPTY, service, engine, htmlSanitizer)",
    "resolution": "ExecutableEmailAction parsed = new EmailActionFactory(Settings.EMPTY, service, engine, htmlSanitizer)",
    "conflict": "ExecutableEmailAction parsed = new EmailActionFactory(Settings.EMPTY, service, engine)"
  },
  {
    "devdecision": "Manual",
    "id": 77532,
    "v2": "new EmailActionFactory(ImmutableSettings.EMPTY, emailService, engine, htmlSanitizer)",
    "resolution": "new EmailActionFactory(Settings.EMPTY, emailService, engine, htmlSanitizer)",
    "conflict": "new EmailActionFactory(Settings.EMPTY, emailService, engine)"
  },
  {
    "devdecision": "Version 1",
    "id": 77536,
    "v2": "Path resource = Paths.get(HttpClientTests.class.getResource(\"/org/elasticsearch/shield/keystore/truststore-testnode-only.jks\").toURI());",
    "resolution": "Path resource = getDataPath(\"/org/elasticsearch/shield/keystore/truststore-testnode-only.jks\");",
    "conflict": "Path resource = getDataPath(\"/org/elasticsearch/shield/keystore/truststore-testnode-only.jks\");"
  },
  {
    "devdecision": "Version 1",
    "id": 77537,
    "v2": "Path resource = Paths.get(HttpClientTests.class.getResource(\"/org/elasticsearch/shield/keystore/testnode.jks\").toURI());",
    "resolution": "Path resource = getDataPath(\"/org/elasticsearch/shield/keystore/testnode.jks\");",
    "conflict": "Path resource = getDataPath(\"/org/elasticsearch/shield/keystore/testnode.jks\");"
  },
  {
    "devdecision": "Version 1",
    "id": 77538,
    "v2": "Path resource = Paths.get(HttpClientTests.class.getResource(\"/org/elasticsearch/shield/keystore/testnode-different-passwords.jks\").toURI());",
    "resolution": "Path resource = getDataPath(\"/org/elasticsearch/shield/keystore/testnode-different-passwords.jks\");",
    "conflict": "Path resource = getDataPath(\"/org/elasticsearch/shield/keystore/testnode-different-passwords.jks\");"
  },
  {
    "devdecision": "Version 1",
    "id": 77549,
    "v2": "import org.elasticsearch.index.mapper.FieldMapper; import org.elasticsearch.index.mapper.MappedFieldType;",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 77558,
    "v2": "forcedDateParser = new DateMathParser(Joda.forPattern(parser.text()));",
    "resolution": "format = parser.text();",
    "conflict": "format = parser.text();"
  },
  {
    "devdecision": "Version 2",
    "id": 77562,
    "v2": "import org.apache.lucene.document.FieldType; import org.apache.lucene.document.SortedDocValuesField;",
    "resolution": "import org.apache.lucene.document.FieldType; import org.apache.lucene.document.SortedDocValuesField;",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 77568,
    "v2": "",
    "resolution": "",
    "conflict": "import org.elasticsearch.index.fielddata.FieldDataType; import org.elasticsearch.index.mapper.MappedFieldType.Loading;"
  },
  {
    "devdecision": "Version 1",
    "id": 77574,
    "v2": "return new String[] { NAME };",
    "resolution": "return new String[]{ScriptQueryBuilder.NAME};",
    "conflict": "return new String[]{ScriptQueryBuilder.NAME};"
  },
  {
    "devdecision": "Version 1",
    "id": 77577,
    "v2": "return new String[] { NAME };",
    "resolution": "return new String[] {TemplateQueryBuilder.NAME};",
    "conflict": "return new String[] {TemplateQueryBuilder.NAME};"
  },
  {
    "devdecision": "Manual",
    "id": 77581,
    "v2": ".setSettings(Settings.builder().put(\"refresh_interval\", 9999)));",
    "resolution": ".setSettings(Settings.builder().put(\"refresh_interval\", 9999, TimeUnit.MILLISECONDS)));",
    "conflict": ".setSettings(ImmutableSettings.builder().put(\"refresh_interval\", 9999, TimeUnit.MILLISECONDS)));"
  },
  {
    "devdecision": "Manual",
    "id": 77582,
    "v2": ".setSettings(Settings.builder().put(\"refresh_interval\", 9999)).get();",
    "resolution": ".setSettings(Settings.builder().put(\"refresh_interval\", 9999, TimeUnit.MILLISECONDS)).get();",
    "conflict": ".setSettings(ImmutableSettings.builder().put(\"refresh_interval\", 9999, TimeUnit.MILLISECONDS)).get();"
  },
  {
    "devdecision": "Manual",
    "id": 77596,
    "v2": "commitIndexWriter(writer, translog);",
    "resolution": "commitIndexWriter(writer, translog, lastCommittedSegmentInfos.getUserData().get(SYNC_COMMIT_ID));",
    "conflict": "commitIndexWriter(writer, translog.currentId(), lastCommittedSegmentInfos.getUserData().get(SYNC_COMMIT_ID));"
  },
  {
    "devdecision": "Version 1",
    "id": 77597,
    "v2": "if (opsRecovered > 0 || translog.isCurrent(translogGeneration) == false) {",
    "resolution": "if (opsRecovered > 0) {",
    "conflict": "if (opsRecovered > 0) {"
  },
  {
    "devdecision": "Manual",
    "id": 77607,
    "v2": "public class IdsQueryBuilder extends QueryBuilder implements BoostableQueryBuilder<IdsQueryBuilder> {",
    "resolution": "public class IdsQueryBuilder extends QueryBuilder implements Streamable, BoostableQueryBuilder<IdsQueryBuilder> {",
    "conflict": "public class IdsQueryBuilder extends BaseQueryBuilder implements Streamable, BoostableQueryBuilder<IdsQueryBuilder> {"
  },
  {
    "devdecision": "Manual",
    "id": 77608,
    "v2": "public class MatchAllQueryBuilder extends QueryBuilder implements BoostableQueryBuilder<MatchAllQueryBuilder> {",
    "resolution": "public class MatchAllQueryBuilder extends QueryBuilder implements Streamable, BoostableQueryBuilder<MatchAllQueryBuilder> {",
    "conflict": "public class MatchAllQueryBuilder extends BaseQueryBuilder implements Streamable, BoostableQueryBuilder<MatchAllQueryBuilder> {"
  },
  {
    "devdecision": "Manual",
    "id": 77612,
    "v2": "public class TermQueryBuilder extends QueryBuilder implements BoostableQueryBuilder<TermQueryBuilder> {",
    "resolution": "public class TermQueryBuilder extends QueryBuilder implements Streamable, BoostableQueryBuilder<TermQueryBuilder> {",
    "conflict": "public class TermQueryBuilder extends BaseQueryBuilder implements Streamable, BoostableQueryBuilder<TermQueryBuilder> {"
  },
  {
    "devdecision": "Concatenation",
    "id": 77613,
    "v2": "import org.elasticsearch.ElasticsearchException;",
    "resolution": "import org.elasticsearch.ElasticsearchException;import org.elasticsearch.action.admin.indices.stats.IndexStats;",
    "conflict": "import org.elasticsearch.action.admin.indices.stats.IndexStats;"
  },
  {
    "devdecision": "Combination",
    "id": 77614,
    "v2": "",
    "resolution": "import org.elasticsearch.index.engine.Engine;",
    "conflict": "import org.elasticsearch.index.engine.Engine; import org.elasticsearch.index.query.FilterBuilders;"
  },
  {
    "devdecision": "Version 2",
    "id": 77615,
    "v2": "import org.elasticsearch.common.bytes.BytesReference;",
    "resolution": "import org.elasticsearch.common.bytes.BytesReference;",
    "conflict": ""
  },
  {
    "devdecision": "Concatenation",
    "id": 77623,
    "v2": "import org.elasticsearch.index.translog.Translog;",
    "resolution": "import org.elasticsearch.index.translog.Translog;import org.elasticsearch.index.engine.Engine;",
    "conflict": "import org.elasticsearch.index.engine.Engine;"
  },
  {
    "devdecision": "Version 2",
    "id": 77630,
    "v2": "new RecoveryCleanFilesRequest(request.recoveryId(), shard.shardId(), recoverySourceMetadata, translogView.totalOperations()),",
    "resolution": "new RecoveryCleanFilesRequest(request.recoveryId(), shard.shardId(), recoverySourceMetadata, translogView.totalOperations()),",
    "conflict": "new RecoveryCleanFilesRequest(request.recoveryId(), shard.shardId(), remainingFilesAfterCleanup, shard.translog().estimatedNumberOfOperations()),"
  },
  {
    "devdecision": "Concatenation",
    "id": 77636,
    "v2": "import org.elasticsearch.common.util.concurrent.AbstractRefCounted;",
    "resolution": "import org.elasticsearch.common.util.concurrent.AbstractRefCounted;import org.elasticsearch.common.util.BigArrays;",
    "conflict": "import org.elasticsearch.common.util.BigArrays;"
  },
  {
    "devdecision": "Version 1",
    "id": 77638,
    "v2": "ClusterService clusterService, NodeEnvironment nodeEnv, ShardPath path) {",
    "resolution": "ClusterService clusterService, NodeEnvironment nodeEnv, ShardPath path, BigArrays bigArrays) {",
    "conflict": "ClusterService clusterService, NodeEnvironment nodeEnv, ShardPath path, BigArrays bigArrays) {"
  },
  {
    "devdecision": "Version 1",
    "id": 77639,
    "v2": "public void skipTranslogRecovery() {",
    "resolution": "public void skipTranslogRecovery(boolean wipeTranslogs) throws IOException {",
    "conflict": "public void skipTranslogRecovery(boolean wipeTranslogs) throws IOException {"
  },
  {
    "devdecision": "Version 1",
    "id": 77657,
    "v2": "throw new IllegalArgumentException(\"_count must be the last element in the path\");",
    "resolution": "throw new InvalidAggregationPathException(\"_count must be the last element in the path\");",
    "conflict": "throw new InvalidAggregationPathException(\"_count must be the last element in the path\");"
  },
  {
    "devdecision": "Version 1",
    "id": 77658,
    "v2": "throw new IllegalArgumentException(\"_key must be the last element in the path\");",
    "resolution": "throw new InvalidAggregationPathException(\"_key must be the last element in the path\");",
    "conflict": "throw new InvalidAggregationPathException(\"_key must be the last element in the path\");"
  },
  {
    "devdecision": "Manual",
    "id": 77661,
    "v2": "return new NestedAggregator(name, factories, objectMapper, context, parent, metaData, queryCachingPolicy);",
    "resolution": "return new NestedAggregator(name, factories, objectMapper, context, parent, reducers, metaData, queryCachingPolicy);",
    "conflict": "return new NestedAggregator(name, factories, objectMapper, context, parent, reducers, metaData, filterCachingPolicy);"
  },
  {
    "devdecision": "Combination",
    "id": 77662,
    "v2": "",
    "resolution": "import org.elasticsearch.search.aggregations.reducers.Reducer;",
    "conflict": "import org.elasticsearch.ElasticsearchIllegalArgumentException; import org.elasticsearch.search.aggregations.reducers.Reducer;"
  },
  {
    "devdecision": "Manual",
    "id": 77663,
    "v2": "builder.add(new NestedAggregator.Factory(\"test\", \"nested_field\", QueryCachingPolicy.ALWAYS_CACHE));",
    "resolution": "builder.addAggregator(new NestedAggregator.Factory(\"test\", \"nested_field\", QueryCachingPolicy.ALWAYS_CACHE));",
    "conflict": "builder.addAggregator(new NestedAggregator.Factory(\"test\", \"nested_field\", FilterCachingPolicy.ALWAYS_CACHE));"
  },
  {
    "devdecision": "Version 2",
    "id": 77673,
    "v2": "public String getFilename(long translogId) {",
    "resolution": "public String getFilename(long translogId) {",
    "conflict": "public String getPath(long translogId) {"
  },
  {
    "devdecision": "Version 2",
    "id": 77674,
    "v2": "final String translogName = getFilename(translogId);",
    "resolution": "final String translogName = getFilename(translogId);",
    "conflict": "final String translogName = getPath(translogId);"
  },
  {
    "devdecision": "Version 1",
    "id": 77676,
    "v2": "return InternalAggregations.reduce(aggregationsList, new ReduceContext(bigArrays, scriptService));",
    "resolution": "return aggregations;",
    "conflict": "return aggregations;"
  },
  {
    "devdecision": "Manual",
    "id": 77702,
    "v2": "public InternalAvg reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAvg doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAvg doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77704,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77705,
    "v2": "public InternalMax reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalMax doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalMax doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77706,
    "v2": "public InternalMin reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalMin doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalMin doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77708,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77709,
    "v2": "public InternalStats reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalStats doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalStats doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77710,
    "v2": "public InternalExtendedStats reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalExtendedStats doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalExtendedStats doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77712,
    "v2": "public InternalSum reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalSum doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalSum doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77715,
    "v2": "public InternalAggregation reduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "resolution": "public InternalAggregation doReduce(List<InternalAggregation> aggregations, ReduceContext reduceContext) {",
    "conflict": "public InternalAggregation doReduce(ReduceContext reduceContext) {"
  },
  {
    "devdecision": "Manual",
    "id": 77744,
    "v2": "public LicensesService(Settings settings, ClusterService clusterService, ThreadPool threadPool, ESLicenseManager esLicenseManager) {",
    "resolution": "public LicensesService(Settings settings, ClusterService clusterService, ThreadPool threadPool, TransportService transportService, ESLicenseManager esLicenseManager) {",
    "conflict": "public LicensesService(Settings settings, ClusterService clusterService, ThreadPool threadPool, TransportService transportService) {"
  }
]
}