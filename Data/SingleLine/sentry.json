{"conflicts":[
  {
    "devdecision": "Manual",
    "id": 101623,
    "v1": "from typing import Callable, Iterable, Optional, Sequence",
    "v2": "from typing import Iterable, Optional, Sequence, Tuple",
    "resolution": "from typing import Callable, Iterable, Optional, Sequence, Tuple",
    "conflict": "from typing import Callable, Iterable, Optional, Sequence"
  },
  {
    "devdecision": "Version 1",
    "id": 101626,
    "v1": "",
    "v2": "if not self.organization:             return ()",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Manual",
    "id": 101627,
    "v1": "from sentry.auth.email import AmbiguousUserResolution, AuthHelperResolution",
    "v2": "from sentry.auth.email import AmbiguousUserFromEmail, resolve_email_to_user",
    "resolution": "from sentry.auth.email import AmbiguousUserFromEmail, AuthHelperResolution",
    "conflict": "from sentry.auth.email import AmbiguousUserResolution, AuthHelperResolution"
  },
  {
    "devdecision": "Manual",
    "id": 101629,
    "v1": "from sentry.auth.email import AmbiguousUserResolution, AuthHelperResolution, IdentityViewResolution",
    "v2": "from sentry.auth.email import AmbiguousUserFromEmail, resolve_email_to_user",
    "resolution": "from sentry.auth.email import AmbiguousUserFromEmail, AuthHelperResolution, IdentityViewResolution",
    "conflict": "from sentry.auth.email import AmbiguousUserResolution, AuthHelperResolution, IdentityViewResolution"
  },
  {
    "devdecision": "Version 1",
    "id": 101655,
    "v1": "",
    "v2": "from typing import Any, Mapping, MutableMapping",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 101662,
    "v1": "reject_member_invitation(member, request.user, api_key, request.META[\"REMOTE_ADDR\"])",
    "v2": "member.reject_member_invitation(request.user, api_key, request.META[\"REMOTE_ADDR\"])",
    "resolution": "member.reject_member_invitation(request.user, api_key, request.META[\"REMOTE_ADDR\"])",
    "conflict": "reject_member_invitation(member, request.user, api_key, request.META[\"REMOTE_ADDR\"])"
  },
  {
    "devdecision": "Version 1",
    "id": 101666,
    "v1": "from platform import platform",
    "v2": "from platform import platform as pf",
    "resolution": "from platform import platform",
    "conflict": "from platform import platform"
  },
  {
    "devdecision": "Version 2",
    "id": 101688,
    "v1": "from typing import Optional",
    "v2": "from typing import Dict, Optional, Union",
    "resolution": "from typing import Dict, Optional, Union",
    "conflict": "from typing import Optional"
  },
  {
    "devdecision": "Version 2",
    "id": 101689,
    "v1": "from sentry.lang.native.symbolicator import SECRET_PROPERTY",
    "v2": "from sentry.lang.native.symbolicator import secret_fields",
    "resolution": "from sentry.lang.native.symbolicator import secret_fields",
    "conflict": "from sentry.lang.native.symbolicator import SECRET_PROPERTY"
  },
  {
    "devdecision": "Version 2",
    "id": 101692,
    "v1": "for secret in [\"appconnectPrivateKey\", \"itunesPassword\"]:",
    "v2": "for secret in secret_fields(symbol_source_config.type):",
    "resolution": "for secret in secret_fields(symbol_source_config.type):",
    "conflict": "for secret in [\"appconnectPrivateKey\", \"itunesPassword\"]:"
  },
  {
    "devdecision": "Version 2",
    "id": 101695,
    "v1": "from sentry.lang.native.symbolicator import redact_sources",
    "v2": "from sentry.lang.native.symbolicator import redact_source_secrets",
    "resolution": "from sentry.lang.native.symbolicator import redact_source_secrets",
    "conflict": "from sentry.lang.native.symbolicator import redact_sources"
  },
  {
    "devdecision": "Version 2",
    "id": 101696,
    "v1": "symbol_sources = redact_sources(custom_symbol_sources_json)",
    "v2": "symbol_sources = redact_source_secrets(custom_symbol_sources_json)",
    "resolution": "symbol_sources = redact_source_secrets(custom_symbol_sources_json)",
    "conflict": "symbol_sources = redact_sources(custom_symbol_sources_json)"
  },
  {
    "devdecision": "Version 2",
    "id": 101710,
    "v1": "# Generated by Django 2.1.15 on 2021-08-19 17:01",
    "v2": "# Generated by Django 2.1.15 on 2021-08-20 15:49",
    "resolution": "# Generated by Django 2.1.15 on 2021-08-20 15:49",
    "conflict": "# Generated by Django 2.1.15 on 2021-08-19 17:01"
  },
  {
    "devdecision": "Version 1",
    "id": 101716,
    "v1": "from sentry.api.endpoints.grouping_levels import check_feature, get_levels_overview",
    "v2": "from sentry.api.endpoints.grouping_levels import LevelsOverview, check_feature, get_levels_overview",
    "resolution": "from sentry.api.endpoints.grouping_levels import check_feature, get_levels_overview",
    "conflict": "from sentry.api.endpoints.grouping_levels import check_feature, get_levels_overview"
  },
  {
    "devdecision": "Version 1",
    "id": 101723,
    "v1": "data={\"source_id\": args.source_id, **args.replacement.get_activity_args(unmerge_key)},",
    "v2": "data={\"source_id\": args.source_id, **args.replacement.get_activity_args()},",
    "resolution": "data={\"source_id\": args.source_id, **args.replacement.get_activity_args(unmerge_key)},",
    "conflict": "data={\"source_id\": args.source_id, **args.replacement.get_activity_args(unmerge_key)},"
  },
  {
    "devdecision": "Version 1",
    "id": 101734,
    "v1": "from sentry.utils import metrics",
    "v2": "from sentry.utils import json, metrics",
    "resolution": "from sentry.utils import metrics",
    "conflict": "from sentry.utils import metrics"
  },
  {
    "devdecision": "Version 2",
    "id": 101743,
    "v1": "with self.feature(FEATURE_NAMES):",
    "v2": "with self.feature(FEATURE_NAMES + MANAGE_DASHBOARDS):",
    "resolution": "with self.feature(FEATURE_NAMES + MANAGE_DASHBOARDS):",
    "conflict": "with self.feature(FEATURE_NAMES):"
  },
  {
    "devdecision": "Version 2",
    "id": 101788,
    "v1": "# Enable manage dashboards.",
    "v2": "# Enable dashboards manager.",
    "resolution": "# Enable dashboards manager.",
    "conflict": "# Enable manage dashboards."
  },
  {
    "devdecision": "Version 1",
    "id": 101790,
    "v1": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/meta/$\",",
    "v2": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/$\",",
    "resolution": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/meta/$\",",
    "conflict": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/meta/$\","
  },
  {
    "devdecision": "Version 1",
    "id": 101792,
    "v1": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/$\",",
    "v2": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/(?P<metric_name>[^/]+)/(?P<tag_name>[^/]+)/$\",",
    "resolution": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/$\",",
    "conflict": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/$\","
  },
  {
    "devdecision": "Version 2",
    "id": 101795,
    "v1": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/$\",",
    "v2": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/meta/$\",",
    "resolution": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/meta/$\",",
    "conflict": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/$\","
  },
  {
    "devdecision": "Version 2",
    "id": 101797,
    "v1": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/(?P<metric_name>[^/]+)/(?P<tag_name>[^/]+)/$\",",
    "v2": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/$\",",
    "resolution": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/$\",",
    "conflict": "r\"^(?P<organization_slug>[^/]+)/(?P<project_slug>[^/]+)/metrics/tags/(?P<metric_name>[^/]+)/(?P<tag_name>[^/]+)/$\","
  },
  {
    "devdecision": "Version 2",
    "id": 101806,
    "v1": "owner=self.user.actor,",
    "v2": "owner=self.user.actor.id,",
    "resolution": "owner=self.user.actor.id,",
    "conflict": "owner=self.user.actor,"
  },
  {
    "devdecision": "Version 2",
    "id": 101809,
    "v1": "except Exception:",
    "v2": "except serializers.ValidationError:",
    "resolution": "except serializers.ValidationError:",
    "conflict": "except Exception:"
  },
  {
    "devdecision": "Version 1",
    "id": 101813,
    "v1": "assert alert_rule.owner == self.team.actor",
    "v2": "# assert alert_rule.owner == self.team.actor.get_actor_identifier()",
    "resolution": "assert alert_rule.owner == self.team.actor",
    "conflict": "assert alert_rule.owner == self.team.actor"
  },
  {
    "devdecision": "Combination",
    "id": 101836,
    "v1": "default_manager.add(\"organizations:workflow-owners\", OrganizationFeature)  # NOQA default_manager.add(\"organizations:snql\", OrganizationFeature)  # NOQA",
    "v2": "",
    "resolution": "default_manager.add(\"organizations:snql\", OrganizationFeature)  # NOQA",
    "conflict": "default_manager.add(\"organizations:workflow-owners\", OrganizationFeature)  # NOQA default_manager.add(\"organizations:snql\", OrganizationFeature)  # NOQA"
  },
  {
    "devdecision": "Concatenation",
    "id": 101856,
    "v1": "'projects:custom-filters': False,",
    "v2": "'projects:stream-hit-counts': False,",
    "resolution": "'projects:stream-hit-counts': False,     'projects:custom-filters': False,",
    "conflict": "'projects:custom-filters': False,"
  },
  {
    "devdecision": "Concatenation",
    "id": 101857,
    "v1": "default_manager.add('projects:custom-filters', ProjectFeature)  # NOQA",
    "v2": "default_manager.add('projects:stream-hit-counts', ProjectFeature)  # NOQA",
    "resolution": "default_manager.add('projects:stream-hit-counts', ProjectFeature)  # NOQA default_manager.add('projects:custom-filters', ProjectFeature)  # NOQA",
    "conflict": "default_manager.add('projects:custom-filters', ProjectFeature)  # NOQA"
  },
  {
    "devdecision": "Concatenation",
    "id": 101870,
    "v1": "from sentry.reprocessing import report_processing_issue",
    "v2": "from sentry.constants import NATIVE_UNKNOWN_STRING",
    "resolution": "from sentry.constants import NATIVE_UNKNOWN_STRING from sentry.reprocessing import report_processing_issue",
    "conflict": "from sentry.reprocessing import report_processing_issue"
  },
  {
    "devdecision": "Manual",
    "id": 101871,
    "v1": "new_frame.get('function') or NATIVE_UNKNOWN_STRING",
    "v2": "frame.get('function') or '<unknown>'",
    "resolution": "frame.get('function') or NATIVE_UNKNOWN_STRING",
    "conflict": "new_frame.get('function') or NATIVE_UNKNOWN_STRING"
  },
  {
    "devdecision": "Version 1",
    "id": 101878,
    "v1": "colno=frame.get('colno') or 0)",
    "v2": "colno=frame['colno'] or 0)",
    "resolution": "colno=frame.get('colno') or 0)",
    "conflict": "colno=frame.get('colno') or 0)"
  },
  {
    "devdecision": "Version 2",
    "id": 101888,
    "v1": "if self._is_optional_app_bundled_framework(frame, img):",
    "v2": "if self._is_optional_dsym(frame, img):",
    "resolution": "if self._is_optional_dsym(frame, img):",
    "conflict": "if self._is_optional_app_bundled_framework(frame, img):"
  },
  {
    "devdecision": "Version 2",
    "id": 101903,
    "v1": "'id': str(obj.id),",
    "v2": "'id': six.text_type(obj.id),",
    "resolution": "'id': six.text_type(obj.id),",
    "conflict": "'id': str(obj.id),"
  },
  {
    "devdecision": "Concatenation",
    "id": 101945,
    "v1": "from .endpoints.project_events import ProjectEventsEndpoint",
    "v2": "from .endpoints.project_event_details import ProjectEventDetailsEndpoint",
    "resolution": "from .endpoints.project_event_details import ProjectEventDetailsEndpoint from .endpoints.project_events import ProjectEventsEndpoint",
    "conflict": "from .endpoints.project_events import ProjectEventsEndpoint"
  },
  {
    "devdecision": "Version 1",
    "id": 101950,
    "v1": "from datetime import datetime",
    "v2": "from datetime import datetime, timedelta",
    "resolution": "from datetime import datetime",
    "conflict": "from datetime import datetime"
  },
  {
    "devdecision": "Version 1",
    "id": 101951,
    "v1": "ERR_INVALID_STATS_PERIOD = \"Invalid stats_period. Valid choices are '', '24h', and '14d'\"",
    "v2": "",
    "resolution": "ERR_INVALID_STATS_PERIOD = \"Invalid stats_period. Valid choices are '', '24h', and '14d'\"",
    "conflict": "ERR_INVALID_STATS_PERIOD = \"Invalid stats_period. Valid choices are '', '24h', and '14d'\""
  },
  {
    "devdecision": "Version 1",
    "id": 101960,
    "v1": "from sentry.permissions import can_remove_project",
    "v2": "from sentry.permissions import can_remove_project, can_set_public_projects",
    "resolution": "from sentry.permissions import can_remove_project",
    "conflict": "from sentry.permissions import can_remove_project"
  },
  {
    "devdecision": "Version 2",
    "id": 101966,
    "v1": "return Response({'detail': 'No events found'}, status=404)",
    "v2": "return Response({'detail': 'No events found for group'}, status=404)",
    "resolution": "return Response({'detail': 'No events found for group'}, status=404)",
    "conflict": "return Response({'detail': 'No events found'}, status=404)"
  },
  {
    "devdecision": "Version 2",
    "id": 102012,
    "v1": "import sys",
    "v2": "",
    "resolution": "",
    "conflict": "import sys"
  },
  {
    "devdecision": "Concatenation",
    "id": 102021,
    "v1": "'sentry.rules.conditions.event_attribute.EventAttributeCondition',",
    "v2": "'sentry.rules.conditions.level.LevelCondition',",
    "resolution": "'sentry.rules.conditions.level.LevelCondition',     'sentry.rules.conditions.event_attribute.EventAttributeCondition',",
    "conflict": "'sentry.rules.conditions.event_attribute.EventAttributeCondition',"
  },
  {
    "devdecision": "Manual",
    "id": 102022,
    "v1": "AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus, Team,",
    "v2": "AuditLogEntryEvent, Organization, OrganizationStatus, Team,",
    "resolution": "AuditLogEntryEvent, Organization, OrganizationStatus, Team, TeamStatus",
    "conflict": "AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus, Team,"
  },
  {
    "devdecision": "Version 2",
    "id": 102023,
    "v1": "from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team, TeamStatus",
    "v2": "from sentry.models import AuditLogEntryEvent, Team, TeamStatus",
    "resolution": "from sentry.models import AuditLogEntryEvent, Team, TeamStatus",
    "conflict": "from sentry.models import AuditLogEntry, AuditLogEntryEvent, Team, TeamStatus"
  },
  {
    "devdecision": "Concatenation",
    "id": 102033,
    "v1": "from sentry.web.frontend.react_page import ReactPageView",
    "v2": "from sentry.web.frontend.release_webhook import ReleaseWebhookView",
    "resolution": "from sentry.web.frontend.release_webhook import ReleaseWebhookView from sentry.web.frontend.react_page import ReactPageView",
    "conflict": "from sentry.web.frontend.react_page import ReactPageView"
  },
  {
    "devdecision": "Manual",
    "id": 102050,
    "v1": "",
    "v2": "OrganizationMemberTeams = OrganizationMember.teams.through",
    "resolution": "'teams': [t.id for t in self.teams.all()],",
    "conflict": ""
  },
  {
    "devdecision": "Version 1",
    "id": 102056,
    "v1": "AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus, Team",
    "v2": "AuditLogEntry, AuditLogEntryEvent, Team, Organization, OrganizationStatus",
    "resolution": "AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus, Team",
    "conflict": "AuditLogEntry, AuditLogEntryEvent, Organization, OrganizationStatus, Team"
  },
  {
    "devdecision": "Combination",
    "id": 102058,
    "v1": "",
    "v2": "'isResolved': obj.get_status() == GroupStatus.RESOLVED,             'level': obj.get_level_display(),",
    "resolution": "'level': obj.get_level_display(),",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 102086,
    "v1": "project = Project.objects.get(",
    "v2": "project = Project.objects.get_from_cache(",
    "resolution": "project = Project.objects.get_from_cache(",
    "conflict": "project = Project.objects.get("
  },
  {
    "devdecision": "Version 2",
    "id": 102088,
    "v1": "'project_slug': project.slug",
    "v2": "'project_slug': project.slug,",
    "resolution": "'project_slug': project.slug,",
    "conflict": "'project_slug': project.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102089,
    "v1": "'project_slug': project.slug",
    "v2": "'project_slug': project.slug,",
    "resolution": "'project_slug': project.slug,",
    "conflict": "'project_slug': project.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102090,
    "v1": "'project_slug': project.slug",
    "v2": "'project_slug': project.slug,",
    "resolution": "'project_slug': project.slug,",
    "conflict": "'project_slug': project.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102091,
    "v1": "'project_slug': project.slug",
    "v2": "'project_slug': project.slug,",
    "resolution": "'project_slug': project.slug,",
    "conflict": "'project_slug': project.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102093,
    "v1": "'project_slug': self.project.slug",
    "v2": "'project_slug': self.project.slug,",
    "resolution": "'project_slug': self.project.slug,",
    "conflict": "'project_slug': self.project.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102120,
    "v1": "def get(self, request, organization_slug, project_slug):",
    "v2": "def get(self, request, project):",
    "resolution": "def get(self, request, project):",
    "conflict": "def get(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102147,
    "v1": "def get(self, request, organization_slug, project_slug):",
    "v2": "def get(self, request, project):",
    "resolution": "def get(self, request, project):",
    "conflict": "def get(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102149,
    "v1": "def put(self, request, organization_slug, project_slug):",
    "v2": "def put(self, request, project):",
    "resolution": "def put(self, request, project):",
    "conflict": "def put(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102151,
    "v1": "def delete(self, request, organization_slug, project_slug):",
    "v2": "def delete(self, request, project):",
    "resolution": "def delete(self, request, project):",
    "conflict": "def delete(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102153,
    "v1": "def get(self, request, organization_slug, project_slug):",
    "v2": "def get(self, request, project):",
    "resolution": "def get(self, request, project):",
    "conflict": "def get(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102155,
    "v1": "def put(self, request, organization_slug, project_slug):",
    "v2": "def put(self, request, project):",
    "resolution": "def put(self, request, project):",
    "conflict": "def put(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102157,
    "v1": "def delete(self, request, organization_slug, project_slug):",
    "v2": "def delete(self, request, project):",
    "resolution": "def delete(self, request, project):",
    "conflict": "def delete(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102159,
    "v1": "def get(self, request, organization_slug, project_slug):",
    "v2": "def get(self, request, project):",
    "resolution": "def get(self, request, project):",
    "conflict": "def get(self, request, organization_slug, project_slug):"
  },
  {
    "devdecision": "Version 2",
    "id": 102168,
    "v1": "'team_slug': team.slug",
    "v2": "'team_slug': team.slug,",
    "resolution": "'team_slug': team.slug,",
    "conflict": "'team_slug': team.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102169,
    "v1": "'team_slug': team.slug",
    "v2": "'team_slug': team.slug,",
    "resolution": "'team_slug': team.slug,",
    "conflict": "'team_slug': team.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102170,
    "v1": "'team_slug': team.slug",
    "v2": "'team_slug': team.slug,",
    "resolution": "'team_slug': team.slug,",
    "conflict": "'team_slug': team.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102171,
    "v1": "'team_slug': team.slug",
    "v2": "'team_slug': team.slug,",
    "resolution": "'team_slug': team.slug,",
    "conflict": "'team_slug': team.slug"
  },
  {
    "devdecision": "Version 2",
    "id": 102187,
    "v1": "def send(self, project, **kwargs):",
    "v2": "def send(self, **kwargs):",
    "resolution": "def send(self, **kwargs):",
    "conflict": "def send(self, project, **kwargs):"
  },
  {
    "devdecision": "Concatenation",
    "id": 102195,
    "v1": "self.had_data = data is not None",
    "v2": "self.rule = rule",
    "resolution": "self.rule = rule         self.had_data = data is not None",
    "conflict": "self.had_data = data is not None"
  },
  {
    "devdecision": "Version 2",
    "id": 102211,
    "v1": "",
    "v2": "ROOT = os.path.realpath(os.path.join(os.path.dirname(__file__)))",
    "resolution": "ROOT = os.path.realpath(os.path.join(os.path.dirname(__file__)))",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 102225,
    "v1": "if result.get('assignedTo') and group.project not in Project.objects.get_for_user(result['assignedTo']):",
    "v2": "if result.get('assignedTo') and not group.project.has_access(result['assignedTo']):",
    "resolution": "if result.get('assignedTo') and not group.project.has_access(result['assignedTo']):",
    "conflict": "if result.get('assignedTo') and group.project not in Project.objects.get_for_user(result['assignedTo']):"
  },
  {
    "devdecision": "Version 2",
    "id": 102239,
    "v1": "",
    "v2": "organization = item_list[0].team.organization",
    "resolution": "organization = item_list[0].team.organization",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 102241,
    "v1": "attach_foreignkey(item_list, Project.team)",
    "v2": "",
    "resolution": "",
    "conflict": "attach_foreignkey(item_list, Project.team)"
  },
  {
    "devdecision": "Version 2",
    "id": 102244,
    "v1": "access_type = team_map[team.slug].access_type",
    "v2": "access_type = team_map[team.id].access_type",
    "resolution": "access_type = team_map[team.id].access_type",
    "conflict": "access_type = team_map[team.slug].access_type"
  },
  {
    "devdecision": "Version 1",
    "id": 102333,
    "v1": "from sentry.constants import MEMBER_USER",
    "v2": "from sentry.constants import MEMBER_USER, EVENTS_PER_PAGE",
    "resolution": "from sentry.constants import MEMBER_USER",
    "conflict": "from sentry.constants import MEMBER_USER"
  },
  {
    "devdecision": "Version 1",
    "id": 102338,
    "v1": "",
    "v2": "from sentry.utils.cursors import Cursor from sentry.utils.dates import parse_date",
    "resolution": "",
    "conflict": ""
  },
  {
    "devdecision": "Version 2",
    "id": 102353,
    "v1": "'isBookmarked': '1',",
    "v2": "'isBookmarked': 'true',",
    "resolution": "'isBookmarked': 'true',",
    "conflict": "'isBookmarked': '1',"
  },
  {
    "devdecision": "Version 1",
    "id": 102367,
    "v1": "team = models.ForeignKey('sentry.Team')",
    "v2": "team = models.ForeignKey('sentry.Team', null=True)",
    "resolution": "team = models.ForeignKey('sentry.Team')",
    "conflict": "team = models.ForeignKey('sentry.Team')"
  },
  {
    "devdecision": "Version 1",
    "id": 102372,
    "v1": "team=group.team, user=user):",
    "v2": "user, team=group.team, superuser=False):",
    "resolution": "team=group.team, user=user):",
    "conflict": "team=group.team, user=user):"
  },
  {
    "devdecision": "Version 1",
    "id": 102377,
    "v1": "from sentry.models import Group, Event",
    "v2": "from sentry.models import Group, Event, User",
    "resolution": "from sentry.models import Group, Event",
    "conflict": "from sentry.models import Group, Event"
  },
  {
    "devdecision": "Version 1",
    "id": 102395,
    "v1": "from __future__ import absolute_import, division, print_function",
    "v2": "from __future__ import absolute_import",
    "resolution": "from __future__ import absolute_import, division, print_function",
    "conflict": "from __future__ import absolute_import, division, print_function"
  },
  {
    "devdecision": "Version 1",
    "id": 102396,
    "v1": "from __future__ import absolute_import, print_function",
    "v2": "from __future__ import absolute_import",
    "resolution": "from __future__ import absolute_import, print_function",
    "conflict": "from __future__ import absolute_import, print_function"
  },
  {
    "devdecision": "Version 1",
    "id": 102398,
    "v1": "from __future__ import absolute_import, print_function",
    "v2": "from __future__ import absolute_import",
    "resolution": "from __future__ import absolute_import, print_function",
    "conflict": "from __future__ import absolute_import, print_function"
  },
  {
    "devdecision": "Version 1",
    "id": 102399,
    "v1": "from __future__ import absolute_import, print_function",
    "v2": "from __future__ import absolute_import",
    "resolution": "from __future__ import absolute_import, print_function",
    "conflict": "from __future__ import absolute_import, print_function"
  },
  {
    "devdecision": "Version 1",
    "id": 102406,
    "v1": "Group, GroupTagValue, Project, TagValue, Activity, User)",
    "v2": "Group, GroupBookmark, GroupTagValue, Project, TagValue, Activity, User)",
    "resolution": "Group, GroupTagValue, Project, TagValue, Activity, User)",
    "conflict": "Group, GroupTagValue, Project, TagValue, Activity, User)"
  },
  {
    "devdecision": "Version 1",
    "id": 102408,
    "v1": "Project, Group, GroupMeta, Event, Activity, TagKey, GroupSeen",
    "v2": "Project, Group, GroupMeta, Event, Activity, EventMapping, TagKey, GroupSeen",
    "resolution": "Project, Group, GroupMeta, Event, Activity, TagKey, GroupSeen",
    "conflict": "Project, Group, GroupMeta, Event, Activity, TagKey, GroupSeen"
  },
  {
    "devdecision": "Manual",
    "id": 102411,
    "v1": "from sentry.models import Project, Team, TeamMember, User, HelpPage",
    "v2": "from sentry.models import Broadcast, Project, Team, TeamMember, User",
    "resolution": "from sentry.models import Broadcast, Project, Team, TeamMember, User, HelpPage",
    "conflict": "from sentry.models import Project, Team, TeamMember, User, HelpPage"
  },
  {
    "devdecision": "Concatenation",
    "id": 102413,
    "v1": "from .endpoints.project_member_index import ProjectMemberIndexEndpoint",
    "v2": "from .endpoints.project_releases import ProjectReleasesEndpoint",
    "resolution": "from .endpoints.project_releases import ProjectReleasesEndpoint from .endpoints.project_member_index import ProjectMemberIndexEndpoint",
    "conflict": "from .endpoints.project_member_index import ProjectMemberIndexEndpoint"
  },
  {
    "devdecision": "Concatenation",
    "id": 102417,
    "v1": "from sentry.api.serializers.base import serialize",
    "v2": "from sentry import options",
    "resolution": "from sentry.api.serializers.base import serialize from sentry import options",
    "conflict": "from sentry.api.serializers.base import serialize"
  },
  {
    "devdecision": "Manual",
    "id": 102461,
    "v1": "process_data_timestamp, validate_data, get_interface)",
    "v2": "process_data_timestamp, validate_data, INTERFACE_ALIASES, get_interface, APIError)",
    "resolution": "process_data_timestamp, validate_data, get_interface, APIError",
    "conflict": "process_data_timestamp, validate_data, get_interface)"
  },
  {
    "devdecision": "Version 2",
    "id": 102467,
    "v1": "'url': http.url_without_fragment,",
    "v2": "'url': urlparse.urldefrag(http.url)[0],",
    "resolution": "'url': urlparse.urldefrag(http.url)[0],",
    "conflict": "'url': http.url_without_fragment,"
  },
  {
    "devdecision": "Concatenation",
    "id": 102468,
    "v1": "'djangorestframework>=2.3.8,<2.4.0',",
    "v2": "'email-reply-parser>=0.2.0,<0.3.0',",
    "resolution": "'email-reply-parser>=0.2.0,<0.3.0',     'djangorestframework>=2.3.8,<2.4.0',",
    "conflict": "'djangorestframework>=2.3.8,<2.4.0',"
  },
  {
    "devdecision": "Concatenation",
    "id": 102471,
    "v1": "'sentry.nodestore',",
    "v2": "'sentry.search',",
    "resolution": "'sentry.search',     'sentry.nodestore',",
    "conflict": "'sentry.nodestore',"
  },
  {
    "devdecision": "Concatenation",
    "id": 102474,
    "v1": "import pytest",
    "v2": "import os.path",
    "resolution": "import os.path import pytest",
    "conflict": "import pytest"
  },
  {
    "devdecision": "Manual",
    "id": 102481,
    "v1": "md5('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems()))).hexdigest(),",
    "v2": "md5(smart_str('&'.join('%s=%s' % (k, self._map_column(model, k, v)) for k, v in sorted(filters.iteritems())))).hexdigest(),",
    "resolution": "md5(smart_str('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems())))).hexdigest(),",
    "conflict": "md5('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems()))).hexdigest(),"
  },
  {
    "devdecision": "Manual",
    "id": 102482,
    "v1": "md5('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems()))).hexdigest())",
    "v2": "md5(smart_str('&'.join('%s=%s' % (k, self._map_column(model, k, v)) for k, v in sorted(filters.iteritems())))).hexdigest())",
    "resolution": "md5(smart_str('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems())))).hexdigest(),",
    "conflict": "md5('&'.join('%s=%s' % (k, self._coerce_val(v)) for k, v in sorted(filters.iteritems()))).hexdigest())"
  },
  {
    "devdecision": "Manual",
    "id": 102486,
    "v1": "from sentry.constants import MEMBER_USER",
    "v2": "from sentry.constants import MEMBER_OWNER",
    "resolution": "from sentry.constants import MEMBER_OWNER, MEMBER_USER",
    "conflict": "from sentry.constants import MEMBER_USER"
  },
  {
    "devdecision": "Concatenation",
    "id": 102534,
    "v1": "url(r'^api/(?:(?P<project_id>[\\w_-]+)/)?stats/$', api.get_stats, name='sentry-api-stats'),",
    "v2": "url(r'^api/(?P<project_id>[\\w_-]+)/tags/search/$', api.search_tags, name='sentry-api-search-tags'),",
    "resolution": "url(r'^api/(?P<project_id>[\\w_-]+)/tags/search/$', api.search_tags, name='sentry-api-search-tags'),     url(r'^api/(?:(?P<project_id>[\\w_-]+)/)?stats/$', api.get_stats, name='sentry-api-stats'),",
    "conflict": "url(r'^api/(?:(?P<project_id>[\\w_-]+)/)?stats/$', api.get_stats, name='sentry-api-stats'),"
  },
  {
    "devdecision": "Manual",
    "id": 102609,
    "v1": "version='4.7.6',",
    "v2": "version='4.7.7',",
    "resolution": "version='4.7.8',",
    "conflict": "version='4.7.6',"
  },
  {
    "devdecision": "Concatenation",
    "id": 102646,
    "v1": "'django-bitfield',",
    "v2": "'Django>=1.2,<1.4',",
    "resolution": "'django-bitfield',     'Django>=1.2,<1.4',",
    "conflict": "'django-bitfield',"
  },
  {
    "devdecision": "Version 1",
    "id": 102648,
    "v1": "version='1.13.0',",
    "v2": "version='1.12.2',",
    "resolution": "version='1.13.0',",
    "conflict": "version='1.13.0',"
  },
  {
    "devdecision": "Version 1",
    "id": 102650,
    "v1": "version='1.13.0',",
    "v2": "version='1.12.1',",
    "resolution": "version='1.13.0',",
    "conflict": "version='1.13.0',"
  },
  {
    "devdecision": "Manual",
    "id": 102658,
    "v1": "urlread(url, get=data, timeout=conf.REMOTE_TIMEOUT)",
    "v2": "urlread(url, POST=data, timeout=conf.REMOTE_TIMEOUT)",
    "resolution": "urlread(url, post=data, timeout=conf.REMOTE_TIMEOUT)",
    "conflict": "urlread(url, get=data, timeout=conf.REMOTE_TIMEOUT)"
  }
]}