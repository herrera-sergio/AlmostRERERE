{"conflicts":[
  {
    "devdecision": "Version 1",
    "id": 73585,
    "v2": "}",
    "resolution": "},",
    "conflict": "},"
  },
  {
    "devdecision": "Version 2",
    "id": 73592,
    "v2": "import { alphaSortEntries, serializeDataForCopy } from '../utils';",
    "resolution": "import { alphaSortEntries, serializeDataForCopy } from '../utils';",
    "conflict": "import {serializeDataForCopy} from '../utils';"
  },
  {
    "devdecision": "Version 2",
    "id": 73596,
    "v2": "JSON.parse(sanitizeForParse(value));",
    "resolution": "JSON.parse(sanitizeForParse(value));",
    "conflict": "JSON.parse(newValue);"
  },
  {
    "devdecision": "Version 2",
    "id": 73598,
    "v2": "import React, { useEffect, useMemo, useState } from 'react';",
    "resolution": "import React, { useEffect, useMemo, useState } from 'react';",
    "conflict": "import React, {useMemo, useState} from 'react';"
  },
  {
    "devdecision": "Manual",
    "id": 73602,
    "v2": "isPathWhitelistedCheck ? 1 : level + 1",
    "resolution": "isPathWhitelistedCheck ? 1 : level + 1,",
    "conflict": "objectPathCheck ? 1 : level + 1,"
  },
  {
    "devdecision": "Version 2",
    "id": 73662,
    "v2": "return renderer.getFiberIDForNative(node, true);",
    "resolution": "return renderer.getFiberIDForNative(node, true);",
    "conflict": "return renderer.getInternalIDFromNative(node, true);"
  },
  {
    "devdecision": "Version 2",
    "id": 73664,
    "v2": "function findNativeNodesForFiberID(id: number) {",
    "resolution": "function findNativeNodesForFiberID(id: number) {",
    "conflict": "function getNativeFromInternal(id: number) {"
  },
  {
    "devdecision": "Version 2",
    "id": 73665,
    "v2": "function getFiberIDForNative(",
    "resolution": "function getFiberIDForNative(",
    "conflict": "function getInternalIDFromNative("
  },
  {
    "devdecision": "Version 2",
    "id": 73666,
    "v2": "const nativeNodes = findNativeNodesForFiberID(id);",
    "resolution": "const nativeNodes = findNativeNodesForFiberID(id);",
    "conflict": "const nativeNodes = getNativeFromInternal(id);"
  },
  {
    "devdecision": "Manual",
    "id": 73670,
    "v2": "nodes = ((renderer.findNativeByFiberID(id): any): ?Array<HTMLElement>);",
    "resolution": "nodes = ((renderer.getNativeFromInternal(id): any): ?Array<HTMLElement>);",
    "conflict": "node = ((renderer.getNativeFromInternal(id): any): HTMLElement);"
  },
  {
    "devdecision": "Manual",
    "id": 73689,
    "v2": "const fiber = findCurrentFiberUsingSlowPathById(id);",
    "resolution": "let fiber = findCurrentFiberUsingSlowPathById(id);",
    "conflict": "let fiber = findCurrentFiberUsingSlowPath(idToFiberMap.get(id));"
  },
  {
    "devdecision": "Version 1",
    "id": 73691,
    "v2": "import { hydrate } from 'src/hydration';",
    "resolution": "import { InspectedElementContext } from './InspectedElementContext';",
    "conflict": "import { InspectedElementContext } from './InspectedElementContext';"
  },
  {
    "devdecision": "Version 1",
    "id": 73692,
    "v2": "const { selectedElementID } = useContext(TreeStateContext);",
    "resolution": "const { inspectedElementID } = useContext(TreeStateContext);",
    "conflict": "const { inspectedElementID } = useContext(TreeStateContext);"
  },
  {
    "devdecision": "Version 1",
    "id": 73727,
    "v2": "run(xhr.responseText, url, options);",
    "resolution": "callback(xhr.responseText, url);",
    "conflict": "callback(xhr.responseText, url);"
  },
  {
    "devdecision": "Manual",
    "id": 73734,
    "v2": "handleChange: React.autoBind(function() {\\n\\",
    "resolution": "handleChange: function() {\\n\\",
    "conflict": "handleInput: function() {\\n\\"
  },
  {
    "devdecision": "Version 2",
    "id": 73736,
    "v2": "",
    "resolution": "",
    "conflict": "} else if (propKey === CONTENT) {         // (Update happens in _updateDOMChildren)"
  }
]
}